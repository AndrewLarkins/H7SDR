
H7SDR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081f0  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08008488  08008488  00018488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008518  08008518  00018518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008520  08008520  00018520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008524  08008524  00018524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001c4  20000000  08008528  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000008bc  200001c4  080086ec  000201c4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000a80  080086ec  00020a80  2**0
                  ALLOC
  9 .ram_sdr      00006440  30000000  30000000  00030000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 10 .ARM.attributes 0000002e  00000000  00000000  00036440  2**0
                  CONTENTS, READONLY
 11 .comment      000000b8  00000000  00000000  0003646e  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030e82  00000000  00000000  00036526  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d50  00000000  00000000  000673a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 000155d2  00000000  00000000  0006c0f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001440  00000000  00000000  000816d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002783  00000000  00000000  00082b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00038a8a  00000000  00000000  00085293  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002fdf9  00000000  00000000  000bdd1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0017f454  00000000  00000000  000edb16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000047a8  00000000  00000000  0026cf6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  00271714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00001ad2  00000000  00000000  00271793  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000120  00000000  00000000  00273265  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	200001c4 	.word	0x200001c4
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08008470 	.word	0x08008470

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	200001c8 	.word	0x200001c8
 80002d4:	08008470 	.word	0x08008470

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	b09f      	sub	sp, #124	; 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d8:	224c      	movs	r2, #76	; 0x4c
 80005da:	2100      	movs	r1, #0
 80005dc:	a80a      	add	r0, sp, #40	; 0x28
 80005de:	f007 fef3 	bl	80083c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e2:	2220      	movs	r2, #32
 80005e4:	2100      	movs	r1, #0
 80005e6:	a802      	add	r0, sp, #8
 80005e8:	f007 feee 	bl	80083c8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80005ec:	2002      	movs	r0, #2
 80005ee:	f004 f889 	bl	8004704 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f2:	4b23      	ldr	r3, [pc, #140]	; (8000680 <SystemClock_Config+0xac>)
 80005f4:	2100      	movs	r1, #0
 80005f6:	4a23      	ldr	r2, [pc, #140]	; (8000684 <SystemClock_Config+0xb0>)
 80005f8:	9101      	str	r1, [sp, #4]
 80005fa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80005fc:	f021 0101 	bic.w	r1, r1, #1
 8000600:	62d9      	str	r1, [r3, #44]	; 0x2c
 8000602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000604:	f003 0301 	and.w	r3, r3, #1
 8000608:	9301      	str	r3, [sp, #4]
 800060a:	6993      	ldr	r3, [r2, #24]
 800060c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000610:	6193      	str	r3, [r2, #24]
 8000612:	6993      	ldr	r3, [r2, #24]
 8000614:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000618:	9301      	str	r3, [sp, #4]
 800061a:	9b01      	ldr	r3, [sp, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800061c:	6993      	ldr	r3, [r2, #24]
 800061e:	049b      	lsls	r3, r3, #18
 8000620:	d5fc      	bpl.n	800061c <SystemClock_Config+0x48>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000622:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 2;
  RCC_OscInitStruct.PLL.PLLN = 200;
 8000624:	22c8      	movs	r2, #200	; 0xc8
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000626:	2001      	movs	r0, #1
 8000628:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800062c:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800062e:	2508      	movs	r5, #8
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000630:	9417      	str	r4, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000632:	951a      	str	r5, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLN = 200;
 8000634:	e9cd 4215 	strd	r4, r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000638:	2204      	movs	r2, #4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800063a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063e:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000640:	e9cd 331b 	strd	r3, r3, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000644:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000648:	e9cd 2418 	strd	r2, r4, [sp, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064c:	f004 f904 	bl	8004858 <HAL_RCC_OscConfig>
 8000650:	4603      	mov	r3, r0
 8000652:	b100      	cbz	r0, 8000656 <SystemClock_Config+0x82>
 8000654:	e7fe      	b.n	8000654 <SystemClock_Config+0x80>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000656:	223f      	movs	r2, #63	; 0x3f
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000658:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800065a:	2340      	movs	r3, #64	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800065c:	4621      	mov	r1, r4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065e:	9202      	str	r2, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000660:	2203      	movs	r2, #3
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000662:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000664:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000666:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000668:	9203      	str	r2, [sp, #12]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800066a:	e9cd 5305 	strd	r5, r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800066e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000672:	9308      	str	r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000674:	f004 fc86 	bl	8004f84 <HAL_RCC_ClockConfig>
 8000678:	b100      	cbz	r0, 800067c <SystemClock_Config+0xa8>
 800067a:	e7fe      	b.n	800067a <SystemClock_Config+0xa6>
  {
    Error_Handler();
  }
}
 800067c:	b01f      	add	sp, #124	; 0x7c
 800067e:	bd30      	pop	{r4, r5, pc}
 8000680:	58000400 	.word	0x58000400
 8000684:	58024800 	.word	0x58024800

08000688 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000688:	b500      	push	{lr}
 800068a:	b0b1      	sub	sp, #196	; 0xc4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800068c:	22a0      	movs	r2, #160	; 0xa0
 800068e:	2100      	movs	r1, #0
 8000690:	a808      	add	r0, sp, #32
 8000692:	f007 fe99 	bl	80083c8 <memset>
  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_LPTIM1;
  PeriphClkInitStruct.PLL2.PLL2M = 1;
  PeriphClkInitStruct.PLL2.PLL2N = 26;
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 8000696:	2308      	movs	r3, #8
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000698:	2201      	movs	r2, #1
  PeriphClkInitStruct.PLL2.PLL2N = 26;
 800069a:	211a      	movs	r1, #26
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 800069c:	9304      	str	r3, [sp, #16]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
  PeriphClkInitStruct.PLL2.PLL2FRACN = 8010;
  PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PLL2;
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800069e:	4668      	mov	r0, sp
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 80006a0:	9202      	str	r2, [sp, #8]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 8010;
 80006a2:	f641 724a 	movw	r2, #8010	; 0x1f4a
  PeriphClkInitStruct.PLL2.PLL2Q = 8;
 80006a6:	9305      	str	r3, [sp, #20]
  PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PLL2;
 80006a8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  PeriphClkInitStruct.PLL2.PLL2N = 26;
 80006ac:	9103      	str	r1, [sp, #12]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 8010;
 80006ae:	9209      	str	r2, [sp, #36]	; 0x24
  PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PLL2;
 80006b0:	9324      	str	r3, [sp, #144]	; 0x90
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_LPTIM1;
 80006b2:	ed9f 7b07 	vldr	d7, [pc, #28]	; 80006d0 <PeriphCommonClock_Config+0x48>
 80006b6:	ed8d 7b00 	vstr	d7, [sp]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80006ba:	ed9f 7b07 	vldr	d7, [pc, #28]	; 80006d8 <PeriphCommonClock_Config+0x50>
 80006be:	ed8d 7b06 	vstr	d7, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006c2:	f004 ff4b 	bl	800555c <HAL_RCCEx_PeriphCLKConfig>
 80006c6:	b910      	cbnz	r0, 80006ce <PeriphCommonClock_Config+0x46>
  {
    Error_Handler();
  }
}
 80006c8:	b031      	add	sp, #196	; 0xc4
 80006ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80006ce:	e7fe      	b.n	80006ce <PeriphCommonClock_Config+0x46>
 80006d0:	00080020 	.word	0x00080020
 80006d4:	00000000 	.word	0x00000000
 80006d8:	00000002 	.word	0x00000002
 80006dc:	000000c0 	.word	0x000000c0

080006e0 <feedDFSDMinput>:
{
  int32_t dcFree_ADCSample;
  for(uint16_t i=startIndex; i < startIndex+ADC_BUFLEN/2; i+=4) {
	  dcFree_ADCSample = (adc_buf[i] - gMean) & 0xffff;
	  dfsdm_chydatinr =  dcFree_ADCSample;   // Phase 0: x[n] + j0
	  *DFSDM_CH0DATINR = dfsdm_chydatinr; // load and trigger DFSDM by 32bit write
 80006e0:	4b1a      	ldr	r3, [pc, #104]	; (800074c <feedDFSDMinput+0x6c>)
  for(uint16_t i=startIndex; i < startIndex+ADC_BUFLEN/2; i+=4) {
 80006e2:	f600 6cff 	addw	ip, r0, #3839	; 0xeff
{
 80006e6:	b5f0      	push	{r4, r5, r6, r7, lr}
	  *DFSDM_CH0DATINR = dfsdm_chydatinr; // load and trigger DFSDM by 32bit write
 80006e8:	681c      	ldr	r4, [r3, #0]
 80006ea:	4e19      	ldr	r6, [pc, #100]	; (8000750 <feedDFSDMinput+0x70>)
 80006ec:	4d19      	ldr	r5, [pc, #100]	; (8000754 <feedDFSDMinput+0x74>)
  for(uint16_t i=startIndex; i < startIndex+ADC_BUFLEN/2; i+=4) {
 80006ee:	4b1a      	ldr	r3, [pc, #104]	; (8000758 <feedDFSDMinput+0x78>)
	  dcFree_ADCSample = (adc_buf[i] - gMean) & 0xffff;
 80006f0:	f836 1010 	ldrh.w	r1, [r6, r0, lsl #1]

	  dcFree_ADCSample = (adc_buf[i + 1] - gMean) & 0xffff;
 80006f4:	1c47      	adds	r7, r0, #1
	  dcFree_ADCSample = (adc_buf[i] - gMean) & 0xffff;
 80006f6:	682a      	ldr	r2, [r5, #0]
	  dfsdm_chydatinr =  ((-dcFree_ADCSample) & 0xffff) << 16; // Phase 90: 0 + -jx[n]
	  *DFSDM_CH0DATINR = dfsdm_chydatinr; // load and trigger DFSDM by 32bit write

	  dcFree_ADCSample = (adc_buf[i + 2] - gMean) & 0xffff;
 80006f8:	f100 0e02 	add.w	lr, r0, #2
	  dcFree_ADCSample = (adc_buf[i + 1] - gMean) & 0xffff;
 80006fc:	f836 7017 	ldrh.w	r7, [r6, r7, lsl #1]
	  dcFree_ADCSample = (adc_buf[i] - gMean) & 0xffff;
 8000700:	1a89      	subs	r1, r1, r2
	  dfsdm_chydatinr =  (-dcFree_ADCSample) & 0xffff; // Phase 180: -x[n] + j0
	  *DFSDM_CH0DATINR = dfsdm_chydatinr; // load and trigger DFSDM by 32bit write

	  dcFree_ADCSample = (adc_buf[i + 3] - gMean) & 0xffff;
 8000702:	1cc2      	adds	r2, r0, #3
	  dcFree_ADCSample = (adc_buf[i + 2] - gMean) & 0xffff;
 8000704:	f836 e01e 	ldrh.w	lr, [r6, lr, lsl #1]
  for(uint16_t i=startIndex; i < startIndex+ADC_BUFLEN/2; i+=4) {
 8000708:	3004      	adds	r0, #4
	  dcFree_ADCSample = (adc_buf[i] - gMean) & 0xffff;
 800070a:	b289      	uxth	r1, r1
	  dcFree_ADCSample = (adc_buf[i + 3] - gMean) & 0xffff;
 800070c:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
  for(uint16_t i=startIndex; i < startIndex+ADC_BUFLEN/2; i+=4) {
 8000710:	b280      	uxth	r0, r0
	  dfsdm_chydatinr =  dcFree_ADCSample;   // Phase 0: x[n] + j0
 8000712:	6019      	str	r1, [r3, #0]
	  *DFSDM_CH0DATINR = dfsdm_chydatinr; // load and trigger DFSDM by 32bit write
 8000714:	6819      	ldr	r1, [r3, #0]
  for(uint16_t i=startIndex; i < startIndex+ADC_BUFLEN/2; i+=4) {
 8000716:	4560      	cmp	r0, ip
	  *DFSDM_CH0DATINR = dfsdm_chydatinr; // load and trigger DFSDM by 32bit write
 8000718:	6021      	str	r1, [r4, #0]
	  dcFree_ADCSample = (adc_buf[i + 1] - gMean) & 0xffff;
 800071a:	6829      	ldr	r1, [r5, #0]
	  dfsdm_chydatinr =  ((-dcFree_ADCSample) & 0xffff) << 16; // Phase 90: 0 + -jx[n]
 800071c:	eba1 0107 	sub.w	r1, r1, r7
 8000720:	ea4f 4101 	mov.w	r1, r1, lsl #16
 8000724:	6019      	str	r1, [r3, #0]
	  *DFSDM_CH0DATINR = dfsdm_chydatinr; // load and trigger DFSDM by 32bit write
 8000726:	6819      	ldr	r1, [r3, #0]
 8000728:	6021      	str	r1, [r4, #0]
	  dcFree_ADCSample = (adc_buf[i + 2] - gMean) & 0xffff;
 800072a:	6829      	ldr	r1, [r5, #0]
	  dfsdm_chydatinr =  (-dcFree_ADCSample) & 0xffff; // Phase 180: -x[n] + j0
 800072c:	eba1 010e 	sub.w	r1, r1, lr
 8000730:	b289      	uxth	r1, r1
 8000732:	6019      	str	r1, [r3, #0]
	  *DFSDM_CH0DATINR = dfsdm_chydatinr; // load and trigger DFSDM by 32bit write
 8000734:	6819      	ldr	r1, [r3, #0]
 8000736:	6021      	str	r1, [r4, #0]
	  dcFree_ADCSample = (adc_buf[i + 3] - gMean) & 0xffff;
 8000738:	6829      	ldr	r1, [r5, #0]
 800073a:	eba2 0201 	sub.w	r2, r2, r1
	  dfsdm_chydatinr =  dcFree_ADCSample << 16; // Phase 270: 0 + jx[n]
 800073e:	ea4f 4202 	mov.w	r2, r2, lsl #16
 8000742:	601a      	str	r2, [r3, #0]
	  *DFSDM_CH0DATINR = dfsdm_chydatinr; // load and trigger DFSDM by 32bit write
 8000744:	681a      	ldr	r2, [r3, #0]
 8000746:	6022      	str	r2, [r4, #0]
  for(uint16_t i=startIndex; i < startIndex+ADC_BUFLEN/2; i+=4) {
 8000748:	ddd2      	ble.n	80006f0 <feedDFSDMinput+0x10>
  }
}
 800074a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800074c:	20000000 	.word	0x20000000
 8000750:	30002840 	.word	0x30002840
 8000754:	2000015c 	.word	0x2000015c
 8000758:	200001e8 	.word	0x200001e8
 800075c:	00000000 	.word	0x00000000

08000760 <feedDACBuf>:
    }

}

void feedDACBuf(uint16_t startindex)
{
 8000760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000764:	4604      	mov	r4, r0
    float32_t curMeanQ;
    const float32_t a = 1e-2;

    // determining mean I and Q values in output data of filter2:

	arm_q31_to_float(q31_filter2buf+startindex, f32_ibuf+startindex, FILTER2_BUFLEN/2);
 8000766:	f8df 9190 	ldr.w	r9, [pc, #400]	; 80008f8 <feedDACBuf+0x198>
	arm_q31_to_float(q31_filter3buf+startindex, f32_qbuf+startindex, FILTER2_BUFLEN/2);
 800076a:	4d5b      	ldr	r5, [pc, #364]	; (80008d8 <feedDACBuf+0x178>)
{
 800076c:	b087      	sub	sp, #28
	arm_q31_to_float(q31_filter2buf+startindex, f32_ibuf+startindex, FILTER2_BUFLEN/2);
 800076e:	00a7      	lsls	r7, r4, #2
	arm_q31_to_float(q31_filter3buf+startindex, f32_qbuf+startindex, FILTER2_BUFLEN/2);
 8000770:	f509 6810 	add.w	r8, r9, #2304	; 0x900
	arm_q31_to_float(q31_filter2buf+startindex, f32_ibuf+startindex, FILTER2_BUFLEN/2);
 8000774:	eb09 0b84 	add.w	fp, r9, r4, lsl #2
 8000778:	f509 6000 	add.w	r0, r9, #2048	; 0x800
	arm_q31_to_float(q31_filter3buf+startindex, f32_qbuf+startindex, FILTER2_BUFLEN/2);
 800077c:	eb08 0a07 	add.w	sl, r8, r7
	arm_q31_to_float(q31_filter2buf+startindex, f32_ibuf+startindex, FILTER2_BUFLEN/2);
 8000780:	2220      	movs	r2, #32
 8000782:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8000786:	4659      	mov	r1, fp
 8000788:	f007 f9cc 	bl	8007b24 <arm_q31_to_float>
	arm_q31_to_float(q31_filter3buf+startindex, f32_qbuf+startindex, FILTER2_BUFLEN/2);
 800078c:	19e8      	adds	r0, r5, r7
 800078e:	2220      	movs	r2, #32
 8000790:	4651      	mov	r1, sl
 8000792:	f007 f9c7 	bl	8007b24 <arm_q31_to_float>
	arm_mean_f32(f32_ibuf+startindex, FILTER2_BUFLEN/2, &curMeanI);
 8000796:	4658      	mov	r0, fp
 8000798:	aa04      	add	r2, sp, #16
 800079a:	2120      	movs	r1, #32
 800079c:	f007 fa1a 	bl	8007bd4 <arm_mean_f32>
	arm_mean_f32(f32_qbuf+startindex, FILTER2_BUFLEN/2, &curMeanQ);
 80007a0:	aa05      	add	r2, sp, #20
 80007a2:	4650      	mov	r0, sl
 80007a4:	2120      	movs	r1, #32
 80007a6:	f007 fa15 	bl	8007bd4 <arm_mean_f32>

    meanI = (1-a) * meanI + a * curMeanI;
 80007aa:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80008dc <feedDACBuf+0x17c>
 80007ae:	ed9d 6a04 	vldr	s12, [sp, #16]
    meanQ = (1-a) * meanQ + a * curMeanQ;

	curMag = 0.0;

	// fill a complex data array in an interleaved fashion: (real, imag, real, imag, ...)
	for(uint16_t i=startindex; i< startindex+FILTER2_BUFLEN/2; i++) {
 80007b2:	f104 061f 	add.w	r6, r4, #31
    meanI = (1-a) * meanI + a * curMeanI;
 80007b6:	4b4a      	ldr	r3, [pc, #296]	; (80008e0 <feedDACBuf+0x180>)
 80007b8:	35f0      	adds	r5, #240	; 0xf0
    meanQ = (1-a) * meanQ + a * curMeanQ;
 80007ba:	eddd 6a05 	vldr	s13, [sp, #20]
    meanI = (1-a) * meanI + a * curMeanI;
 80007be:	ee26 6a07 	vmul.f32	s12, s12, s14
 80007c2:	eddf 7a48 	vldr	s15, [pc, #288]	; 80008e4 <feedDACBuf+0x184>
 80007c6:	f109 0ef8 	add.w	lr, r9, #248	; 0xf8
    meanQ = (1-a) * meanQ + a * curMeanQ;
 80007ca:	ee66 6a87 	vmul.f32	s13, s13, s14
    meanI = (1-a) * meanI + a * curMeanI;
 80007ce:	ed93 7a00 	vldr	s14, [r3]
	for(uint16_t i=startindex; i< startindex+FILTER2_BUFLEN/2; i++) {
 80007d2:	4622      	mov	r2, r4
    meanI = (1-a) * meanI + a * curMeanI;
 80007d4:	eea7 6a27 	vfma.f32	s12, s14, s15
 80007d8:	ed83 6a00 	vstr	s12, [r3]
    meanQ = (1-a) * meanQ + a * curMeanQ;
 80007dc:	4b42      	ldr	r3, [pc, #264]	; (80008e8 <feedDACBuf+0x188>)
 80007de:	ed93 7a00 	vldr	s14, [r3]
 80007e2:	eee7 6a27 	vfma.f32	s13, s14, s15
 80007e6:	edc3 6a00 	vstr	s13, [r3]
	curMag = 0.0;
 80007ea:	2300      	movs	r3, #0
 80007ec:	9303      	str	r3, [sp, #12]
	for(uint16_t i=startindex; i< startindex+FILTER2_BUFLEN/2; i++) {
 80007ee:	4623      	mov	r3, r4
		cplx_buf[2*i] = f32_ibuf[i] - meanI;
 80007f0:	eb0e 0c82 	add.w	ip, lr, r2, lsl #2
	for(uint16_t i=startindex; i< startindex+FILTER2_BUFLEN/2; i++) {
 80007f4:	3301      	adds	r3, #1
		cplx_buf[2*i+1] = f32_qbuf[i] - meanQ;
 80007f6:	eb08 0182 	add.w	r1, r8, r2, lsl #2
		cplx_buf[2*i] = f32_ibuf[i] - meanI;
 80007fa:	ed1c 7a3e 	vldr	s14, [ip, #-248]	; 0xffffff08
	for(uint16_t i=startindex; i< startindex+FILTER2_BUFLEN/2; i++) {
 80007fe:	b29b      	uxth	r3, r3
		cplx_buf[2*i+1] = f32_qbuf[i] - meanQ;
 8000800:	edd1 7a00 	vldr	s15, [r1]
		cplx_buf[2*i] = f32_ibuf[i] - meanI;
 8000804:	eb05 00c2 	add.w	r0, r5, r2, lsl #3
 8000808:	ee37 7a46 	vsub.f32	s14, s14, s12
	for(uint16_t i=startindex; i< startindex+FILTER2_BUFLEN/2; i++) {
 800080c:	42b3      	cmp	r3, r6
		cplx_buf[2*i+1] = f32_qbuf[i] - meanQ;
 800080e:	ee77 7ae6 	vsub.f32	s15, s15, s13
	for(uint16_t i=startindex; i< startindex+FILTER2_BUFLEN/2; i++) {
 8000812:	461a      	mov	r2, r3
		cplx_buf[2*i] = f32_ibuf[i] - meanI;
 8000814:	ed80 7a04 	vstr	s14, [r0, #16]
		cplx_buf[2*i+1] = f32_qbuf[i] - meanQ;
 8000818:	edc0 7a05 	vstr	s15, [r0, #20]
	for(uint16_t i=startindex; i< startindex+FILTER2_BUFLEN/2; i++) {
 800081c:	dde8      	ble.n	80007f0 <feedDACBuf+0x90>
	}
	arm_cmplx_mag_f32(cplx_buf+2*startindex, mag_buf+startindex, FILTER2_BUFLEN/2);
 800081e:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 80008fc <feedDACBuf+0x19c>
 8000822:	2220      	movs	r2, #32
 8000824:	eb08 0107 	add.w	r1, r8, r7
 8000828:	f5a8 7060 	sub.w	r0, r8, #896	; 0x380

	//arm_offset_f32(mag_buf+startindex, -meanMag, mag_buf+startindex, FILTER2_BUFLEN/2);
	//arm_scale_f32(mag_buf+startindex, dac_gain * 32768.0, mag_buf+startindex, FILTER2_BUFLEN/2);

	arm_fir_f32(&fir_instance, mag_buf + startindex, filteredMag_buf + startindex, FILTER2_BUFLEN/2);
 800082c:	f5a8 78c0 	sub.w	r8, r8, #384	; 0x180
	arm_cmplx_mag_f32(cplx_buf+2*startindex, mag_buf+startindex, FILTER2_BUFLEN/2);
 8000830:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8000834:	9101      	str	r1, [sp, #4]
	arm_fir_f32(&fir_instance, mag_buf + startindex, filteredMag_buf + startindex, FILTER2_BUFLEN/2);
 8000836:	44b8      	add	r8, r7
	arm_cmplx_mag_f32(cplx_buf+2*startindex, mag_buf+startindex, FILTER2_BUFLEN/2);
 8000838:	f007 fca2 	bl	8008180 <arm_cmplx_mag_f32>
	arm_fir_f32(&fir_instance, mag_buf + startindex, filteredMag_buf + startindex, FILTER2_BUFLEN/2);
 800083c:	2320      	movs	r3, #32
 800083e:	9901      	ldr	r1, [sp, #4]
 8000840:	482a      	ldr	r0, [pc, #168]	; (80008ec <feedDACBuf+0x18c>)
 8000842:	4642      	mov	r2, r8
 8000844:	f007 fa18 	bl	8007c78 <arm_fir_f32>

	arm_mean_f32(filteredMag_buf+startindex, FILTER2_BUFLEN/2, &curMag);
 8000848:	4640      	mov	r0, r8
 800084a:	aa03      	add	r2, sp, #12
 800084c:	2120      	movs	r1, #32
 800084e:	f007 f9c1 	bl	8007bd4 <arm_mean_f32>
	meanMag = (1-a) * meanMag + a * curMag;
 8000852:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80008dc <feedDACBuf+0x17c>
 8000856:	eddd 5a03 	vldr	s11, [sp, #12]
 800085a:	4b25      	ldr	r3, [pc, #148]	; (80008f0 <feedDACBuf+0x190>)
 800085c:	ee65 5a87 	vmul.f32	s11, s11, s14
 8000860:	eddf 7a20 	vldr	s15, [pc, #128]	; 80008e4 <feedDACBuf+0x184>
 8000864:	ed93 7a00 	vldr	s14, [r3]
 8000868:	4822      	ldr	r0, [pc, #136]	; (80008f4 <feedDACBuf+0x194>)
 800086a:	eee7 5a27 	vfma.f32	s11, s14, s15

	for(uint16_t i=startindex; i< startindex+FILTER2_BUFLEN/2; i++) {
        dac_buf[i] = (filteredMag_buf[i] - meanMag) * dac_gain * 32768.0 + 32767;
 800086e:	ed9f 3b16 	vldr	d3, [pc, #88]	; 80008c8 <feedDACBuf+0x168>
 8000872:	ed9f 4b17 	vldr	d4, [pc, #92]	; 80008d0 <feedDACBuf+0x170>
	meanMag = (1-a) * meanMag + a * curMag;
 8000876:	edc3 5a00 	vstr	s11, [r3]
        dac_buf[i] = (filteredMag_buf[i] - meanMag) * dac_gain * 32768.0 + 32767;
 800087a:	8803      	ldrh	r3, [r0, #0]
 800087c:	442f      	add	r7, r5
 800087e:	eeb0 6b44 	vmov.f64	d6, d4
	for(uint16_t i=startindex; i< startindex+FILTER2_BUFLEN/2; i++) {
 8000882:	1c61      	adds	r1, r4, #1
        dac_buf[i] = (filteredMag_buf[i] - meanMag) * dac_gain * 32768.0 + 32767;
 8000884:	b21b      	sxth	r3, r3
 8000886:	ed97 7a84 	vldr	s14, [r7, #528]	; 0x210
 800088a:	eb05 0244 	add.w	r2, r5, r4, lsl #1
 800088e:	ee07 3a90 	vmov	s15, r3
 8000892:	ee37 7a65 	vsub.f32	s14, s14, s11
	for(uint16_t i=startindex; i< startindex+FILTER2_BUFLEN/2; i++) {
 8000896:	b28c      	uxth	r4, r1
        dac_buf[i] = (filteredMag_buf[i] - meanMag) * dac_gain * 32768.0 + 32767;
 8000898:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	for(uint16_t i=startindex; i< startindex+FILTER2_BUFLEN/2; i++) {
 800089c:	42b4      	cmp	r4, r6
 800089e:	ea4f 0784 	mov.w	r7, r4, lsl #2
        dac_buf[i] = (filteredMag_buf[i] - meanMag) * dac_gain * 32768.0 + 32767;
 80008a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80008a6:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80008aa:	eea7 6b03 	vfma.f64	d6, d7, d3
 80008ae:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80008b2:	ee16 3a10 	vmov	r3, s12
 80008b6:	f8a2 3310 	strh.w	r3, [r2, #784]	; 0x310
	for(uint16_t i=startindex; i< startindex+FILTER2_BUFLEN/2; i++) {
 80008ba:	ddde      	ble.n	800087a <feedDACBuf+0x11a>
//        dac_buf[i] = (mag_buf[i] - meanMag) * dac_gain * 32768.0 + 32767;
	}

}
 80008bc:	b007      	add	sp, #28
 80008be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80008c2:	bf00      	nop
 80008c4:	f3af 8000 	nop.w
 80008c8:	00000000 	.word	0x00000000
 80008cc:	40e00000 	.word	0x40e00000
 80008d0:	00000000 	.word	0x00000000
 80008d4:	40dfffc0 	.word	0x40dfffc0
 80008d8:	30002100 	.word	0x30002100
 80008dc:	3c23d70a 	.word	0x3c23d70a
 80008e0:	2000090c 	.word	0x2000090c
 80008e4:	3f7d70a4 	.word	0x3f7d70a4
 80008e8:	20000914 	.word	0x20000914
 80008ec:	200001f4 	.word	0x200001f4
 80008f0:	20000910 	.word	0x20000910
 80008f4:	20000152 	.word	0x20000152
 80008f8:	30001000 	.word	0x30001000
 80008fc:	30002580 	.word	0x30002580

08000900 <main>:
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000900:	4ab9      	ldr	r2, [pc, #740]	; (8000be8 <main+0x2e8>)
 8000902:	6953      	ldr	r3, [r2, #20]
 8000904:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
{
 8000908:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 800090c:	b099      	sub	sp, #100	; 0x64
 800090e:	d111      	bne.n	8000934 <main+0x34>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000910:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000914:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000918:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800091c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000920:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000924:	6953      	ldr	r3, [r2, #20]
 8000926:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800092a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800092c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000930:	f3bf 8f6f 	isb	sy
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000934:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000936:	4dad      	ldr	r5, [pc, #692]	; (8000bec <main+0x2ec>)
  HAL_Init();
 8000938:	f001 f864 	bl	8001a04 <HAL_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800093c:	2703      	movs	r7, #3
  SystemClock_Config();
 800093e:	f7ff fe49 	bl	80005d4 <SystemClock_Config>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000942:	2601      	movs	r6, #1
  PeriphCommonClock_Config();
 8000944:	f7ff fea0 	bl	8000688 <PeriphCommonClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000948:	9413      	str	r4, [sp, #76]	; 0x4c
  HAL_GPIO_WritePin(GPIOA, FLAG1_Pin|FLAG2_Pin|TRIG1_Pin, GPIO_PIN_RESET);
 800094a:	21e0      	movs	r1, #224	; 0xe0
 800094c:	4622      	mov	r2, r4
 800094e:	48a8      	ldr	r0, [pc, #672]	; (8000bf0 <main+0x2f0>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000950:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
 8000954:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000958:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800095c:	f043 0304 	orr.w	r3, r3, #4
 8000960:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8000964:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8000968:	f003 0304 	and.w	r3, r3, #4
 800096c:	9306      	str	r3, [sp, #24]
 800096e:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000970:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8000974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000978:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 800097c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8000980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000984:	9307      	str	r3, [sp, #28]
 8000986:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000988:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800098c:	f043 0301 	orr.w	r3, r3, #1
 8000990:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8000994:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8000998:	f003 0301 	and.w	r3, r3, #1
 800099c:	9308      	str	r3, [sp, #32]
 800099e:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009a0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80009a4:	f043 0320 	orr.w	r3, r3, #32
 80009a8:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 80009ac:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80009b0:	f003 0320 	and.w	r3, r3, #32
 80009b4:	9309      	str	r3, [sp, #36]	; 0x24
 80009b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b8:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80009bc:	f043 0302 	orr.w	r3, r3, #2
 80009c0:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 80009c4:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80009c8:	f003 0302 	and.w	r3, r3, #2
 80009cc:	930a      	str	r3, [sp, #40]	; 0x28
 80009ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009d0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80009d4:	f043 0308 	orr.w	r3, r3, #8
 80009d8:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 80009dc:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80009e0:	f003 0308 	and.w	r3, r3, #8
 80009e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80009e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOA, FLAG1_Pin|FLAG2_Pin|TRIG1_Pin, GPIO_PIN_RESET);
 80009e8:	f003 fdce 	bl	8004588 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009ec:	4622      	mov	r2, r4
 80009ee:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80009f2:	4880      	ldr	r0, [pc, #512]	; (8000bf4 <main+0x2f4>)
 80009f4:	f003 fdc8 	bl	8004588 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009fc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a00:	a90f      	add	r1, sp, #60	; 0x3c
 8000a02:	487d      	ldr	r0, [pc, #500]	; (8000bf8 <main+0x2f8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a06:	e9cd 230f 	strd	r2, r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a0a:	f003 fc8b 	bl	8004324 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0e:	a90f      	add	r1, sp, #60	; 0x3c
 8000a10:	4877      	ldr	r0, [pc, #476]	; (8000bf0 <main+0x2f0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a14:	e9cd 770f 	strd	r7, r7, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a18:	f003 fc84 	bl	8004324 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FLAG1_Pin|FLAG2_Pin|TRIG1_Pin;
 8000a1c:	23e0      	movs	r3, #224	; 0xe0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1e:	a90f      	add	r1, sp, #60	; 0x3c
 8000a20:	4873      	ldr	r0, [pc, #460]	; (8000bf0 <main+0x2f0>)
  GPIO_InitStruct.Pin = FLAG1_Pin|FLAG2_Pin|TRIG1_Pin;
 8000a22:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a24:	9610      	str	r6, [sp, #64]	; 0x40
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a26:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2a:	f003 fc7b 	bl	8004324 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000a2e:	f44f 4381 	mov.w	r3, #16512	; 0x4080
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a32:	a90f      	add	r1, sp, #60	; 0x3c
 8000a34:	486f      	ldr	r0, [pc, #444]	; (8000bf4 <main+0x2f4>)
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000a36:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a38:	9412      	str	r4, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	e9cd 6410 	strd	r6, r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a3e:	f003 fc71 	bl	8004324 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a42:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000a46:	4622      	mov	r2, r4
 8000a48:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a4a:	4333      	orrs	r3, r6
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000a4c:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a4e:	f8c5 30d8 	str.w	r3, [r5, #216]	; 0xd8
 8000a52:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
  huart3.Instance = USART3;
 8000a56:	4d69      	ldr	r5, [pc, #420]	; (8000bfc <main+0x2fc>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a58:	4033      	ands	r3, r6
 8000a5a:	9305      	str	r3, [sp, #20]
 8000a5c:	9b05      	ldr	r3, [sp, #20]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000a5e:	f001 fdc7 	bl	80025f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000a62:	200b      	movs	r0, #11
 8000a64:	f001 fe02 	bl	800266c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000a68:	4622      	mov	r2, r4
 8000a6a:	4621      	mov	r1, r4
 8000a6c:	200c      	movs	r0, #12
 8000a6e:	f001 fdbf 	bl	80025f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000a72:	200c      	movs	r0, #12
 8000a74:	f001 fdfa 	bl	800266c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000a78:	4622      	mov	r2, r4
 8000a7a:	4621      	mov	r1, r4
 8000a7c:	200d      	movs	r0, #13
 8000a7e:	f001 fdb7 	bl	80025f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000a82:	200d      	movs	r0, #13
 8000a84:	f001 fdf2 	bl	800266c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000a88:	4622      	mov	r2, r4
 8000a8a:	4621      	mov	r1, r4
 8000a8c:	200e      	movs	r0, #14
 8000a8e:	f001 fdaf 	bl	80025f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000a92:	200e      	movs	r0, #14
 8000a94:	f001 fdea 	bl	800266c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000a98:	4622      	mov	r2, r4
 8000a9a:	4621      	mov	r1, r4
 8000a9c:	200f      	movs	r0, #15
 8000a9e:	f001 fda7 	bl	80025f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000aa2:	200f      	movs	r0, #15
 8000aa4:	f001 fde2 	bl	800266c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000aa8:	4622      	mov	r2, r4
 8000aaa:	4621      	mov	r1, r4
 8000aac:	2010      	movs	r0, #16
 8000aae:	f001 fd9f 	bl	80025f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000ab2:	2010      	movs	r0, #16
 8000ab4:	f001 fdda 	bl	800266c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000ab8:	4622      	mov	r2, r4
 8000aba:	4621      	mov	r1, r4
 8000abc:	2011      	movs	r0, #17
 8000abe:	f001 fd97 	bl	80025f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000ac2:	2011      	movs	r0, #17
 8000ac4:	f001 fdd2 	bl	800266c <HAL_NVIC_EnableIRQ>
  huart3.Init.BaudRate = 115200;
 8000ac8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000acc:	f8df c14c 	ldr.w	ip, [pc, #332]	; 8000c1c <main+0x31c>
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ad0:	4628      	mov	r0, r5
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ad2:	612c      	str	r4, [r5, #16]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ad4:	62ac      	str	r4, [r5, #40]	; 0x28
  huart3.Init.BaudRate = 115200;
 8000ad6:	e9c5 c300 	strd	ip, r3, [r5]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ada:	230c      	movs	r3, #12
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000adc:	e9c5 4402 	strd	r4, r4, [r5, #8]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae0:	e9c5 4406 	strd	r4, r4, [r5, #24]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ae4:	e9c5 4408 	strd	r4, r4, [r5, #32]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ae8:	616b      	str	r3, [r5, #20]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000aea:	f006 ff3f 	bl	800796c <HAL_UART_Init>
 8000aee:	b100      	cbz	r0, 8000af2 <main+0x1f2>
 8000af0:	e7fe      	b.n	8000af0 <main+0x1f0>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8000af2:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8000af6:	4628      	mov	r0, r5
 8000af8:	f006 ff90 	bl	8007a1c <HAL_UARTEx_SetTxFifoThreshold>
 8000afc:	b100      	cbz	r0, 8000b00 <main+0x200>
 8000afe:	e7fe      	b.n	8000afe <main+0x1fe>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b00:	4601      	mov	r1, r0
 8000b02:	4628      	mov	r0, r5
 8000b04:	f006 ffcc 	bl	8007aa0 <HAL_UARTEx_SetRxFifoThreshold>
 8000b08:	b100      	cbz	r0, 8000b0c <main+0x20c>
 8000b0a:	e7fe      	b.n	8000b0a <main+0x20a>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b0c:	4628      	mov	r0, r5
 8000b0e:	f006 ff67 	bl	80079e0 <HAL_UARTEx_DisableFifoMode>
 8000b12:	4601      	mov	r1, r0
 8000b14:	b960      	cbnz	r0, 8000b30 <main+0x230>
  DAC_ChannelConfTypeDef sConfig = {0};
 8000b16:	2224      	movs	r2, #36	; 0x24
  hdac1.Instance = DAC1;
 8000b18:	4c39      	ldr	r4, [pc, #228]	; (8000c00 <main+0x300>)
  DAC_ChannelConfTypeDef sConfig = {0};
 8000b1a:	a80f      	add	r0, sp, #60	; 0x3c
 8000b1c:	f007 fc54 	bl	80083c8 <memset>
  hdac1.Instance = DAC1;
 8000b20:	4b38      	ldr	r3, [pc, #224]	; (8000c04 <main+0x304>)
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b22:	4620      	mov	r0, r4
  hdac1.Instance = DAC1;
 8000b24:	6023      	str	r3, [r4, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b26:	f001 fdc5 	bl	80026b4 <HAL_DAC_Init>
 8000b2a:	4602      	mov	r2, r0
 8000b2c:	b108      	cbz	r0, 8000b32 <main+0x232>
 8000b2e:	e7fe      	b.n	8000b2e <main+0x22e>
 8000b30:	e7fe      	b.n	8000b30 <main+0x230>
  sConfig.DAC_Trigger = DAC_TRIGGER_LPTIM1_OUT;
 8000b32:	232e      	movs	r3, #46	; 0x2e
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000b34:	4620      	mov	r0, r4
 8000b36:	a90f      	add	r1, sp, #60	; 0x3c
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000b38:	920f      	str	r2, [sp, #60]	; 0x3c
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000b3a:	9213      	str	r2, [sp, #76]	; 0x4c
  sConfig.DAC_Trigger = DAC_TRIGGER_LPTIM1_OUT;
 8000b3c:	9310      	str	r3, [sp, #64]	; 0x40
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000b3e:	e9cd 2611 	strd	r2, r6, [sp, #68]	; 0x44
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000b42:	f001 fe75 	bl	8002830 <HAL_DAC_ConfigChannel>
 8000b46:	bb10      	cbnz	r0, 8000b8e <main+0x28e>
  hadc1.Instance = ADC1;
 8000b48:	4c2f      	ldr	r4, [pc, #188]	; (8000c08 <main+0x308>)
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b4a:	2504      	movs	r5, #4
  hadc1.Instance = ADC1;
 8000b4c:	4b2f      	ldr	r3, [pc, #188]	; (8000c0c <main+0x30c>)
  ADC_MultiModeTypeDef multimode = {0};
 8000b4e:	900c      	str	r0, [sp, #48]	; 0x30
  hadc1.Instance = ADC1;
 8000b50:	6023      	str	r3, [r4, #0]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000b52:	f44f 7380 	mov.w	r3, #256	; 0x100
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b56:	9015      	str	r0, [sp, #84]	; 0x54
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b58:	60e0      	str	r0, [r4, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b5a:	7720      	strb	r0, [r4, #28]
  hadc1.Init.OversamplingMode = DISABLE;
 8000b5c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000b60:	82a3      	strh	r3, [r4, #20]
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000b62:	62e7      	str	r7, [r4, #44]	; 0x2c
  hadc1.Init.NbrOfConversion = 1;
 8000b64:	61a6      	str	r6, [r4, #24]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b66:	6125      	str	r5, [r4, #16]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b68:	e9cd 000f 	strd	r0, r0, [sp, #60]	; 0x3c
 8000b6c:	e9cd 0011 	strd	r0, r0, [sp, #68]	; 0x44
 8000b70:	e9cd 0013 	strd	r0, r0, [sp, #76]	; 0x4c
  ADC_MultiModeTypeDef multimode = {0};
 8000b74:	e9cd 000d 	strd	r0, r0, [sp, #52]	; 0x34
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000b78:	e9c4 0001 	strd	r0, r0, [r4, #4]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b7c:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b80:	e9c4 000c 	strd	r0, r0, [r4, #48]	; 0x30
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b84:	4620      	mov	r0, r4
 8000b86:	f001 fbab 	bl	80022e0 <HAL_ADC_Init>
 8000b8a:	b108      	cbz	r0, 8000b90 <main+0x290>
 8000b8c:	e7fe      	b.n	8000b8c <main+0x28c>
 8000b8e:	e7fe      	b.n	8000b8e <main+0x28e>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000b90:	900c      	str	r0, [sp, #48]	; 0x30
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000b92:	a90c      	add	r1, sp, #48	; 0x30
 8000b94:	4620      	mov	r0, r4
 8000b96:	f001 fcb1 	bl	80024fc <HAL_ADCEx_MultiModeConfigChannel>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	b100      	cbz	r0, 8000ba0 <main+0x2a0>
 8000b9e:	e7fe      	b.n	8000b9e <main+0x29e>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ba0:	4620      	mov	r0, r4
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ba2:	9311      	str	r3, [sp, #68]	; 0x44
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ba4:	4c1a      	ldr	r4, [pc, #104]	; (8000c10 <main+0x310>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ba6:	a90f      	add	r1, sp, #60	; 0x3c
  sConfig.Offset = 0;
 8000ba8:	9314      	str	r3, [sp, #80]	; 0x50
  sConfig.OffsetSignedSaturation = DISABLE;
 8000baa:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bae:	2306      	movs	r3, #6
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bb0:	9513      	str	r5, [sp, #76]	; 0x4c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bb2:	e9cd 430f 	strd	r4, r3, [sp, #60]	; 0x3c
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000bb6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000bba:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bbc:	f000 ffc6 	bl	8001b4c <HAL_ADC_ConfigChannel>
 8000bc0:	b988      	cbnz	r0, 8000be6 <main+0x2e6>
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000bc2:	4b14      	ldr	r3, [pc, #80]	; (8000c14 <main+0x314>)
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8000bc4:	f240 1201 	movw	r2, #257	; 0x101
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 15;
 8000bc8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8000bcc:	811a      	strh	r2, [r3, #8]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 15;
 8000bce:	220f      	movs	r2, #15
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000bd0:	6058      	str	r0, [r3, #4]
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8000bd2:	4618      	mov	r0, r3
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8000bd4:	625e      	str	r6, [r3, #36]	; 0x24
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 15;
 8000bd6:	e9c3 1207 	strd	r1, r2, [r3, #28]
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000bda:	4a0f      	ldr	r2, [pc, #60]	; (8000c18 <main+0x318>)
 8000bdc:	601a      	str	r2, [r3, #0]
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8000bde:	f001 ffc3 	bl	8002b68 <HAL_DFSDM_FilterInit>
 8000be2:	b1e8      	cbz	r0, 8000c20 <main+0x320>
 8000be4:	e7fe      	b.n	8000be4 <main+0x2e4>
 8000be6:	e7fe      	b.n	8000be6 <main+0x2e6>
 8000be8:	e000ed00 	.word	0xe000ed00
 8000bec:	58024400 	.word	0x58024400
 8000bf0:	58020000 	.word	0x58020000
 8000bf4:	58020400 	.word	0x58020400
 8000bf8:	58020800 	.word	0x58020800
 8000bfc:	20000874 	.word	0x20000874
 8000c00:	20000264 	.word	0x20000264
 8000c04:	40007400 	.word	0x40007400
 8000c08:	20000200 	.word	0x20000200
 8000c0c:	40022000 	.word	0x40022000
 8000c10:	08600004 	.word	0x08600004
 8000c14:	20000358 	.word	0x20000358
 8000c18:	40017100 	.word	0x40017100
 8000c1c:	40004800 	.word	0x40004800
  hdfsdm1_filter1.Instance = DFSDM1_Filter1;
 8000c20:	4e90      	ldr	r6, [pc, #576]	; (8000e64 <main+0x564>)
  hdfsdm1_filter1.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000c22:	2300      	movs	r3, #0
 8000c24:	4a90      	ldr	r2, [pc, #576]	; (8000e68 <main+0x568>)
  hdfsdm1_filter1.Init.RegularParam.FastMode = ENABLE;
 8000c26:	f240 1701 	movw	r7, #257	; 0x101
  hdfsdm1_filter1.Init.FilterParam.IntOversampling = 1;
 8000c2a:	2401      	movs	r4, #1
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter1) != HAL_OK)
 8000c2c:	4630      	mov	r0, r6
  hdfsdm1_filter1.Init.RegularParam.FastMode = ENABLE;
 8000c2e:	8137      	strh	r7, [r6, #8]
  hdfsdm1_filter1.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000c30:	e9c6 2300 	strd	r2, r3, [r6]
  hdfsdm1_filter1.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC4_ORDER;
 8000c34:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000c38:	61f3      	str	r3, [r6, #28]
  hdfsdm1_filter1.Init.FilterParam.IntOversampling = 1;
 8000c3a:	230f      	movs	r3, #15
 8000c3c:	e9c6 3408 	strd	r3, r4, [r6, #32]
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter1) != HAL_OK)
 8000c40:	f001 ff92 	bl	8002b68 <HAL_DFSDM_FilterInit>
 8000c44:	b100      	cbz	r0, 8000c48 <main+0x348>
 8000c46:	e7fe      	b.n	8000c46 <main+0x346>
  hdfsdm1_filter2.Instance = DFSDM1_Filter2;
 8000c48:	4d88      	ldr	r5, [pc, #544]	; (8000e6c <main+0x56c>)
  hdfsdm1_filter2.Init.FilterParam.Oversampling = 8;
 8000c4a:	f04f 4820 	mov.w	r8, #2684354560	; 0xa0000000
  hdfsdm1_filter2.Instance = DFSDM1_Filter2;
 8000c4e:	4b88      	ldr	r3, [pc, #544]	; (8000e70 <main+0x570>)
  hdfsdm1_filter2.Init.FilterParam.Oversampling = 8;
 8000c50:	f04f 0a08 	mov.w	sl, #8
  hdfsdm1_filter2.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000c54:	6068      	str	r0, [r5, #4]
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter2) != HAL_OK)
 8000c56:	4628      	mov	r0, r5
  hdfsdm1_filter2.Init.RegularParam.FastMode = ENABLE;
 8000c58:	812f      	strh	r7, [r5, #8]
  hdfsdm1_filter2.Instance = DFSDM1_Filter2;
 8000c5a:	602b      	str	r3, [r5, #0]
  hdfsdm1_filter2.Init.FilterParam.IntOversampling = 1;
 8000c5c:	626c      	str	r4, [r5, #36]	; 0x24
  hdfsdm1_filter2.Init.FilterParam.Oversampling = 8;
 8000c5e:	e9c5 8a07 	strd	r8, sl, [r5, #28]
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter2) != HAL_OK)
 8000c62:	f001 ff81 	bl	8002b68 <HAL_DFSDM_FilterInit>
 8000c66:	4603      	mov	r3, r0
 8000c68:	b100      	cbz	r0, 8000c6c <main+0x36c>
 8000c6a:	e7fe      	b.n	8000c6a <main+0x36a>
  hdfsdm1_filter3.Instance = DFSDM1_Filter3;
 8000c6c:	4881      	ldr	r0, [pc, #516]	; (8000e74 <main+0x574>)
  hdfsdm1_filter3.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000c6e:	6043      	str	r3, [r0, #4]
  hdfsdm1_filter3.Instance = DFSDM1_Filter3;
 8000c70:	4b81      	ldr	r3, [pc, #516]	; (8000e78 <main+0x578>)
  hdfsdm1_filter3.Init.RegularParam.FastMode = ENABLE;
 8000c72:	8107      	strh	r7, [r0, #8]
  hdfsdm1_filter3.Instance = DFSDM1_Filter3;
 8000c74:	6003      	str	r3, [r0, #0]
  hdfsdm1_filter3.Init.FilterParam.IntOversampling = 1;
 8000c76:	6244      	str	r4, [r0, #36]	; 0x24
  hdfsdm1_filter3.Init.FilterParam.Oversampling = 8;
 8000c78:	e9c0 8a07 	strd	r8, sl, [r0, #28]
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter3) != HAL_OK)
 8000c7c:	f001 ff74 	bl	8002b68 <HAL_DFSDM_FilterInit>
 8000c80:	4603      	mov	r3, r0
 8000c82:	b100      	cbz	r0, 8000c86 <main+0x386>
 8000c84:	e7fe      	b.n	8000c84 <main+0x384>
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 8000c86:	487d      	ldr	r0, [pc, #500]	; (8000e7c <main+0x57c>)
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_INTERNAL_REGISTER;
 8000c88:	f04f 0802 	mov.w	r8, #2
 8000c8c:	f44f 5700 	mov.w	r7, #8192	; 0x2000
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_DUAL_MODE;
 8000c90:	f44f 4900 	mov.w	r9, #32768	; 0x8000
  hdfsdm1_channel0.Init.OutputClock.Activation = DISABLE;
 8000c94:	7103      	strb	r3, [r0, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000c96:	6083      	str	r3, [r0, #8]
  hdfsdm1_channel0.Init.RightBitShift = 8;
 8000c98:	f8c0 a030 	str.w	sl, [r0, #48]	; 0x30
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_DUAL_MODE;
 8000c9c:	f8c0 9014 	str.w	r9, [r0, #20]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000ca0:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000ca4:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 8000ca8:	e9c0 430a 	strd	r4, r3, [r0, #40]	; 0x28
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 8000cac:	4b74      	ldr	r3, [pc, #464]	; (8000e80 <main+0x580>)
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_INTERNAL_REGISTER;
 8000cae:	e9c0 8703 	strd	r8, r7, [r0, #12]
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 8000cb2:	6003      	str	r3, [r0, #0]
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 8000cb4:	f001 fe88 	bl	80029c8 <HAL_DFSDM_ChannelInit>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	b100      	cbz	r0, 8000cbe <main+0x3be>
 8000cbc:	e7fe      	b.n	8000cbc <main+0x3bc>
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000cbe:	4871      	ldr	r0, [pc, #452]	; (8000e84 <main+0x584>)
  hdfsdm1_channel1.Init.OutputClock.Activation = DISABLE;
 8000cc0:	7103      	strb	r3, [r0, #4]
  hdfsdm1_channel1.Init.RightBitShift = 8;
 8000cc2:	f8c0 a030 	str.w	sl, [r0, #48]	; 0x30
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000cc6:	e9c0 3802 	strd	r3, r8, [r0, #8]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000cca:	e9c0 7304 	strd	r7, r3, [r0, #16]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000cce:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000cd2:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000cd6:	e9c0 430a 	strd	r4, r3, [r0, #40]	; 0x28
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000cda:	4b6b      	ldr	r3, [pc, #428]	; (8000e88 <main+0x588>)
 8000cdc:	6003      	str	r3, [r0, #0]
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000cde:	f001 fe73 	bl	80029c8 <HAL_DFSDM_ChannelInit>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	b100      	cbz	r0, 8000ce8 <main+0x3e8>
 8000ce6:	e7fe      	b.n	8000ce6 <main+0x3e6>
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8000ce8:	4868      	ldr	r0, [pc, #416]	; (8000e8c <main+0x58c>)
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_DUAL_MODE;
 8000cea:	f8c0 9014 	str.w	r9, [r0, #20]
  hdfsdm1_channel2.Init.RightBitShift = 7;
 8000cee:	f04f 0907 	mov.w	r9, #7
  hdfsdm1_channel2.Init.OutputClock.Activation = DISABLE;
 8000cf2:	7103      	strb	r3, [r0, #4]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_INTERNAL_REGISTER;
 8000cf4:	6107      	str	r7, [r0, #16]
  hdfsdm1_channel2.Init.RightBitShift = 7;
 8000cf6:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 8000cfa:	e9c0 3802 	strd	r3, r8, [r0, #8]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000cfe:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000d02:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8000d06:	e9c0 430a 	strd	r4, r3, [r0, #40]	; 0x28
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8000d0a:	4b61      	ldr	r3, [pc, #388]	; (8000e90 <main+0x590>)
 8000d0c:	6003      	str	r3, [r0, #0]
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8000d0e:	f001 fe5b 	bl	80029c8 <HAL_DFSDM_ChannelInit>
 8000d12:	4603      	mov	r3, r0
 8000d14:	b100      	cbz	r0, 8000d18 <main+0x418>
 8000d16:	e7fe      	b.n	8000d16 <main+0x416>
  hdfsdm1_channel3.Instance = DFSDM1_Channel3;
 8000d18:	485e      	ldr	r0, [pc, #376]	; (8000e94 <main+0x594>)
  hdfsdm1_channel3.Init.OutputClock.Activation = DISABLE;
 8000d1a:	7103      	strb	r3, [r0, #4]
  hdfsdm1_channel3.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000d1c:	6083      	str	r3, [r0, #8]
  hdfsdm1_channel3.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000d1e:	6243      	str	r3, [r0, #36]	; 0x24
  hdfsdm1_channel3.Init.RightBitShift = 7;
 8000d20:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
  hdfsdm1_channel3.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000d24:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hdfsdm1_channel3.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8000d28:	e9c0 3307 	strd	r3, r3, [r0, #28]
  hdfsdm1_channel3.Init.Awd.Oversampling = 1;
 8000d2c:	e9c0 430a 	strd	r4, r3, [r0, #40]	; 0x28
  hdfsdm1_channel3.Instance = DFSDM1_Channel3;
 8000d30:	4b59      	ldr	r3, [pc, #356]	; (8000e98 <main+0x598>)
  hdfsdm1_channel3.Init.Input.Multiplexer = DFSDM_CHANNEL_INTERNAL_REGISTER;
 8000d32:	e9c0 8703 	strd	r8, r7, [r0, #12]
  hdfsdm1_channel3.Instance = DFSDM1_Channel3;
 8000d36:	6003      	str	r3, [r0, #0]
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel3) != HAL_OK)
 8000d38:	f001 fe46 	bl	80029c8 <HAL_DFSDM_ChannelInit>
 8000d3c:	b100      	cbz	r0, 8000d40 <main+0x440>
 8000d3e:	e7fe      	b.n	8000d3e <main+0x43e>
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_0, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8000d40:	4622      	mov	r2, r4
 8000d42:	4621      	mov	r1, r4
 8000d44:	4855      	ldr	r0, [pc, #340]	; (8000e9c <main+0x59c>)
 8000d46:	f001 ff85 	bl	8002c54 <HAL_DFSDM_FilterConfigRegChannel>
 8000d4a:	b100      	cbz	r0, 8000d4e <main+0x44e>
 8000d4c:	e7fe      	b.n	8000d4c <main+0x44c>
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_1, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8000d4e:	4630      	mov	r0, r6
 8000d50:	4622      	mov	r2, r4
 8000d52:	4953      	ldr	r1, [pc, #332]	; (8000ea0 <main+0x5a0>)
 8000d54:	f001 ff7e 	bl	8002c54 <HAL_DFSDM_FilterConfigRegChannel>
 8000d58:	b100      	cbz	r0, 8000d5c <main+0x45c>
 8000d5a:	e7fe      	b.n	8000d5a <main+0x45a>
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter2, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8000d5c:	4622      	mov	r2, r4
 8000d5e:	4951      	ldr	r1, [pc, #324]	; (8000ea4 <main+0x5a4>)
 8000d60:	4628      	mov	r0, r5
 8000d62:	f001 ff77 	bl	8002c54 <HAL_DFSDM_FilterConfigRegChannel>
 8000d66:	b100      	cbz	r0, 8000d6a <main+0x46a>
 8000d68:	e7fe      	b.n	8000d68 <main+0x468>
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter3, DFSDM_CHANNEL_3, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	494e      	ldr	r1, [pc, #312]	; (8000ea8 <main+0x5a8>)
 8000d6e:	4841      	ldr	r0, [pc, #260]	; (8000e74 <main+0x574>)
 8000d70:	f001 ff70 	bl	8002c54 <HAL_DFSDM_FilterConfigRegChannel>
 8000d74:	4603      	mov	r3, r0
 8000d76:	b988      	cbnz	r0, 8000d9c <main+0x49c>
  hlptim1.Instance = LPTIM1;
 8000d78:	484c      	ldr	r0, [pc, #304]	; (8000eac <main+0x5ac>)
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000d7a:	f64f 75ff 	movw	r5, #65535	; 0xffff
  hlptim1.Instance = LPTIM1;
 8000d7e:	4a4c      	ldr	r2, [pc, #304]	; (8000eb0 <main+0x5b0>)
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8000d80:	6083      	str	r3, [r0, #8]
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8000d82:	6303      	str	r3, [r0, #48]	; 0x30
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000d84:	6145      	str	r5, [r0, #20]
  hlptim1.Instance = LPTIM1;
 8000d86:	e9c0 2300 	strd	r2, r3, [r0]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000d8a:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8000d8e:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8000d92:	f003 fc07 	bl	80045a4 <HAL_LPTIM_Init>
 8000d96:	4603      	mov	r3, r0
 8000d98:	b108      	cbz	r0, 8000d9e <main+0x49e>
 8000d9a:	e7fe      	b.n	8000d9a <main+0x49a>
 8000d9c:	e7fe      	b.n	8000d9c <main+0x49c>
  htim1.Instance = TIM1;
 8000d9e:	4c45      	ldr	r4, [pc, #276]	; (8000eb4 <main+0x5b4>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000da0:	930e      	str	r3, [sp, #56]	; 0x38
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000da2:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000da4:	4620      	mov	r0, r4
  htim1.Init.Period = 65535;
 8000da6:	60e5      	str	r5, [r4, #12]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000da8:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
 8000dac:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000db0:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db4:	e9c4 3301 	strd	r3, r3, [r4, #4]
  htim1.Init.RepetitionCounter = 0;
 8000db8:	e9c4 3304 	strd	r3, r3, [r4, #16]
  htim1.Instance = TIM1;
 8000dbc:	4b3e      	ldr	r3, [pc, #248]	; (8000eb8 <main+0x5b8>)
 8000dbe:	6023      	str	r3, [r4, #0]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000dc0:	f005 fdb2 	bl	8006928 <HAL_TIM_Base_Init>
 8000dc4:	b100      	cbz	r0, 8000dc8 <main+0x4c8>
 8000dc6:	e7fe      	b.n	8000dc6 <main+0x4c6>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000dcc:	a90f      	add	r1, sp, #60	; 0x3c
 8000dce:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dd0:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000dd2:	f005 feb7 	bl	8006b44 <HAL_TIM_ConfigClockSource>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	b100      	cbz	r0, 8000ddc <main+0x4dc>
 8000dda:	e7fe      	b.n	8000dda <main+0x4da>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ddc:	a90c      	add	r1, sp, #48	; 0x30
 8000dde:	4620      	mov	r0, r4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000de0:	930e      	str	r3, [sp, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000de2:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000de6:	f005 ff79 	bl	8006cdc <HAL_TIMEx_MasterConfigSynchronization>
 8000dea:	b100      	cbz	r0, 8000dee <main+0x4ee>
 8000dec:	e7fe      	b.n	8000dec <main+0x4ec>
  arm_fir_init_f32(&fir_instance, NUM_TAPS, cic_compensation_fir_coeff, firStateF32, FILTER2_BUFLEN/2);
 8000dee:	2020      	movs	r0, #32
  if (HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, q31_filter0buf, FILTER0_BUFLEN) != HAL_OK) {
 8000df0:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 8000ee8 <main+0x5e8>
  arm_fir_init_f32(&fir_instance, NUM_TAPS, cic_compensation_fir_coeff, firStateF32, FILTER2_BUFLEN/2);
 8000df4:	4a31      	ldr	r2, [pc, #196]	; (8000ebc <main+0x5bc>)
 8000df6:	2151      	movs	r1, #81	; 0x51
 8000df8:	9000      	str	r0, [sp, #0]
 8000dfa:	4b31      	ldr	r3, [pc, #196]	; (8000ec0 <main+0x5c0>)
 8000dfc:	4831      	ldr	r0, [pc, #196]	; (8000ec4 <main+0x5c4>)
 8000dfe:	f006 ff29 	bl	8007c54 <arm_fir_init_f32>
  if (HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, q31_filter0buf, FILTER0_BUFLEN) != HAL_OK) {
 8000e02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e06:	4649      	mov	r1, r9
 8000e08:	4824      	ldr	r0, [pc, #144]	; (8000e9c <main+0x59c>)
 8000e0a:	f001 ff51 	bl	8002cb0 <HAL_DFSDM_FilterRegularStart_DMA>
 8000e0e:	b100      	cbz	r0, 8000e12 <main+0x512>
 8000e10:	e7fe      	b.n	8000e10 <main+0x510>
  if (HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter1, q31_filter1buf, FILTER0_BUFLEN) != HAL_OK) {
 8000e12:	f509 6a00 	add.w	sl, r9, #2048	; 0x800
  filter0BufDMAState = DMA_INPROGRESS;
 8000e16:	4c2c      	ldr	r4, [pc, #176]	; (8000ec8 <main+0x5c8>)
  if (HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter1, q31_filter1buf, FILTER0_BUFLEN) != HAL_OK) {
 8000e18:	f44f 7200 	mov.w	r2, #512	; 0x200
  filter0BufDMAState = DMA_INPROGRESS;
 8000e1c:	7020      	strb	r0, [r4, #0]
  if (HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter1, q31_filter1buf, FILTER0_BUFLEN) != HAL_OK) {
 8000e1e:	4651      	mov	r1, sl
 8000e20:	4810      	ldr	r0, [pc, #64]	; (8000e64 <main+0x564>)
 8000e22:	f001 ff45 	bl	8002cb0 <HAL_DFSDM_FilterRegularStart_DMA>
 8000e26:	b100      	cbz	r0, 8000e2a <main+0x52a>
 8000e28:	e7fe      	b.n	8000e28 <main+0x528>
  filter1BufDMAState = DMA_INPROGRESS;
 8000e2a:	4b28      	ldr	r3, [pc, #160]	; (8000ecc <main+0x5cc>)
  if (HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter2, q31_filter2buf, FILTER2_BUFLEN) != HAL_OK) {
 8000e2c:	2240      	movs	r2, #64	; 0x40
 8000e2e:	4928      	ldr	r1, [pc, #160]	; (8000ed0 <main+0x5d0>)
  filter1BufDMAState = DMA_INPROGRESS;
 8000e30:	7018      	strb	r0, [r3, #0]
  if (HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter2, q31_filter2buf, FILTER2_BUFLEN) != HAL_OK) {
 8000e32:	480e      	ldr	r0, [pc, #56]	; (8000e6c <main+0x56c>)
 8000e34:	f001 ff3c 	bl	8002cb0 <HAL_DFSDM_FilterRegularStart_DMA>
 8000e38:	b100      	cbz	r0, 8000e3c <main+0x53c>
 8000e3a:	e7fe      	b.n	8000e3a <main+0x53a>
  filter2BufDMAState = DMA_INPROGRESS;
 8000e3c:	4d25      	ldr	r5, [pc, #148]	; (8000ed4 <main+0x5d4>)
  if (HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter3, q31_filter3buf, FILTER2_BUFLEN) != HAL_OK) {
 8000e3e:	2240      	movs	r2, #64	; 0x40
 8000e40:	4925      	ldr	r1, [pc, #148]	; (8000ed8 <main+0x5d8>)
  filter2BufDMAState = DMA_INPROGRESS;
 8000e42:	7028      	strb	r0, [r5, #0]
  if (HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter3, q31_filter3buf, FILTER2_BUFLEN) != HAL_OK) {
 8000e44:	480b      	ldr	r0, [pc, #44]	; (8000e74 <main+0x574>)
 8000e46:	f001 ff33 	bl	8002cb0 <HAL_DFSDM_FilterRegularStart_DMA>
 8000e4a:	b100      	cbz	r0, 8000e4e <main+0x54e>
 8000e4c:	e7fe      	b.n	8000e4c <main+0x54c>
  filter3BufDMAState = DMA_INPROGRESS;
 8000e4e:	4b23      	ldr	r3, [pc, #140]	; (8000edc <main+0x5dc>)
  if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUFLEN) != HAL_OK) {
 8000e50:	f44f 52f0 	mov.w	r2, #7680	; 0x1e00
 8000e54:	4922      	ldr	r1, [pc, #136]	; (8000ee0 <main+0x5e0>)
  filter3BufDMAState = DMA_INPROGRESS;
 8000e56:	7018      	strb	r0, [r3, #0]
  if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUFLEN) != HAL_OK) {
 8000e58:	4822      	ldr	r0, [pc, #136]	; (8000ee4 <main+0x5e4>)
 8000e5a:	f001 f8f5 	bl	8002048 <HAL_ADC_Start_DMA>
 8000e5e:	2800      	cmp	r0, #0
 8000e60:	d044      	beq.n	8000eec <main+0x5ec>
 8000e62:	e7fe      	b.n	8000e62 <main+0x562>
 8000e64:	200003ac 	.word	0x200003ac
 8000e68:	40017180 	.word	0x40017180
 8000e6c:	20000400 	.word	0x20000400
 8000e70:	40017200 	.word	0x40017200
 8000e74:	20000454 	.word	0x20000454
 8000e78:	40017280 	.word	0x40017280
 8000e7c:	20000278 	.word	0x20000278
 8000e80:	40017000 	.word	0x40017000
 8000e84:	200002b0 	.word	0x200002b0
 8000e88:	40017020 	.word	0x40017020
 8000e8c:	200002e8 	.word	0x200002e8
 8000e90:	40017040 	.word	0x40017040
 8000e94:	20000320 	.word	0x20000320
 8000e98:	40017060 	.word	0x40017060
 8000e9c:	20000358 	.word	0x20000358
 8000ea0:	00010002 	.word	0x00010002
 8000ea4:	00020004 	.word	0x00020004
 8000ea8:	00030008 	.word	0x00030008
 8000eac:	200007f0 	.word	0x200007f0
 8000eb0:	40002400 	.word	0x40002400
 8000eb4:	20000828 	.word	0x20000828
 8000eb8:	40010000 	.word	0x40010000
 8000ebc:	2000000c 	.word	0x2000000c
 8000ec0:	30002680 	.word	0x30002680
 8000ec4:	200001f4 	.word	0x200001f4
 8000ec8:	20000158 	.word	0x20000158
 8000ecc:	20000159 	.word	0x20000159
 8000ed0:	30001800 	.word	0x30001800
 8000ed4:	2000015a 	.word	0x2000015a
 8000ed8:	30002100 	.word	0x30002100
 8000edc:	2000015b 	.word	0x2000015b
 8000ee0:	30002840 	.word	0x30002840
 8000ee4:	20000200 	.word	0x20000200
 8000ee8:	30000000 	.word	0x30000000
  adcBufDMAState = DMA_INPROGRESS;
 8000eec:	4e78      	ldr	r6, [pc, #480]	; (80010d0 <main+0x7d0>)
 8000eee:	2300      	movs	r3, #0
  if(HAL_OK != HAL_TIM_Base_Start(&htim1)) {
 8000ef0:	4878      	ldr	r0, [pc, #480]	; (80010d4 <main+0x7d4>)
  adcBufDMAState = DMA_INPROGRESS;
 8000ef2:	7033      	strb	r3, [r6, #0]
  if(HAL_OK != HAL_TIM_Base_Start(&htim1)) {
 8000ef4:	f005 fdce 	bl	8006a94 <HAL_TIM_Base_Start>
 8000ef8:	2800      	cmp	r0, #0
 8000efa:	f040 80e2 	bne.w	80010c2 <main+0x7c2>
 8000efe:	f8df 8214 	ldr.w	r8, [pc, #532]	; 8001114 <main+0x814>
 8000f02:	f8df b214 	ldr.w	fp, [pc, #532]	; 8001118 <main+0x818>
	      fgmean = fgmean * (1.0 - a_fgmean) + a_fgmean * adc_buf[0];
 8000f06:	ed9f 8b70 	vldr	d8, [pc, #448]	; 80010c8 <main+0x7c8>
			  RESET_FLAG2; // dunkelblau
 8000f0a:	4f73      	ldr	r7, [pc, #460]	; (80010d8 <main+0x7d8>)
      HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); // blue LED LD2 on NUCLEO board
 8000f0c:	2180      	movs	r1, #128	; 0x80
 8000f0e:	4873      	ldr	r0, [pc, #460]	; (80010dc <main+0x7dc>)
 8000f10:	f003 fb3e 	bl	8004590 <HAL_GPIO_TogglePin>
      if (adcBufDMAState > DMA_INPROGRESS) {
 8000f14:	7833      	ldrb	r3, [r6, #0]
 8000f16:	b25b      	sxtb	r3, r3
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	dd11      	ble.n	8000f40 <main+0x640>
		  if (adcBufDMAState == DMA_HALFCOMPLETE) {
 8000f1c:	7833      	ldrb	r3, [r6, #0]
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	b25a      	sxtb	r2, r3
 8000f22:	d060      	beq.n	8000fe6 <main+0x6e6>
          else if (adcBufDMAState == DMA_COMPLETE) {
 8000f24:	7833      	ldrb	r3, [r6, #0]
 8000f26:	2b02      	cmp	r3, #2
 8000f28:	d10a      	bne.n	8000f40 <main+0x640>
			  RESET_FLAG2; // dunkelblau
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2140      	movs	r1, #64	; 0x40
 8000f2e:	4638      	mov	r0, r7
 8000f30:	f003 fb2a 	bl	8004588 <HAL_GPIO_WritePin>
			  feedDFSDMinput(ADC_BUFLEN/2);
 8000f34:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8000f38:	f7ff fbd2 	bl	80006e0 <feedDFSDMinput>
			  adcBufDMAState = DMA_INPROGRESS;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	7033      	strb	r3, [r6, #0]
      if (filter0BufDMAState > DMA_INPROGRESS) { // filters 0+1 are ready at the same time
 8000f40:	7823      	ldrb	r3, [r4, #0]
 8000f42:	b25b      	sxtb	r3, r3
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	dd07      	ble.n	8000f58 <main+0x658>
    	  if (filter0BufDMAState == DMA_HALFCOMPLETE) {
 8000f48:	7823      	ldrb	r3, [r4, #0]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	b25a      	sxtb	r2, r3
 8000f4e:	f000 809d 	beq.w	800108c <main+0x78c>
    	 else if (filter0BufDMAState == DMA_COMPLETE) {
 8000f52:	7823      	ldrb	r3, [r4, #0]
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d07d      	beq.n	8001054 <main+0x754>
      if (filter2BufDMAState > DMA_INPROGRESS) { // filters 2+3 are ready at the same time
 8000f58:	782b      	ldrb	r3, [r5, #0]
 8000f5a:	b25b      	sxtb	r3, r3
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	dd07      	ble.n	8000f70 <main+0x670>
    	  if (filter2BufDMAState == DMA_HALFCOMPLETE) {
 8000f60:	782b      	ldrb	r3, [r5, #0]
 8000f62:	b25a      	sxtb	r2, r3
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	9203      	str	r2, [sp, #12]
 8000f68:	d04f      	beq.n	800100a <main+0x70a>
    	 else if (filter2BufDMAState == DMA_COMPLETE) {
 8000f6a:	782b      	ldrb	r3, [r5, #0]
 8000f6c:	2b02      	cmp	r3, #2
 8000f6e:	d044      	beq.n	8000ffa <main+0x6fa>
      if (dacBufDMAState > DMA_INPROGRESS) {
 8000f70:	f898 3000 	ldrb.w	r3, [r8]
 8000f74:	b25b      	sxtb	r3, r3
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	dd08      	ble.n	8000f8c <main+0x68c>
          if (dacBufDMAState == DMA_HALFCOMPLETE) {
 8000f7a:	f898 3000 	ldrb.w	r3, [r8]
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	b25a      	sxtb	r2, r3
 8000f82:	d05d      	beq.n	8001040 <main+0x740>
          else if (dacBufDMAState == DMA_COMPLETE) {
 8000f84:	f898 3000 	ldrb.w	r3, [r8]
 8000f88:	2b02      	cmp	r3, #2
 8000f8a:	d058      	beq.n	800103e <main+0x73e>
      if ((curTick = HAL_GetTick()) != lastTick) {
 8000f8c:	f000 fd76 	bl	8001a7c <HAL_GetTick>
 8000f90:	4b53      	ldr	r3, [pc, #332]	; (80010e0 <main+0x7e0>)
 8000f92:	6018      	str	r0, [r3, #0]
 8000f94:	f8db 3000 	ldr.w	r3, [fp]
 8000f98:	4298      	cmp	r0, r3
 8000f9a:	d0b7      	beq.n	8000f0c <main+0x60c>
	      fgmean = fgmean * (1.0 - a_fgmean) + a_fgmean * adc_buf[0];
 8000f9c:	4a51      	ldr	r2, [pc, #324]	; (80010e4 <main+0x7e4>)
	      gMean = (int)(fgmean + 0.5);
 8000f9e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
	      fgmean = fgmean * (1.0 - a_fgmean) + a_fgmean * adc_buf[0];
 8000fa2:	eddf 7a51 	vldr	s15, [pc, #324]	; 80010e8 <main+0x7e8>
 8000fa6:	8812      	ldrh	r2, [r2, #0]
 8000fa8:	4b50      	ldr	r3, [pc, #320]	; (80010ec <main+0x7ec>)
 8000faa:	ee07 2a10 	vmov	s14, r2
	      lastTick = curTick;
 8000fae:	f8cb 0000 	str.w	r0, [fp]
	      fgmean = fgmean * (1.0 - a_fgmean) + a_fgmean * adc_buf[0];
 8000fb2:	ed93 6a00 	vldr	s12, [r3]
 8000fb6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000fba:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 8000fbe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fc2:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8000fc6:	eea6 7b08 	vfma.f64	d7, d6, d8
 8000fca:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
	      gMean = (int)(fgmean + 0.5);
 8000fce:	eeb7 6ac7 	vcvt.f64.f32	d6, s14
	      fgmean = fgmean * (1.0 - a_fgmean) + a_fgmean * adc_buf[0];
 8000fd2:	ed83 7a00 	vstr	s14, [r3]
	      gMean = (int)(fgmean + 0.5);
 8000fd6:	4b46      	ldr	r3, [pc, #280]	; (80010f0 <main+0x7f0>)
 8000fd8:	ee36 7b05 	vadd.f64	d7, d6, d5
 8000fdc:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8000fe0:	ed83 7a00 	vstr	s14, [r3]
	      lastTick = curTick;
 8000fe4:	e791      	b.n	8000f0a <main+0x60a>
			  SET_FLAG2; // dunkelblau
 8000fe6:	2140      	movs	r1, #64	; 0x40
 8000fe8:	4638      	mov	r0, r7
 8000fea:	f003 facd 	bl	8004588 <HAL_GPIO_WritePin>
			  feedDFSDMinput(0);
 8000fee:	2000      	movs	r0, #0
 8000ff0:	f7ff fb76 	bl	80006e0 <feedDFSDMinput>
			  adcBufDMAState = DMA_INPROGRESS;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	7033      	strb	r3, [r6, #0]
 8000ff8:	e7a2      	b.n	8000f40 <main+0x640>
              feedDACBuf(FILTER2_BUFLEN/2);
 8000ffa:	2020      	movs	r0, #32
 8000ffc:	f7ff fbb0 	bl	8000760 <feedDACBuf>
    	      filter2BufDMAState = DMA_INPROGRESS;
 8001000:	2300      	movs	r3, #0
    	      filter3BufDMAState = DMA_INPROGRESS;
 8001002:	4a3c      	ldr	r2, [pc, #240]	; (80010f4 <main+0x7f4>)
    	      filter2BufDMAState = DMA_INPROGRESS;
 8001004:	702b      	strb	r3, [r5, #0]
    	      filter3BufDMAState = DMA_INPROGRESS;
 8001006:	7013      	strb	r3, [r2, #0]
 8001008:	e7b2      	b.n	8000f70 <main+0x670>
    	      feedDACBuf(0);
 800100a:	2000      	movs	r0, #0
 800100c:	f7ff fba8 	bl	8000760 <feedDACBuf>
    	      if(dacDMAInitialized == 0) {
 8001010:	4b39      	ldr	r3, [pc, #228]	; (80010f8 <main+0x7f8>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d1f3      	bne.n	8001000 <main+0x700>
    	    	  if (HAL_OK != HAL_LPTIM_Counter_Start(&hlptim1,
 8001018:	f240 41af 	movw	r1, #1199	; 0x4af
 800101c:	4837      	ldr	r0, [pc, #220]	; (80010fc <main+0x7fc>)
 800101e:	f003 fb33 	bl	8004688 <HAL_LPTIM_Counter_Start>
 8001022:	4601      	mov	r1, r0
 8001024:	b9a8      	cbnz	r0, 8001052 <main+0x752>
    	    	  if(HAL_OK != HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)dac_buf,
 8001026:	2304      	movs	r3, #4
 8001028:	4a35      	ldr	r2, [pc, #212]	; (8001100 <main+0x800>)
 800102a:	4836      	ldr	r0, [pc, #216]	; (8001104 <main+0x804>)
 800102c:	9300      	str	r3, [sp, #0]
 800102e:	2340      	movs	r3, #64	; 0x40
 8001030:	f001 fb56 	bl	80026e0 <HAL_DAC_Start_DMA>
 8001034:	b960      	cbnz	r0, 8001050 <main+0x750>
    	    	  dacDMAInitialized = 1;
 8001036:	4b30      	ldr	r3, [pc, #192]	; (80010f8 <main+0x7f8>)
 8001038:	9a03      	ldr	r2, [sp, #12]
 800103a:	701a      	strb	r2, [r3, #0]
    	      filter2BufDMAState = DMA_INPROGRESS;
 800103c:	e7e0      	b.n	8001000 <main+0x700>
              RESET_TRIG1; //hellblau
 800103e:	2200      	movs	r2, #0
 8001040:	2180      	movs	r1, #128	; 0x80
 8001042:	4638      	mov	r0, r7
 8001044:	f003 faa0 	bl	8004588 <HAL_GPIO_WritePin>
              dacBufDMAState = DMA_INPROGRESS;
 8001048:	2300      	movs	r3, #0
 800104a:	f888 3000 	strb.w	r3, [r8]
 800104e:	e79d      	b.n	8000f8c <main+0x68c>
 8001050:	e7fe      	b.n	8001050 <main+0x750>
 8001052:	e7fe      	b.n	8001052 <main+0x752>
     		  RESET_FLAG1; //magenta
 8001054:	2120      	movs	r1, #32
 8001056:	2200      	movs	r2, #0
 8001058:	4638      	mov	r0, r7
 800105a:	f003 fa95 	bl	8004588 <HAL_GPIO_WritePin>
		*DFSDM_CH2DATINR = secondCICin;
 800105e:	4b2a      	ldr	r3, [pc, #168]	; (8001108 <main+0x808>)
 8001060:	6819      	ldr	r1, [r3, #0]
	for(uint16_t i=startindex; i< startindex+FILTER0_BUFLEN/2; i++) {
 8001062:	f44f 7380 	mov.w	r3, #256	; 0x100
		secondCICin = (q31_filter0buf[i] & 0xffff0000) | (((uint32_t)q31_filter1buf[i] >> 16) & 0xffff);
 8001066:	f859 2023 	ldr.w	r2, [r9, r3, lsl #2]
 800106a:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 800106e:	3301      	adds	r3, #1
 8001070:	0c12      	lsrs	r2, r2, #16
	for(uint16_t i=startindex; i< startindex+FILTER0_BUFLEN/2; i++) {
 8001072:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
		secondCICin = (q31_filter0buf[i] & 0xffff0000) | (((uint32_t)q31_filter1buf[i] >> 16) & 0xffff);
 8001076:	ea4f 4202 	mov.w	r2, r2, lsl #16
 800107a:	ea42 4210 	orr.w	r2, r2, r0, lsr #16
		*DFSDM_CH2DATINR = secondCICin;
 800107e:	600a      	str	r2, [r1, #0]
	for(uint16_t i=startindex; i< startindex+FILTER0_BUFLEN/2; i++) {
 8001080:	d1f1      	bne.n	8001066 <main+0x766>
    	      filter0BufDMAState = DMA_INPROGRESS;
 8001082:	2300      	movs	r3, #0
    	      filter1BufDMAState = DMA_INPROGRESS;
 8001084:	4a21      	ldr	r2, [pc, #132]	; (800110c <main+0x80c>)
    	      filter0BufDMAState = DMA_INPROGRESS;
 8001086:	7023      	strb	r3, [r4, #0]
    	      filter1BufDMAState = DMA_INPROGRESS;
 8001088:	7013      	strb	r3, [r2, #0]
 800108a:	e765      	b.n	8000f58 <main+0x658>
    		  SET_FLAG1; //magenta
 800108c:	2120      	movs	r1, #32
 800108e:	4638      	mov	r0, r7
 8001090:	f003 fa7a 	bl	8004588 <HAL_GPIO_WritePin>
		*DFSDM_CH2DATINR = secondCICin;
 8001094:	4b1c      	ldr	r3, [pc, #112]	; (8001108 <main+0x808>)
 8001096:	491e      	ldr	r1, [pc, #120]	; (8001110 <main+0x810>)
 8001098:	f8d3 c000 	ldr.w	ip, [r3]
	for(uint16_t i=startindex; i< startindex+FILTER0_BUFLEN/2; i++) {
 800109c:	2300      	movs	r3, #0
 800109e:	f501 6000 	add.w	r0, r1, #2048	; 0x800
		secondCICin = (q31_filter0buf[i] & 0xffff0000) | (((uint32_t)q31_filter1buf[i] >> 16) & 0xffff);
 80010a2:	f851 2b04 	ldr.w	r2, [r1], #4
	for(uint16_t i=startindex; i< startindex+FILTER0_BUFLEN/2; i++) {
 80010a6:	3301      	adds	r3, #1
		secondCICin = (q31_filter0buf[i] & 0xffff0000) | (((uint32_t)q31_filter1buf[i] >> 16) & 0xffff);
 80010a8:	f850 eb04 	ldr.w	lr, [r0], #4
 80010ac:	0c12      	lsrs	r2, r2, #16
	for(uint16_t i=startindex; i< startindex+FILTER0_BUFLEN/2; i++) {
 80010ae:	b29b      	uxth	r3, r3
		secondCICin = (q31_filter0buf[i] & 0xffff0000) | (((uint32_t)q31_filter1buf[i] >> 16) & 0xffff);
 80010b0:	0412      	lsls	r2, r2, #16
	for(uint16_t i=startindex; i< startindex+FILTER0_BUFLEN/2; i++) {
 80010b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
		secondCICin = (q31_filter0buf[i] & 0xffff0000) | (((uint32_t)q31_filter1buf[i] >> 16) & 0xffff);
 80010b6:	ea42 421e 	orr.w	r2, r2, lr, lsr #16
		*DFSDM_CH2DATINR = secondCICin;
 80010ba:	f8cc 2000 	str.w	r2, [ip]
	for(uint16_t i=startindex; i< startindex+FILTER0_BUFLEN/2; i++) {
 80010be:	d1f0      	bne.n	80010a2 <main+0x7a2>
 80010c0:	e7df      	b.n	8001082 <main+0x782>
	  ERRHND;
 80010c2:	e7fe      	b.n	80010c2 <main+0x7c2>
 80010c4:	f3af 8000 	nop.w
 80010c8:	074a8000 	.word	0x074a8000
 80010cc:	3fefffeb 	.word	0x3fefffeb
 80010d0:	20000008 	.word	0x20000008
 80010d4:	20000828 	.word	0x20000828
 80010d8:	58020000 	.word	0x58020000
 80010dc:	58020400 	.word	0x58020400
 80010e0:	200001e0 	.word	0x200001e0
 80010e4:	30002840 	.word	0x30002840
 80010e8:	3727c5ac 	.word	0x3727c5ac
 80010ec:	20000154 	.word	0x20000154
 80010f0:	2000015c 	.word	0x2000015c
 80010f4:	2000015b 	.word	0x2000015b
 80010f8:	200001e4 	.word	0x200001e4
 80010fc:	200007f0 	.word	0x200007f0
 8001100:	30002500 	.word	0x30002500
 8001104:	20000264 	.word	0x20000264
 8001108:	20000004 	.word	0x20000004
 800110c:	20000159 	.word	0x20000159
 8001110:	30000000 	.word	0x30000000
 8001114:	20000150 	.word	0x20000150
 8001118:	20000908 	.word	0x20000908

0800111c <HAL_ADC_ConvHalfCpltCallback>:


/* ADC DMA interrupts ************************************************/
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
     adcBufDMAState = DMA_HALFCOMPLETE;
 800111c:	4b01      	ldr	r3, [pc, #4]	; (8001124 <HAL_ADC_ConvHalfCpltCallback+0x8>)
 800111e:	2201      	movs	r2, #1
 8001120:	701a      	strb	r2, [r3, #0]
}
 8001122:	4770      	bx	lr
 8001124:	20000008 	.word	0x20000008

08001128 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
     adcBufDMAState = DMA_COMPLETE;
 8001128:	4b01      	ldr	r3, [pc, #4]	; (8001130 <HAL_ADC_ConvCpltCallback+0x8>)
 800112a:	2202      	movs	r2, #2
 800112c:	701a      	strb	r2, [r3, #0]
}
 800112e:	4770      	bx	lr
 8001130:	20000008 	.word	0x20000008

08001134 <HAL_ADC_ErrorCallback>:

void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
     if (hadc->ErrorCode) {
 8001134:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8001136:	b13b      	cbz	r3, 8001148 <HAL_ADC_ErrorCallback+0x14>
	     ERRHND;
 8001138:	4904      	ldr	r1, [pc, #16]	; (800114c <HAL_ADC_ErrorCallback+0x18>)
 800113a:	f240 420a 	movw	r2, #1034	; 0x40a
 800113e:	4804      	ldr	r0, [pc, #16]	; (8001150 <HAL_ADC_ErrorCallback+0x1c>)
 8001140:	4b04      	ldr	r3, [pc, #16]	; (8001154 <HAL_ADC_ErrorCallback+0x20>)
 8001142:	6008      	str	r0, [r1, #0]
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	e7fe      	b.n	8001146 <HAL_ADC_ErrorCallback+0x12>
     }
}
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	200001ec 	.word	0x200001ec
 8001150:	08008488 	.word	0x08008488
 8001154:	200001f0 	.word	0x200001f0

08001158 <HAL_DAC_ConvHalfCpltCallbackCh1>:

/* DAC DMA interrupts ************************************************/
void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
     dacBufDMAState = DMA_HALFCOMPLETE;
 8001158:	4b01      	ldr	r3, [pc, #4]	; (8001160 <HAL_DAC_ConvHalfCpltCallbackCh1+0x8>)
 800115a:	2201      	movs	r2, #1
 800115c:	701a      	strb	r2, [r3, #0]
}
 800115e:	4770      	bx	lr
 8001160:	20000150 	.word	0x20000150

08001164 <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
     dacBufDMAState = DMA_COMPLETE;
 8001164:	4b01      	ldr	r3, [pc, #4]	; (800116c <HAL_DAC_ConvCpltCallbackCh1+0x8>)
 8001166:	2202      	movs	r2, #2
 8001168:	701a      	strb	r2, [r3, #0]
}
 800116a:	4770      	bx	lr
 800116c:	20000150 	.word	0x20000150

08001170 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:

/* DFSDM DMA interrupts ************************************************/
void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
	if (hdfsdm_filter == &hdfsdm1_filter0) {
 8001170:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x48>)
 8001172:	4298      	cmp	r0, r3
 8001174:	d014      	beq.n	80011a0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x30>
		filter0BufDMAState = DMA_HALFCOMPLETE;
		return;
	}
	if (hdfsdm_filter == &hdfsdm1_filter1) {
 8001176:	4b11      	ldr	r3, [pc, #68]	; (80011bc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x4c>)
 8001178:	4298      	cmp	r0, r3
 800117a:	d015      	beq.n	80011a8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x38>
		filter1BufDMAState = DMA_HALFCOMPLETE;
		return;
	}
	if (hdfsdm_filter == &hdfsdm1_filter2) {
 800117c:	4b10      	ldr	r3, [pc, #64]	; (80011c0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x50>)
 800117e:	4298      	cmp	r0, r3
 8001180:	d016      	beq.n	80011b0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x40>
		filter2BufDMAState = DMA_HALFCOMPLETE;
		return;
	}
	if (hdfsdm_filter == &hdfsdm1_filter3) {
 8001182:	4b10      	ldr	r3, [pc, #64]	; (80011c4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x54>)
 8001184:	4298      	cmp	r0, r3
 8001186:	d007      	beq.n	8001198 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x28>
		filter3BufDMAState = DMA_HALFCOMPLETE;
		return;
	}
	ERRHND;
 8001188:	490f      	ldr	r1, [pc, #60]	; (80011c8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x58>)
 800118a:	f240 422c 	movw	r2, #1068	; 0x42c
 800118e:	480f      	ldr	r0, [pc, #60]	; (80011cc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x5c>)
 8001190:	4b0f      	ldr	r3, [pc, #60]	; (80011d0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x60>)
 8001192:	6008      	str	r0, [r1, #0]
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	e7fe      	b.n	8001196 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26>
		filter3BufDMAState = DMA_HALFCOMPLETE;
 8001198:	4b0e      	ldr	r3, [pc, #56]	; (80011d4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x64>)
 800119a:	2201      	movs	r2, #1
 800119c:	701a      	strb	r2, [r3, #0]
}
 800119e:	4770      	bx	lr
		filter0BufDMAState = DMA_HALFCOMPLETE;
 80011a0:	4b0d      	ldr	r3, [pc, #52]	; (80011d8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x68>)
 80011a2:	2201      	movs	r2, #1
 80011a4:	701a      	strb	r2, [r3, #0]
		return;
 80011a6:	4770      	bx	lr
		filter1BufDMAState = DMA_HALFCOMPLETE;
 80011a8:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x6c>)
 80011aa:	2201      	movs	r2, #1
 80011ac:	701a      	strb	r2, [r3, #0]
		return;
 80011ae:	4770      	bx	lr
		filter2BufDMAState = DMA_HALFCOMPLETE;
 80011b0:	4b0b      	ldr	r3, [pc, #44]	; (80011e0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x70>)
 80011b2:	2201      	movs	r2, #1
 80011b4:	701a      	strb	r2, [r3, #0]
		return;
 80011b6:	4770      	bx	lr
 80011b8:	20000358 	.word	0x20000358
 80011bc:	200003ac 	.word	0x200003ac
 80011c0:	20000400 	.word	0x20000400
 80011c4:	20000454 	.word	0x20000454
 80011c8:	200001ec 	.word	0x200001ec
 80011cc:	08008488 	.word	0x08008488
 80011d0:	200001f0 	.word	0x200001f0
 80011d4:	2000015b 	.word	0x2000015b
 80011d8:	20000158 	.word	0x20000158
 80011dc:	20000159 	.word	0x20000159
 80011e0:	2000015a 	.word	0x2000015a

080011e4 <HAL_DFSDM_FilterRegConvCpltCallback>:

void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
	if (hdfsdm_filter == &hdfsdm1_filter0) {
 80011e4:	4b11      	ldr	r3, [pc, #68]	; (800122c <HAL_DFSDM_FilterRegConvCpltCallback+0x48>)
 80011e6:	4298      	cmp	r0, r3
 80011e8:	d014      	beq.n	8001214 <HAL_DFSDM_FilterRegConvCpltCallback+0x30>
		filter0BufDMAState = DMA_COMPLETE;
		return;
	}
	if (hdfsdm_filter == &hdfsdm1_filter1) {
 80011ea:	4b11      	ldr	r3, [pc, #68]	; (8001230 <HAL_DFSDM_FilterRegConvCpltCallback+0x4c>)
 80011ec:	4298      	cmp	r0, r3
 80011ee:	d015      	beq.n	800121c <HAL_DFSDM_FilterRegConvCpltCallback+0x38>
		filter1BufDMAState = DMA_COMPLETE;
		return;
	}
	if (hdfsdm_filter == &hdfsdm1_filter2) {
 80011f0:	4b10      	ldr	r3, [pc, #64]	; (8001234 <HAL_DFSDM_FilterRegConvCpltCallback+0x50>)
 80011f2:	4298      	cmp	r0, r3
 80011f4:	d016      	beq.n	8001224 <HAL_DFSDM_FilterRegConvCpltCallback+0x40>
		filter2BufDMAState = DMA_COMPLETE;
		return;
	}
	if (hdfsdm_filter == &hdfsdm1_filter3) {
 80011f6:	4b10      	ldr	r3, [pc, #64]	; (8001238 <HAL_DFSDM_FilterRegConvCpltCallback+0x54>)
 80011f8:	4298      	cmp	r0, r3
 80011fa:	d007      	beq.n	800120c <HAL_DFSDM_FilterRegConvCpltCallback+0x28>
		filter3BufDMAState = DMA_COMPLETE;
		return;
	}
	ERRHND;
 80011fc:	490f      	ldr	r1, [pc, #60]	; (800123c <HAL_DFSDM_FilterRegConvCpltCallback+0x58>)
 80011fe:	f240 4241 	movw	r2, #1089	; 0x441
 8001202:	480f      	ldr	r0, [pc, #60]	; (8001240 <HAL_DFSDM_FilterRegConvCpltCallback+0x5c>)
 8001204:	4b0f      	ldr	r3, [pc, #60]	; (8001244 <HAL_DFSDM_FilterRegConvCpltCallback+0x60>)
 8001206:	6008      	str	r0, [r1, #0]
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	e7fe      	b.n	800120a <HAL_DFSDM_FilterRegConvCpltCallback+0x26>
		filter3BufDMAState = DMA_COMPLETE;
 800120c:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <HAL_DFSDM_FilterRegConvCpltCallback+0x64>)
 800120e:	2202      	movs	r2, #2
 8001210:	701a      	strb	r2, [r3, #0]
}
 8001212:	4770      	bx	lr
		filter0BufDMAState = DMA_COMPLETE;
 8001214:	4b0d      	ldr	r3, [pc, #52]	; (800124c <HAL_DFSDM_FilterRegConvCpltCallback+0x68>)
 8001216:	2202      	movs	r2, #2
 8001218:	701a      	strb	r2, [r3, #0]
		return;
 800121a:	4770      	bx	lr
		filter1BufDMAState = DMA_COMPLETE;
 800121c:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <HAL_DFSDM_FilterRegConvCpltCallback+0x6c>)
 800121e:	2202      	movs	r2, #2
 8001220:	701a      	strb	r2, [r3, #0]
		return;
 8001222:	4770      	bx	lr
		filter2BufDMAState = DMA_COMPLETE;
 8001224:	4b0b      	ldr	r3, [pc, #44]	; (8001254 <HAL_DFSDM_FilterRegConvCpltCallback+0x70>)
 8001226:	2202      	movs	r2, #2
 8001228:	701a      	strb	r2, [r3, #0]
		return;
 800122a:	4770      	bx	lr
 800122c:	20000358 	.word	0x20000358
 8001230:	200003ac 	.word	0x200003ac
 8001234:	20000400 	.word	0x20000400
 8001238:	20000454 	.word	0x20000454
 800123c:	200001ec 	.word	0x200001ec
 8001240:	08008488 	.word	0x08008488
 8001244:	200001f0 	.word	0x200001f0
 8001248:	2000015b 	.word	0x2000015b
 800124c:	20000158 	.word	0x20000158
 8001250:	20000159 	.word	0x20000159
 8001254:	2000015a 	.word	0x2000015a

08001258 <HAL_UART_TxCpltCallback>:
    }
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
    if(huart == &huart3) {
 8001258:	4b03      	ldr	r3, [pc, #12]	; (8001268 <HAL_UART_TxCpltCallback+0x10>)
 800125a:	4283      	cmp	r3, r0
 800125c:	d000      	beq.n	8001260 <HAL_UART_TxCpltCallback+0x8>
    	txBufDMAState = DMA_COMPLETE;
    }
}
 800125e:	4770      	bx	lr
    	txBufDMAState = DMA_COMPLETE;
 8001260:	4b02      	ldr	r3, [pc, #8]	; (800126c <HAL_UART_TxCpltCallback+0x14>)
 8001262:	2202      	movs	r2, #2
 8001264:	701a      	strb	r2, [r3, #0]
}
 8001266:	4770      	bx	lr
 8001268:	20000874 	.word	0x20000874
 800126c:	20000160 	.word	0x20000160

08001270 <Error_Handler>:
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
      while (1)
 8001270:	e7fe      	b.n	8001270 <Error_Handler>
 8001272:	bf00      	nop

08001274 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001274:	4b07      	ldr	r3, [pc, #28]	; (8001294 <HAL_MspInit+0x20>)
{
 8001276:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001278:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 800127c:	f042 0202 	orr.w	r2, r2, #2
 8001280:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8001284:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001288:	f003 0302 	and.w	r3, r3, #2
 800128c:	9301      	str	r3, [sp, #4]
 800128e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001290:	b002      	add	sp, #8
 8001292:	4770      	bx	lr
 8001294:	58024400 	.word	0x58024400

08001298 <HAL_ADC_MspInit>:
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8001298:	4b28      	ldr	r3, [pc, #160]	; (800133c <HAL_ADC_MspInit+0xa4>)
 800129a:	6802      	ldr	r2, [r0, #0]
{
 800129c:	b570      	push	{r4, r5, r6, lr}
  if(hadc->Instance==ADC1)
 800129e:	429a      	cmp	r2, r3
{
 80012a0:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a2:	f04f 0400 	mov.w	r4, #0
 80012a6:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80012aa:	9404      	str	r4, [sp, #16]
 80012ac:	e9cd 4405 	strd	r4, r4, [sp, #20]
  if(hadc->Instance==ADC1)
 80012b0:	d001      	beq.n	80012b6 <HAL_ADC_MspInit+0x1e>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012b2:	b008      	add	sp, #32
 80012b4:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC12_CLK_ENABLE();
 80012b6:	4b22      	ldr	r3, [pc, #136]	; (8001340 <HAL_ADC_MspInit+0xa8>)
 80012b8:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012ba:	a902      	add	r1, sp, #8
    hdma_adc1.Instance = DMA1_Stream0;
 80012bc:	4e21      	ldr	r6, [pc, #132]	; (8001344 <HAL_ADC_MspInit+0xac>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 80012be:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80012c2:	f042 0220 	orr.w	r2, r2, #32
 80012c6:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 80012ca:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80012ce:	f002 0220 	and.w	r2, r2, #32
 80012d2:	9200      	str	r2, [sp, #0]
 80012d4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80012d6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80012da:	f042 0220 	orr.w	r2, r2, #32
 80012de:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80012e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80012e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ea:	f003 0320 	and.w	r3, r3, #32
 80012ee:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80012f0:	2303      	movs	r3, #3
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80012f2:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012f4:	4814      	ldr	r0, [pc, #80]	; (8001348 <HAL_ADC_MspInit+0xb0>)
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80012f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012fa:	f003 f813 	bl	8004324 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Stream0;
 80012fe:	4a13      	ldr	r2, [pc, #76]	; (800134c <HAL_ADC_MspInit+0xb4>)
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001300:	2309      	movs	r3, #9
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001302:	4630      	mov	r0, r6
    hdma_adc1.Instance = DMA1_Stream0;
 8001304:	6032      	str	r2, [r6, #0]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001306:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800130a:	6073      	str	r3, [r6, #4]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800130c:	f44f 6300 	mov.w	r3, #2048	; 0x800
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001310:	6132      	str	r2, [r6, #16]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001312:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001316:	6173      	str	r3, [r6, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001318:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800131c:	60b4      	str	r4, [r6, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800131e:	60f4      	str	r4, [r6, #12]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001320:	6234      	str	r4, [r6, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001322:	6274      	str	r4, [r6, #36]	; 0x24
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001324:	e9c6 2306 	strd	r2, r3, [r6, #24]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001328:	f001 fe36 	bl	8002f98 <HAL_DMA_Init>
 800132c:	b918      	cbnz	r0, 8001336 <HAL_ADC_MspInit+0x9e>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800132e:	64ee      	str	r6, [r5, #76]	; 0x4c
 8001330:	63b5      	str	r5, [r6, #56]	; 0x38
}
 8001332:	b008      	add	sp, #32
 8001334:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8001336:	f7ff ff9b 	bl	8001270 <Error_Handler>
 800133a:	e7f8      	b.n	800132e <HAL_ADC_MspInit+0x96>
 800133c:	40022000 	.word	0x40022000
 8001340:	58024400 	.word	0x58024400
 8001344:	200004a8 	.word	0x200004a8
 8001348:	58021400 	.word	0x58021400
 800134c:	40020010 	.word	0x40020010

08001350 <HAL_DAC_MspInit>:
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC1)
 8001350:	4b29      	ldr	r3, [pc, #164]	; (80013f8 <HAL_DAC_MspInit+0xa8>)
 8001352:	6802      	ldr	r2, [r0, #0]
{
 8001354:	b570      	push	{r4, r5, r6, lr}
  if(hdac->Instance==DAC1)
 8001356:	429a      	cmp	r2, r3
{
 8001358:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135a:	f04f 0400 	mov.w	r4, #0
 800135e:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8001362:	9404      	str	r4, [sp, #16]
 8001364:	e9cd 4405 	strd	r4, r4, [sp, #20]
  if(hdac->Instance==DAC1)
 8001368:	d001      	beq.n	800136e <HAL_DAC_MspInit+0x1e>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800136a:	b008      	add	sp, #32
 800136c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_DAC12_CLK_ENABLE();
 800136e:	4b23      	ldr	r3, [pc, #140]	; (80013fc <HAL_DAC_MspInit+0xac>)
 8001370:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001372:	a902      	add	r1, sp, #8
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 8001374:	4e22      	ldr	r6, [pc, #136]	; (8001400 <HAL_DAC_MspInit+0xb0>)
    __HAL_RCC_DAC12_CLK_ENABLE();
 8001376:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800137a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800137e:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8001382:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001386:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 800138a:	9200      	str	r2, [sp, #0]
 800138c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800138e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001392:	f042 0201 	orr.w	r2, r2, #1
 8001396:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800139a:	2210      	movs	r2, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800139c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013a0:	f003 0301 	and.w	r3, r3, #1
 80013a4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80013a6:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a8:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013aa:	4816      	ldr	r0, [pc, #88]	; (8001404 <HAL_DAC_MspInit+0xb4>)
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80013ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b0:	f002 ffb8 	bl	8004324 <HAL_GPIO_Init>
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 80013b4:	4a14      	ldr	r2, [pc, #80]	; (8001408 <HAL_DAC_MspInit+0xb8>)
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 80013b6:	2343      	movs	r3, #67	; 0x43
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80013b8:	4630      	mov	r0, r6
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 80013ba:	6032      	str	r2, [r6, #0]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013bc:	2240      	movs	r2, #64	; 0x40
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 80013be:	6073      	str	r3, [r6, #4]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80013c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013c4:	60b2      	str	r2, [r6, #8]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80013ca:	6133      	str	r3, [r6, #16]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80013d0:	60f4      	str	r4, [r6, #12]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013d2:	6274      	str	r4, [r6, #36]	; 0x24
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013d4:	e9c6 2305 	strd	r2, r3, [r6, #20]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80013d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013dc:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80013e0:	e9c6 2307 	strd	r2, r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80013e4:	f001 fdd8 	bl	8002f98 <HAL_DMA_Init>
 80013e8:	b918      	cbnz	r0, 80013f2 <HAL_DAC_MspInit+0xa2>
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80013ea:	60ae      	str	r6, [r5, #8]
 80013ec:	63b5      	str	r5, [r6, #56]	; 0x38
}
 80013ee:	b008      	add	sp, #32
 80013f0:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80013f2:	f7ff ff3d 	bl	8001270 <Error_Handler>
 80013f6:	e7f8      	b.n	80013ea <HAL_DAC_MspInit+0x9a>
 80013f8:	40007400 	.word	0x40007400
 80013fc:	58024400 	.word	0x58024400
 8001400:	20000520 	.word	0x20000520
 8001404:	58020000 	.word	0x58020000
 8001408:	40020028 	.word	0x40020028

0800140c <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 800140c:	b530      	push	{r4, r5, lr}
 800140e:	b0b3      	sub	sp, #204	; 0xcc
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
  if(DFSDM1_Init == 0)
 8001410:	4d6c      	ldr	r5, [pc, #432]	; (80015c4 <HAL_DFSDM_FilterMspInit+0x1b8>)
{
 8001412:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001414:	22c0      	movs	r2, #192	; 0xc0
 8001416:	2100      	movs	r1, #0
 8001418:	a802      	add	r0, sp, #8
 800141a:	f006 ffd5 	bl	80083c8 <memset>
  if(DFSDM1_Init == 0)
 800141e:	682b      	ldr	r3, [r5, #0]
 8001420:	b17b      	cbz	r3, 8001442 <HAL_DFSDM_FilterMspInit+0x36>
  DFSDM1_Init++;
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 8001422:	6823      	ldr	r3, [r4, #0]
 8001424:	4a68      	ldr	r2, [pc, #416]	; (80015c8 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d030      	beq.n	800148c <HAL_DFSDM_FilterMspInit+0x80>
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
  }

    /* DFSDM1_FLT1 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter1){
 800142a:	4a68      	ldr	r2, [pc, #416]	; (80015cc <HAL_DFSDM_FilterMspInit+0x1c0>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d051      	beq.n	80014d4 <HAL_DFSDM_FilterMspInit+0xc8>
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt1);
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt1);
  }

    /* DFSDM1_FLT2 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter2){
 8001430:	4a67      	ldr	r2, [pc, #412]	; (80015d0 <HAL_DFSDM_FilterMspInit+0x1c4>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d072      	beq.n	800151c <HAL_DFSDM_FilterMspInit+0x110>
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt2);
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt2);
  }

    /* DFSDM1_FLT3 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter3){
 8001436:	4a67      	ldr	r2, [pc, #412]	; (80015d4 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8001438:	4293      	cmp	r3, r2
 800143a:	f000 8093 	beq.w	8001564 <HAL_DFSDM_FilterMspInit+0x158>
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt3);
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt3);
  }

}
 800143e:	b033      	add	sp, #204	; 0xcc
 8001440:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001442:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001446:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001448:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800144a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800144e:	f004 f885 	bl	800555c <HAL_RCCEx_PeriphCLKConfig>
 8001452:	2800      	cmp	r0, #0
 8001454:	f040 80a7 	bne.w	80015a6 <HAL_DFSDM_FilterMspInit+0x19a>
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001458:	4a5f      	ldr	r2, [pc, #380]	; (80015d8 <HAL_DFSDM_FilterMspInit+0x1cc>)
 800145a:	6813      	ldr	r3, [r2, #0]
 800145c:	3301      	adds	r3, #1
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800145e:	2b01      	cmp	r3, #1
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001460:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001462:	d10c      	bne.n	800147e <HAL_DFSDM_FilterMspInit+0x72>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001464:	4b5d      	ldr	r3, [pc, #372]	; (80015dc <HAL_DFSDM_FilterMspInit+0x1d0>)
 8001466:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800146a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800146e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8001472:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800147a:	9301      	str	r3, [sp, #4]
 800147c:	9b01      	ldr	r3, [sp, #4]
  DFSDM1_Init++;
 800147e:	682b      	ldr	r3, [r5, #0]
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 8001480:	4a51      	ldr	r2, [pc, #324]	; (80015c8 <HAL_DFSDM_FilterMspInit+0x1bc>)
  DFSDM1_Init++;
 8001482:	3301      	adds	r3, #1
 8001484:	602b      	str	r3, [r5, #0]
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 8001486:	6823      	ldr	r3, [r4, #0]
 8001488:	4293      	cmp	r3, r2
 800148a:	d1ce      	bne.n	800142a <HAL_DFSDM_FilterMspInit+0x1e>
    hdma_dfsdm1_flt0.Instance = DMA1_Stream3;
 800148c:	4d54      	ldr	r5, [pc, #336]	; (80015e0 <HAL_DFSDM_FilterMspInit+0x1d4>)
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_DFSDM1_FLT0;
 800148e:	2265      	movs	r2, #101	; 0x65
    hdma_dfsdm1_flt0.Instance = DMA1_Stream3;
 8001490:	4954      	ldr	r1, [pc, #336]	; (80015e4 <HAL_DFSDM_FilterMspInit+0x1d8>)
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001492:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8001494:	4628      	mov	r0, r5
    hdma_dfsdm1_flt0.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001496:	626b      	str	r3, [r5, #36]	; 0x24
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_DFSDM1_FLT0;
 8001498:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800149c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 80014a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 80014a4:	e9c5 3302 	strd	r3, r3, [r5, #8]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014a8:	e9c5 1204 	strd	r1, r2, [r5, #16]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 80014ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014b0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014b4:	e9c5 2306 	strd	r2, r3, [r5, #24]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_HIGH;
 80014b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014bc:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 80014be:	f001 fd6b 	bl	8002f98 <HAL_DMA_Init>
 80014c2:	2800      	cmp	r0, #0
 80014c4:	d172      	bne.n	80015ac <HAL_DFSDM_FilterMspInit+0x1a0>
  if(hdfsdm_filter->Instance == DFSDM1_Filter1){
 80014c6:	6823      	ldr	r3, [r4, #0]
 80014c8:	4a40      	ldr	r2, [pc, #256]	; (80015cc <HAL_DFSDM_FilterMspInit+0x1c0>)
 80014ca:	4293      	cmp	r3, r2
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 80014cc:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
 80014d0:	63ac      	str	r4, [r5, #56]	; 0x38
  if(hdfsdm_filter->Instance == DFSDM1_Filter1){
 80014d2:	d1ad      	bne.n	8001430 <HAL_DFSDM_FilterMspInit+0x24>
    hdma_dfsdm1_flt1.Instance = DMA1_Stream4;
 80014d4:	4d44      	ldr	r5, [pc, #272]	; (80015e8 <HAL_DFSDM_FilterMspInit+0x1dc>)
    hdma_dfsdm1_flt1.Init.Request = DMA_REQUEST_DFSDM1_FLT1;
 80014d6:	2266      	movs	r2, #102	; 0x66
    hdma_dfsdm1_flt1.Instance = DMA1_Stream4;
 80014d8:	4944      	ldr	r1, [pc, #272]	; (80015ec <HAL_DFSDM_FilterMspInit+0x1e0>)
    hdma_dfsdm1_flt1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014da:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_dfsdm1_flt1) != HAL_OK)
 80014dc:	4628      	mov	r0, r5
    hdma_dfsdm1_flt1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014de:	626b      	str	r3, [r5, #36]	; 0x24
    hdma_dfsdm1_flt1.Init.Request = DMA_REQUEST_DFSDM1_FLT1;
 80014e0:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_dfsdm1_flt1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_dfsdm1_flt1.Init.MemInc = DMA_MINC_ENABLE;
 80014e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_dfsdm1_flt1.Init.PeriphInc = DMA_PINC_DISABLE;
 80014ec:	e9c5 3302 	strd	r3, r3, [r5, #8]
    hdma_dfsdm1_flt1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014f0:	e9c5 1204 	strd	r1, r2, [r5, #16]
    hdma_dfsdm1_flt1.Init.Mode = DMA_CIRCULAR;
 80014f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014f8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014fc:	e9c5 2306 	strd	r2, r3, [r5, #24]
    hdma_dfsdm1_flt1.Init.Priority = DMA_PRIORITY_HIGH;
 8001500:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001504:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt1) != HAL_OK)
 8001506:	f001 fd47 	bl	8002f98 <HAL_DMA_Init>
 800150a:	2800      	cmp	r0, #0
 800150c:	d151      	bne.n	80015b2 <HAL_DFSDM_FilterMspInit+0x1a6>
  if(hdfsdm_filter->Instance == DFSDM1_Filter2){
 800150e:	6823      	ldr	r3, [r4, #0]
 8001510:	4a2f      	ldr	r2, [pc, #188]	; (80015d0 <HAL_DFSDM_FilterMspInit+0x1c4>)
 8001512:	4293      	cmp	r3, r2
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt1);
 8001514:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
 8001518:	63ac      	str	r4, [r5, #56]	; 0x38
  if(hdfsdm_filter->Instance == DFSDM1_Filter2){
 800151a:	d18c      	bne.n	8001436 <HAL_DFSDM_FilterMspInit+0x2a>
    hdma_dfsdm1_flt2.Instance = DMA1_Stream5;
 800151c:	4d34      	ldr	r5, [pc, #208]	; (80015f0 <HAL_DFSDM_FilterMspInit+0x1e4>)
    hdma_dfsdm1_flt2.Init.Request = DMA_REQUEST_DFSDM1_FLT2;
 800151e:	2267      	movs	r2, #103	; 0x67
    hdma_dfsdm1_flt2.Instance = DMA1_Stream5;
 8001520:	4934      	ldr	r1, [pc, #208]	; (80015f4 <HAL_DFSDM_FilterMspInit+0x1e8>)
    hdma_dfsdm1_flt2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001522:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_dfsdm1_flt2) != HAL_OK)
 8001524:	4628      	mov	r0, r5
    hdma_dfsdm1_flt2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001526:	626b      	str	r3, [r5, #36]	; 0x24
    hdma_dfsdm1_flt2.Init.Request = DMA_REQUEST_DFSDM1_FLT2;
 8001528:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_dfsdm1_flt2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800152c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_dfsdm1_flt2.Init.MemInc = DMA_MINC_ENABLE;
 8001530:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_dfsdm1_flt2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001534:	e9c5 3302 	strd	r3, r3, [r5, #8]
    hdma_dfsdm1_flt2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001538:	e9c5 1204 	strd	r1, r2, [r5, #16]
    hdma_dfsdm1_flt2.Init.Mode = DMA_CIRCULAR;
 800153c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001540:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001544:	e9c5 2306 	strd	r2, r3, [r5, #24]
    hdma_dfsdm1_flt2.Init.Priority = DMA_PRIORITY_HIGH;
 8001548:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800154c:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt2) != HAL_OK)
 800154e:	f001 fd23 	bl	8002f98 <HAL_DMA_Init>
 8001552:	bba0      	cbnz	r0, 80015be <HAL_DFSDM_FilterMspInit+0x1b2>
  if(hdfsdm_filter->Instance == DFSDM1_Filter3){
 8001554:	6823      	ldr	r3, [r4, #0]
 8001556:	4a1f      	ldr	r2, [pc, #124]	; (80015d4 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8001558:	4293      	cmp	r3, r2
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt2);
 800155a:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
 800155e:	63ac      	str	r4, [r5, #56]	; 0x38
  if(hdfsdm_filter->Instance == DFSDM1_Filter3){
 8001560:	f47f af6d 	bne.w	800143e <HAL_DFSDM_FilterMspInit+0x32>
    hdma_dfsdm1_flt3.Instance = DMA1_Stream6;
 8001564:	4d24      	ldr	r5, [pc, #144]	; (80015f8 <HAL_DFSDM_FilterMspInit+0x1ec>)
    hdma_dfsdm1_flt3.Init.Request = DMA_REQUEST_DFSDM1_FLT3;
 8001566:	2268      	movs	r2, #104	; 0x68
    hdma_dfsdm1_flt3.Instance = DMA1_Stream6;
 8001568:	4924      	ldr	r1, [pc, #144]	; (80015fc <HAL_DFSDM_FilterMspInit+0x1f0>)
    hdma_dfsdm1_flt3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800156a:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_dfsdm1_flt3) != HAL_OK)
 800156c:	4628      	mov	r0, r5
    hdma_dfsdm1_flt3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800156e:	626b      	str	r3, [r5, #36]	; 0x24
    hdma_dfsdm1_flt3.Init.Request = DMA_REQUEST_DFSDM1_FLT3;
 8001570:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_dfsdm1_flt3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001574:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_dfsdm1_flt3.Init.MemInc = DMA_MINC_ENABLE;
 8001578:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_dfsdm1_flt3.Init.PeriphInc = DMA_PINC_DISABLE;
 800157c:	e9c5 3302 	strd	r3, r3, [r5, #8]
    hdma_dfsdm1_flt3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001580:	e9c5 1204 	strd	r1, r2, [r5, #16]
    hdma_dfsdm1_flt3.Init.Mode = DMA_CIRCULAR;
 8001584:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001588:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800158c:	e9c5 2306 	strd	r2, r3, [r5, #24]
    hdma_dfsdm1_flt3.Init.Priority = DMA_PRIORITY_HIGH;
 8001590:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001594:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt3) != HAL_OK)
 8001596:	f001 fcff 	bl	8002f98 <HAL_DMA_Init>
 800159a:	b968      	cbnz	r0, 80015b8 <HAL_DFSDM_FilterMspInit+0x1ac>
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt3);
 800159c:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
 80015a0:	63ac      	str	r4, [r5, #56]	; 0x38
}
 80015a2:	b033      	add	sp, #204	; 0xcc
 80015a4:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 80015a6:	f7ff fe63 	bl	8001270 <Error_Handler>
 80015aa:	e755      	b.n	8001458 <HAL_DFSDM_FilterMspInit+0x4c>
      Error_Handler();
 80015ac:	f7ff fe60 	bl	8001270 <Error_Handler>
 80015b0:	e789      	b.n	80014c6 <HAL_DFSDM_FilterMspInit+0xba>
      Error_Handler();
 80015b2:	f7ff fe5d 	bl	8001270 <Error_Handler>
 80015b6:	e7aa      	b.n	800150e <HAL_DFSDM_FilterMspInit+0x102>
      Error_Handler();
 80015b8:	f7ff fe5a 	bl	8001270 <Error_Handler>
 80015bc:	e7ee      	b.n	800159c <HAL_DFSDM_FilterMspInit+0x190>
      Error_Handler();
 80015be:	f7ff fe57 	bl	8001270 <Error_Handler>
 80015c2:	e7c7      	b.n	8001554 <HAL_DFSDM_FilterMspInit+0x148>
 80015c4:	20000918 	.word	0x20000918
 80015c8:	40017100 	.word	0x40017100
 80015cc:	40017180 	.word	0x40017180
 80015d0:	40017200 	.word	0x40017200
 80015d4:	40017280 	.word	0x40017280
 80015d8:	2000091c 	.word	0x2000091c
 80015dc:	58024400 	.word	0x58024400
 80015e0:	20000598 	.word	0x20000598
 80015e4:	40020058 	.word	0x40020058
 80015e8:	20000610 	.word	0x20000610
 80015ec:	40020070 	.word	0x40020070
 80015f0:	20000688 	.word	0x20000688
 80015f4:	40020088 	.word	0x40020088
 80015f8:	20000700 	.word	0x20000700
 80015fc:	400200a0 	.word	0x400200a0

08001600 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001600:	b510      	push	{r4, lr}
 8001602:	b0b2      	sub	sp, #200	; 0xc8
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
  if(DFSDM1_Init == 0)
 8001604:	4c16      	ldr	r4, [pc, #88]	; (8001660 <HAL_DFSDM_ChannelMspInit+0x60>)
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001606:	22c0      	movs	r2, #192	; 0xc0
 8001608:	2100      	movs	r1, #0
 800160a:	a802      	add	r0, sp, #8
 800160c:	f006 fedc 	bl	80083c8 <memset>
  if(DFSDM1_Init == 0)
 8001610:	6823      	ldr	r3, [r4, #0]
 8001612:	b10b      	cbz	r3, 8001618 <HAL_DFSDM_ChannelMspInit+0x18>

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
  }

}
 8001614:	b032      	add	sp, #200	; 0xc8
 8001616:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001618:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800161c:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800161e:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001620:	e9cd 2302 	strd	r2, r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001624:	f003 ff9a 	bl	800555c <HAL_RCCEx_PeriphCLKConfig>
 8001628:	b9b8      	cbnz	r0, 800165a <HAL_DFSDM_ChannelMspInit+0x5a>
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 800162a:	4a0e      	ldr	r2, [pc, #56]	; (8001664 <HAL_DFSDM_ChannelMspInit+0x64>)
 800162c:	6813      	ldr	r3, [r2, #0]
 800162e:	3301      	adds	r3, #1
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001630:	2b01      	cmp	r3, #1
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001632:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001634:	d10c      	bne.n	8001650 <HAL_DFSDM_ChannelMspInit+0x50>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001636:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <HAL_DFSDM_ChannelMspInit+0x68>)
 8001638:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800163c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001640:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8001644:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800164c:	9301      	str	r3, [sp, #4]
 800164e:	9b01      	ldr	r3, [sp, #4]
  DFSDM1_Init++;
 8001650:	6823      	ldr	r3, [r4, #0]
 8001652:	3301      	adds	r3, #1
 8001654:	6023      	str	r3, [r4, #0]
}
 8001656:	b032      	add	sp, #200	; 0xc8
 8001658:	bd10      	pop	{r4, pc}
      Error_Handler();
 800165a:	f7ff fe09 	bl	8001270 <Error_Handler>
 800165e:	e7e4      	b.n	800162a <HAL_DFSDM_ChannelMspInit+0x2a>
 8001660:	20000918 	.word	0x20000918
 8001664:	2000091c 	.word	0x2000091c
 8001668:	58024400 	.word	0x58024400
 800166c:	00000000 	.word	0x00000000

08001670 <HAL_LPTIM_MspInit>:
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hlptim->Instance==LPTIM1)
 8001670:	4a1b      	ldr	r2, [pc, #108]	; (80016e0 <HAL_LPTIM_MspInit+0x70>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001672:	2300      	movs	r3, #0
  if(hlptim->Instance==LPTIM1)
 8001674:	6801      	ldr	r1, [r0, #0]
{
 8001676:	b510      	push	{r4, lr}
  if(hlptim->Instance==LPTIM1)
 8001678:	4291      	cmp	r1, r2
{
 800167a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001680:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8001684:	9306      	str	r3, [sp, #24]
  if(hlptim->Instance==LPTIM1)
 8001686:	d001      	beq.n	800168c <HAL_LPTIM_MspInit+0x1c>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8001688:	b008      	add	sp, #32
 800168a:	bd10      	pop	{r4, pc}
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800168c:	4b15      	ldr	r3, [pc, #84]	; (80016e4 <HAL_LPTIM_MspInit+0x74>)
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 800168e:	2401      	movs	r4, #1
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001690:	a902      	add	r1, sp, #8
 8001692:	4815      	ldr	r0, [pc, #84]	; (80016e8 <HAL_LPTIM_MspInit+0x78>)
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8001694:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001698:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800169c:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80016a0:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80016a4:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80016a8:	9200      	str	r2, [sp, #0]
 80016aa:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016ac:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80016b0:	f042 0208 	orr.w	r2, r2, #8
 80016b4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80016b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 80016bc:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016be:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80016c2:	ed9f 7b05 	vldr	d7, [pc, #20]	; 80016d8 <HAL_LPTIM_MspInit+0x68>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016c6:	9301      	str	r3, [sp, #4]
 80016c8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80016ca:	ed8d 7b02 	vstr	d7, [sp, #8]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016ce:	f002 fe29 	bl	8004324 <HAL_GPIO_Init>
}
 80016d2:	b008      	add	sp, #32
 80016d4:	bd10      	pop	{r4, pc}
 80016d6:	bf00      	nop
 80016d8:	00002000 	.word	0x00002000
 80016dc:	00000002 	.word	0x00000002
 80016e0:	40002400 	.word	0x40002400
 80016e4:	58024400 	.word	0x58024400
 80016e8:	58020c00 	.word	0x58020c00

080016ec <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 80016ec:	4b0a      	ldr	r3, [pc, #40]	; (8001718 <HAL_TIM_Base_MspInit+0x2c>)
 80016ee:	6802      	ldr	r2, [r0, #0]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d000      	beq.n	80016f6 <HAL_TIM_Base_MspInit+0xa>
 80016f4:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016f6:	4b09      	ldr	r3, [pc, #36]	; (800171c <HAL_TIM_Base_MspInit+0x30>)
{
 80016f8:	b082      	sub	sp, #8
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016fa:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80016fe:	f042 0201 	orr.w	r2, r2, #1
 8001702:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8001706:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	9301      	str	r3, [sp, #4]
 8001710:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001712:	b002      	add	sp, #8
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	40010000 	.word	0x40010000
 800171c:	58024400 	.word	0x58024400

08001720 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001720:	b530      	push	{r4, r5, lr}
 8001722:	b0b9      	sub	sp, #228	; 0xe4
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001724:	2100      	movs	r1, #0
{
 8001726:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001728:	22c0      	movs	r2, #192	; 0xc0
 800172a:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172c:	9106      	str	r1, [sp, #24]
 800172e:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8001732:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001736:	f006 fe47 	bl	80083c8 <memset>
  if(huart->Instance==USART3)
 800173a:	4b2f      	ldr	r3, [pc, #188]	; (80017f8 <HAL_UART_MspInit+0xd8>)
 800173c:	6822      	ldr	r2, [r4, #0]
 800173e:	429a      	cmp	r2, r3
 8001740:	d001      	beq.n	8001746 <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001742:	b039      	add	sp, #228	; 0xe4
 8001744:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001746:	2202      	movs	r2, #2
 8001748:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800174a:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800174c:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001750:	f003 ff04 	bl	800555c <HAL_RCCEx_PeriphCLKConfig>
 8001754:	2800      	cmp	r0, #0
 8001756:	d148      	bne.n	80017ea <HAL_UART_MspInit+0xca>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001758:	4b28      	ldr	r3, [pc, #160]	; (80017fc <HAL_UART_MspInit+0xdc>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800175a:	2007      	movs	r0, #7
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800175c:	a902      	add	r1, sp, #8
    __HAL_RCC_USART3_CLK_ENABLE();
 800175e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001762:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001766:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 800176a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800176e:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8001772:	9200      	str	r2, [sp, #0]
 8001774:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001776:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800177a:	f042 0208 	orr.w	r2, r2, #8
 800177e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001782:	f44f 7240 	mov.w	r2, #768	; 0x300
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001786:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800178a:	9006      	str	r0, [sp, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800178c:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001790:	481b      	ldr	r0, [pc, #108]	; (8001800 <HAL_UART_MspInit+0xe0>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001792:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001794:	2302      	movs	r3, #2
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001796:	9d01      	ldr	r5, [sp, #4]
    hdma_usart3_tx.Instance = DMA1_Stream2;
 8001798:	4d1a      	ldr	r5, [pc, #104]	; (8001804 <HAL_UART_MspInit+0xe4>)
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800179a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800179e:	2200      	movs	r2, #0
 80017a0:	2300      	movs	r3, #0
 80017a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017a6:	f002 fdbd 	bl	8004324 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Stream2;
 80017aa:	4917      	ldr	r1, [pc, #92]	; (8001808 <HAL_UART_MspInit+0xe8>)
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80017ac:	222e      	movs	r2, #46	; 0x2e
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017ae:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80017b0:	4628      	mov	r0, r5
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017b2:	60eb      	str	r3, [r5, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017b4:	616b      	str	r3, [r5, #20]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80017b6:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017ba:	2140      	movs	r1, #64	; 0x40
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80017c0:	e9c5 3306 	strd	r3, r3, [r5, #24]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017c4:	60a9      	str	r1, [r5, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017c6:	612a      	str	r2, [r5, #16]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017c8:	e9c5 3308 	strd	r3, r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80017cc:	f001 fbe4 	bl	8002f98 <HAL_DMA_Init>
 80017d0:	b970      	cbnz	r0, 80017f0 <HAL_UART_MspInit+0xd0>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80017d2:	2200      	movs	r2, #0
 80017d4:	2027      	movs	r0, #39	; 0x27
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80017d6:	67e5      	str	r5, [r4, #124]	; 0x7c
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80017d8:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80017da:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80017dc:	f000 ff08 	bl	80025f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80017e0:	2027      	movs	r0, #39	; 0x27
 80017e2:	f000 ff43 	bl	800266c <HAL_NVIC_EnableIRQ>
}
 80017e6:	b039      	add	sp, #228	; 0xe4
 80017e8:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 80017ea:	f7ff fd41 	bl	8001270 <Error_Handler>
 80017ee:	e7b3      	b.n	8001758 <HAL_UART_MspInit+0x38>
      Error_Handler();
 80017f0:	f7ff fd3e 	bl	8001270 <Error_Handler>
 80017f4:	e7ed      	b.n	80017d2 <HAL_UART_MspInit+0xb2>
 80017f6:	bf00      	nop
 80017f8:	40004800 	.word	0x40004800
 80017fc:	58024400 	.word	0x58024400
 8001800:	58020c00 	.word	0x58020c00
 8001804:	20000778 	.word	0x20000778
 8001808:	40020040 	.word	0x40020040

0800180c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800180c:	e7fe      	b.n	800180c <NMI_Handler>
 800180e:	bf00      	nop

08001810 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001810:	e7fe      	b.n	8001810 <HardFault_Handler>
 8001812:	bf00      	nop

08001814 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001814:	e7fe      	b.n	8001814 <MemManage_Handler>
 8001816:	bf00      	nop

08001818 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001818:	e7fe      	b.n	8001818 <BusFault_Handler>
 800181a:	bf00      	nop

0800181c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800181c:	e7fe      	b.n	800181c <UsageFault_Handler>
 800181e:	bf00      	nop

08001820 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop

08001824 <DebugMon_Handler>:
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop

08001828 <PendSV_Handler>:
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop

0800182c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800182c:	f000 b91a 	b.w	8001a64 <HAL_IncTick>

08001830 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001830:	4801      	ldr	r0, [pc, #4]	; (8001838 <DMA1_Stream0_IRQHandler+0x8>)
 8001832:	f002 ba29 	b.w	8003c88 <HAL_DMA_IRQHandler>
 8001836:	bf00      	nop
 8001838:	200004a8 	.word	0x200004a8

0800183c <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 800183c:	4801      	ldr	r0, [pc, #4]	; (8001844 <DMA1_Stream1_IRQHandler+0x8>)
 800183e:	f002 ba23 	b.w	8003c88 <HAL_DMA_IRQHandler>
 8001842:	bf00      	nop
 8001844:	20000520 	.word	0x20000520

08001848 <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001848:	4801      	ldr	r0, [pc, #4]	; (8001850 <DMA1_Stream2_IRQHandler+0x8>)
 800184a:	f002 ba1d 	b.w	8003c88 <HAL_DMA_IRQHandler>
 800184e:	bf00      	nop
 8001850:	20000778 	.word	0x20000778

08001854 <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8001854:	4801      	ldr	r0, [pc, #4]	; (800185c <DMA1_Stream3_IRQHandler+0x8>)
 8001856:	f002 ba17 	b.w	8003c88 <HAL_DMA_IRQHandler>
 800185a:	bf00      	nop
 800185c:	20000598 	.word	0x20000598

08001860 <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt1);
 8001860:	4801      	ldr	r0, [pc, #4]	; (8001868 <DMA1_Stream4_IRQHandler+0x8>)
 8001862:	f002 ba11 	b.w	8003c88 <HAL_DMA_IRQHandler>
 8001866:	bf00      	nop
 8001868:	20000610 	.word	0x20000610

0800186c <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt2);
 800186c:	4801      	ldr	r0, [pc, #4]	; (8001874 <DMA1_Stream5_IRQHandler+0x8>)
 800186e:	f002 ba0b 	b.w	8003c88 <HAL_DMA_IRQHandler>
 8001872:	bf00      	nop
 8001874:	20000688 	.word	0x20000688

08001878 <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt3);
 8001878:	4801      	ldr	r0, [pc, #4]	; (8001880 <DMA1_Stream6_IRQHandler+0x8>)
 800187a:	f002 ba05 	b.w	8003c88 <HAL_DMA_IRQHandler>
 800187e:	bf00      	nop
 8001880:	20000700 	.word	0x20000700

08001884 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001884:	4801      	ldr	r0, [pc, #4]	; (800188c <USART3_IRQHandler+0x8>)
 8001886:	f005 ba91 	b.w	8006dac <HAL_UART_IRQHandler>
 800188a:	bf00      	nop
 800188c:	20000874 	.word	0x20000874

08001890 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001890:	4929      	ldr	r1, [pc, #164]	; (8001938 <SystemInit+0xa8>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001892:	4a2a      	ldr	r2, [pc, #168]	; (800193c <SystemInit+0xac>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001894:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001898:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 800189c:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800189e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80018a2:	6813      	ldr	r3, [r2, #0]
 80018a4:	f003 030f 	and.w	r3, r3, #15
 80018a8:	2b06      	cmp	r3, #6
 80018aa:	d805      	bhi.n	80018b8 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80018ac:	6813      	ldr	r3, [r2, #0]
 80018ae:	f023 030f 	bic.w	r3, r3, #15
 80018b2:	f043 0307 	orr.w	r3, r3, #7
 80018b6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80018b8:	4b21      	ldr	r3, [pc, #132]	; (8001940 <SystemInit+0xb0>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80018ba:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80018bc:	4a21      	ldr	r2, [pc, #132]	; (8001944 <SystemInit+0xb4>)
  RCC->CR |= RCC_CR_HSION;
 80018be:	6819      	ldr	r1, [r3, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80018c0:	481e      	ldr	r0, [pc, #120]	; (800193c <SystemInit+0xac>)
  RCC->CR |= RCC_CR_HSION;
 80018c2:	f041 0101 	orr.w	r1, r1, #1
 80018c6:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 80018c8:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 80018ca:	6819      	ldr	r1, [r3, #0]
 80018cc:	400a      	ands	r2, r1
 80018ce:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80018d0:	6803      	ldr	r3, [r0, #0]
 80018d2:	071b      	lsls	r3, r3, #28
 80018d4:	d505      	bpl.n	80018e2 <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80018d6:	6803      	ldr	r3, [r0, #0]
 80018d8:	f023 030f 	bic.w	r3, r3, #15
 80018dc:	f043 0307 	orr.w	r3, r3, #7
 80018e0:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80018e2:	4b17      	ldr	r3, [pc, #92]	; (8001940 <SystemInit+0xb0>)
 80018e4:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80018e6:	4918      	ldr	r1, [pc, #96]	; (8001948 <SystemInit+0xb8>)
  RCC->PLLCKSELR = 0x02020200;
 80018e8:	4c18      	ldr	r4, [pc, #96]	; (800194c <SystemInit+0xbc>)
  RCC->PLLCFGR = 0x01FF0000;
 80018ea:	4819      	ldr	r0, [pc, #100]	; (8001950 <SystemInit+0xc0>)
  RCC->D1CFGR = 0x00000000;
 80018ec:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 80018ee:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 80018f0:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 80018f2:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
 80018f4:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 80018f6:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80018f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80018fa:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80018fc:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80018fe:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001900:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001902:	6818      	ldr	r0, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001904:	4c13      	ldr	r4, [pc, #76]	; (8001954 <SystemInit+0xc4>)
  RCC->CR &= 0xFFFBFFFFU;
 8001906:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800190a:	4913      	ldr	r1, [pc, #76]	; (8001958 <SystemInit+0xc8>)
  RCC->CR &= 0xFFFBFFFFU;
 800190c:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 800190e:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001910:	6823      	ldr	r3, [r4, #0]
 8001912:	4019      	ands	r1, r3
 8001914:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8001918:	d203      	bcs.n	8001922 <SystemInit+0x92>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800191a:	4b10      	ldr	r3, [pc, #64]	; (800195c <SystemInit+0xcc>)
 800191c:	2201      	movs	r2, #1
 800191e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001922:	490f      	ldr	r1, [pc, #60]	; (8001960 <SystemInit+0xd0>)
 8001924:	f243 00d2 	movw	r0, #12498	; 0x30d2

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001928:	4b03      	ldr	r3, [pc, #12]	; (8001938 <SystemInit+0xa8>)
 800192a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800192e:	6008      	str	r0, [r1, #0]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001930:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001934:	609a      	str	r2, [r3, #8]
}
 8001936:	4770      	bx	lr
 8001938:	e000ed00 	.word	0xe000ed00
 800193c:	52002000 	.word	0x52002000
 8001940:	58024400 	.word	0x58024400
 8001944:	eaf6ed7f 	.word	0xeaf6ed7f
 8001948:	01010280 	.word	0x01010280
 800194c:	02020200 	.word	0x02020200
 8001950:	01ff0000 	.word	0x01ff0000
 8001954:	5c001000 	.word	0x5c001000
 8001958:	ffff0000 	.word	0xffff0000
 800195c:	51008000 	.word	0x51008000
 8001960:	52004000 	.word	0x52004000

08001964 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001964:	f8df d034 	ldr.w	sp, [pc, #52]	; 800199c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001968:	f7ff ff92 	bl	8001890 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800196c:	480c      	ldr	r0, [pc, #48]	; (80019a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800196e:	490d      	ldr	r1, [pc, #52]	; (80019a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001970:	4a0d      	ldr	r2, [pc, #52]	; (80019a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001972:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001974:	e002      	b.n	800197c <LoopCopyDataInit>

08001976 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001976:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001978:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800197a:	3304      	adds	r3, #4

0800197c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800197c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800197e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001980:	d3f9      	bcc.n	8001976 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001982:	4a0a      	ldr	r2, [pc, #40]	; (80019ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001984:	4c0a      	ldr	r4, [pc, #40]	; (80019b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001986:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001988:	e001      	b.n	800198e <LoopFillZerobss>

0800198a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800198a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800198c:	3204      	adds	r2, #4

0800198e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800198e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001990:	d3fb      	bcc.n	800198a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001992:	f006 fd27 	bl	80083e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001996:	f7fe ffb3 	bl	8000900 <main>
  bx  lr
 800199a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800199c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019a4:	200001c4 	.word	0x200001c4
  ldr r2, =_sidata
 80019a8:	08008528 	.word	0x08008528
  ldr r2, =_sbss
 80019ac:	200001c4 	.word	0x200001c4
  ldr r4, =_ebss
 80019b0:	20000a80 	.word	0x20000a80

080019b4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019b4:	e7fe      	b.n	80019b4 <ADC3_IRQHandler>
	...

080019b8 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80019b8:	4b0f      	ldr	r3, [pc, #60]	; (80019f8 <HAL_InitTick+0x40>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	b90b      	cbnz	r3, 80019c2 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 80019be:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80019c0:	4770      	bx	lr
{
 80019c2:	b510      	push	{r4, lr}
 80019c4:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80019c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019ca:	4a0c      	ldr	r2, [pc, #48]	; (80019fc <HAL_InitTick+0x44>)
 80019cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80019d0:	6810      	ldr	r0, [r2, #0]
 80019d2:	fbb0 f0f3 	udiv	r0, r0, r3
 80019d6:	f000 fe57 	bl	8002688 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019da:	2c0f      	cmp	r4, #15
 80019dc:	d800      	bhi.n	80019e0 <HAL_InitTick+0x28>
 80019de:	b108      	cbz	r0, 80019e4 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 80019e0:	2001      	movs	r0, #1
}
 80019e2:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019e4:	2200      	movs	r2, #0
 80019e6:	4621      	mov	r1, r4
 80019e8:	f04f 30ff 	mov.w	r0, #4294967295
 80019ec:	f000 fe00 	bl	80025f0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019f0:	4b03      	ldr	r3, [pc, #12]	; (8001a00 <HAL_InitTick+0x48>)
 80019f2:	2000      	movs	r0, #0
 80019f4:	601c      	str	r4, [r3, #0]
}
 80019f6:	bd10      	pop	{r4, pc}
 80019f8:	2000016c 	.word	0x2000016c
 80019fc:	20000164 	.word	0x20000164
 8001a00:	20000170 	.word	0x20000170

08001a04 <HAL_Init>:
{
 8001a04:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a06:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001a08:	4c12      	ldr	r4, [pc, #72]	; (8001a54 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a0a:	f000 fddf 	bl	80025cc <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001a0e:	f003 fa17 	bl	8004e40 <HAL_RCC_GetSysClockFreq>
 8001a12:	4b11      	ldr	r3, [pc, #68]	; (8001a58 <HAL_Init+0x54>)
 8001a14:	4911      	ldr	r1, [pc, #68]	; (8001a5c <HAL_Init+0x58>)
 8001a16:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001a18:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001a1a:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001a1e:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001a22:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001a24:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001a26:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
 8001a2a:	490d      	ldr	r1, [pc, #52]	; (8001a60 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001a2c:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001a30:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001a32:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 8001a36:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a38:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001a3a:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a3c:	f7ff ffbc 	bl	80019b8 <HAL_InitTick>
 8001a40:	b110      	cbz	r0, 8001a48 <HAL_Init+0x44>
    return HAL_ERROR;
 8001a42:	2401      	movs	r4, #1
}
 8001a44:	4620      	mov	r0, r4
 8001a46:	bd10      	pop	{r4, pc}
 8001a48:	4604      	mov	r4, r0
  HAL_MspInit();
 8001a4a:	f7ff fc13 	bl	8001274 <HAL_MspInit>
}
 8001a4e:	4620      	mov	r0, r4
 8001a50:	bd10      	pop	{r4, pc}
 8001a52:	bf00      	nop
 8001a54:	20000168 	.word	0x20000168
 8001a58:	58024400 	.word	0x58024400
 8001a5c:	0800849c 	.word	0x0800849c
 8001a60:	20000164 	.word	0x20000164

08001a64 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001a64:	4a03      	ldr	r2, [pc, #12]	; (8001a74 <HAL_IncTick+0x10>)
 8001a66:	4b04      	ldr	r3, [pc, #16]	; (8001a78 <HAL_IncTick+0x14>)
 8001a68:	6811      	ldr	r1, [r2, #0]
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	440b      	add	r3, r1
 8001a6e:	6013      	str	r3, [r2, #0]
}
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	20000920 	.word	0x20000920
 8001a78:	2000016c 	.word	0x2000016c

08001a7c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001a7c:	4b01      	ldr	r3, [pc, #4]	; (8001a84 <HAL_GetTick+0x8>)
 8001a7e:	6818      	ldr	r0, [r3, #0]
}
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	20000920 	.word	0x20000920

08001a88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a88:	b538      	push	{r3, r4, r5, lr}
 8001a8a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001a8c:	f7ff fff6 	bl	8001a7c <HAL_GetTick>
 8001a90:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a92:	1c63      	adds	r3, r4, #1
 8001a94:	d002      	beq.n	8001a9c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a96:	4b04      	ldr	r3, [pc, #16]	; (8001aa8 <HAL_Delay+0x20>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a9c:	f7ff ffee 	bl	8001a7c <HAL_GetTick>
 8001aa0:	1b43      	subs	r3, r0, r5
 8001aa2:	42a3      	cmp	r3, r4
 8001aa4:	d3fa      	bcc.n	8001a9c <HAL_Delay+0x14>
  {
  }
}
 8001aa6:	bd38      	pop	{r3, r4, r5, pc}
 8001aa8:	2000016c 	.word	0x2000016c

08001aac <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8001aac:	4b01      	ldr	r3, [pc, #4]	; (8001ab4 <HAL_GetREVID+0x8>)
 8001aae:	6818      	ldr	r0, [r3, #0]
}
 8001ab0:	0c00      	lsrs	r0, r0, #16
 8001ab2:	4770      	bx	lr
 8001ab4:	5c001000 	.word	0x5c001000

08001ab8 <ADC_DMAHalfConvCplt>:

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001ab8:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8001aba:	b508      	push	{r3, lr}
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001abc:	f7ff fb2e 	bl	800111c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ac0:	bd08      	pop	{r3, pc}
 8001ac2:	bf00      	nop

08001ac4 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ac4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001ac6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001ac8:	f012 0f50 	tst.w	r2, #80	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001acc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
{
 8001ace:	b510      	push	{r4, lr}
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001ad0:	d11d      	bne.n	8001b0e <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001ad2:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ad4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ad8:	655a      	str	r2, [r3, #84]	; 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001ada:	680a      	ldr	r2, [r1, #0]
 8001adc:	f012 0f08 	tst.w	r2, #8
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001ae0:	68ca      	ldr	r2, [r1, #12]
 8001ae2:	d01b      	beq.n	8001b1c <ADC_DMAConvCplt+0x58>
 8001ae4:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8001ae8:	d10d      	bne.n	8001b06 <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001aea:	68ca      	ldr	r2, [r1, #12]
 8001aec:	0494      	lsls	r4, r2, #18
 8001aee:	d40a      	bmi.n	8001b06 <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001af0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001af2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001af6:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001af8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001afa:	04d1      	lsls	r1, r2, #19
 8001afc:	d403      	bmi.n	8001b06 <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001afe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001b00:	f042 0201 	orr.w	r2, r2, #1
 8001b04:	655a      	str	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff fb0e 	bl	8001128 <HAL_ADC_ConvCpltCallback>
}
 8001b0c:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001b0e:	06d2      	lsls	r2, r2, #27
 8001b10:	d40a      	bmi.n	8001b28 <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001b12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001b14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b1a:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8001b1c:	0790      	lsls	r0, r2, #30
 8001b1e:	d0e7      	beq.n	8001af0 <ADC_DMAConvCplt+0x2c>
    HAL_ADC_ConvCpltCallback(hadc);
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff fb01 	bl	8001128 <HAL_ADC_ConvCpltCallback>
 8001b26:	e7f1      	b.n	8001b0c <ADC_DMAConvCplt+0x48>
      HAL_ADC_ErrorCallback(hadc);
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff fb03 	bl	8001134 <HAL_ADC_ErrorCallback>
}
 8001b2e:	bd10      	pop	{r4, pc}

08001b30 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001b30:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8001b32:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001b34:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001b36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b3a:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001b3c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8001b3e:	f043 0304 	orr.w	r3, r3, #4
 8001b42:	6583      	str	r3, [r0, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001b44:	f7ff faf6 	bl	8001134 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b48:	bd08      	pop	{r3, pc}
 8001b4a:	bf00      	nop

08001b4c <HAL_ADC_ConfigChannel>:
{
 8001b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0;
 8001b4e:	2200      	movs	r2, #0
{
 8001b50:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 8001b52:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8001b54:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 8001b58:	2a01      	cmp	r2, #1
 8001b5a:	f000 8136 	beq.w	8001dca <HAL_ADC_ConfigChannel+0x27e>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2001      	movs	r0, #1
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b62:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 8001b64:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b68:	6894      	ldr	r4, [r2, #8]
 8001b6a:	0766      	lsls	r6, r4, #29
 8001b6c:	f100 809a 	bmi.w	8001ca4 <HAL_ADC_ConfigChannel+0x158>
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001b70:	680c      	ldr	r4, [r1, #0]
 8001b72:	f3c4 0513 	ubfx	r5, r4, #0, #20
 8001b76:	2d00      	cmp	r5, #0
 8001b78:	f040 809d 	bne.w	8001cb6 <HAL_ADC_ConfigChannel+0x16a>
 8001b7c:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8001b80:	40a0      	lsls	r0, r4
 8001b82:	69d6      	ldr	r6, [r2, #28]
  MODIFY_REG(*preg,
 8001b84:	f04f 0e1f 	mov.w	lr, #31
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001b88:	684d      	ldr	r5, [r1, #4]
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001b8a:	4330      	orrs	r0, r6
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001b8c:	ea4f 1c95 	mov.w	ip, r5, lsr #6
 8001b90:	61d0      	str	r0, [r2, #28]
  MODIFY_REG(*preg,
 8001b92:	f005 001f 	and.w	r0, r5, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001b96:	f00c 050c 	and.w	r5, ip, #12
 8001b9a:	f102 0c30 	add.w	ip, r2, #48	; 0x30
  MODIFY_REG(*preg,
 8001b9e:	4084      	lsls	r4, r0
 8001ba0:	fa0e fe00 	lsl.w	lr, lr, r0
 8001ba4:	f85c 0005 	ldr.w	r0, [ip, r5]
 8001ba8:	ea20 000e 	bic.w	r0, r0, lr
 8001bac:	4320      	orrs	r0, r4
 8001bae:	f84c 0005 	str.w	r0, [ip, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001bb2:	6890      	ldr	r0, [r2, #8]
 8001bb4:	f010 0f04 	tst.w	r0, #4
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001bb8:	6890      	ldr	r0, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001bba:	d159      	bne.n	8001c70 <HAL_ADC_ConfigChannel+0x124>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001bbc:	0705      	lsls	r5, r0, #28
 8001bbe:	d457      	bmi.n	8001c70 <HAL_ADC_ConfigChannel+0x124>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001bc0:	680c      	ldr	r4, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001bc2:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
 8001bc6:	f04f 0c07 	mov.w	ip, #7
 8001bca:	688f      	ldr	r7, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001bcc:	0de5      	lsrs	r5, r4, #23
  MODIFY_REG(*preg,
 8001bce:	f3c4 5404 	ubfx	r4, r4, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001bd2:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 8001bd6:	fa0c fc04 	lsl.w	ip, ip, r4
 8001bda:	fa07 f404 	lsl.w	r4, r7, r4
 8001bde:	5970      	ldr	r0, [r6, r5]
 8001be0:	ea20 000c 	bic.w	r0, r0, ip
 8001be4:	4320      	orrs	r0, r4
 8001be6:	5170      	str	r0, [r6, r5]
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001be8:	48bd      	ldr	r0, [pc, #756]	; (8001ee0 <HAL_ADC_ConfigChannel+0x394>)
 8001bea:	6800      	ldr	r0, [r0, #0]
 8001bec:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 8001bf0:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 8001bf4:	68d0      	ldr	r0, [r2, #12]
 8001bf6:	f000 80e2 	beq.w	8001dbe <HAL_ADC_ConfigChannel+0x272>
 8001bfa:	f010 0f10 	tst.w	r0, #16
 8001bfe:	694d      	ldr	r5, [r1, #20]
 8001c00:	68d0      	ldr	r0, [r2, #12]
 8001c02:	f040 8102 	bne.w	8001e0a <HAL_ADC_ConfigChannel+0x2be>
 8001c06:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8001c0a:	0040      	lsls	r0, r0, #1
 8001c0c:	4085      	lsls	r5, r0
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001c0e:	690e      	ldr	r6, [r1, #16]
 8001c10:	2e04      	cmp	r6, #4
 8001c12:	f000 80dd 	beq.w	8001dd0 <HAL_ADC_ConfigChannel+0x284>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c16:	f102 0460 	add.w	r4, r2, #96	; 0x60
    MODIFY_REG(*preg,
 8001c1a:	6808      	ldr	r0, [r1, #0]
 8001c1c:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
 8001c20:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8001c24:	f007 4c00 	and.w	ip, r7, #2147483648	; 0x80000000
 8001c28:	ea40 000c 	orr.w	r0, r0, ip
 8001c2c:	4328      	orrs	r0, r5
 8001c2e:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001c32:	7e4d      	ldrb	r5, [r1, #25]
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c34:	690e      	ldr	r6, [r1, #16]
 8001c36:	f1a5 0501 	sub.w	r5, r5, #1
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001c3a:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8001c3e:	fab5 f585 	clz	r5, r5
 8001c42:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001c46:	096d      	lsrs	r5, r5, #5
 8001c48:	ea40 70c5 	orr.w	r0, r0, r5, lsl #31
 8001c4c:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001c50:	7e08      	ldrb	r0, [r1, #24]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001c52:	690d      	ldr	r5, [r1, #16]
 8001c54:	f1a0 0001 	sub.w	r0, r0, #1
 8001c58:	6914      	ldr	r4, [r2, #16]
 8001c5a:	f005 051f 	and.w	r5, r5, #31
 8001c5e:	fab0 f080 	clz	r0, r0
 8001c62:	f424 44f0 	bic.w	r4, r4, #30720	; 0x7800
 8001c66:	0940      	lsrs	r0, r0, #5
 8001c68:	02c0      	lsls	r0, r0, #11
 8001c6a:	40a8      	lsls	r0, r5
 8001c6c:	4320      	orrs	r0, r4
 8001c6e:	6110      	str	r0, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c70:	6890      	ldr	r0, [r2, #8]
 8001c72:	07c4      	lsls	r4, r0, #31
 8001c74:	d414      	bmi.n	8001ca0 <HAL_ADC_ConfigChannel+0x154>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001c76:	68ce      	ldr	r6, [r1, #12]
 8001c78:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(ADCx->DIFSEL,
 8001c7a:	f006 0718 	and.w	r7, r6, #24
 8001c7e:	4899      	ldr	r0, [pc, #612]	; (8001ee4 <HAL_ADC_ConfigChannel+0x398>)
 8001c80:	f8d2 50c0 	ldr.w	r5, [r2, #192]	; 0xc0
 8001c84:	40f8      	lsrs	r0, r7
 8001c86:	f3c4 0713 	ubfx	r7, r4, #0, #20
 8001c8a:	4020      	ands	r0, r4
 8001c8c:	ea25 0507 	bic.w	r5, r5, r7
 8001c90:	4328      	orrs	r0, r5
 8001c92:	f8c2 00c0 	str.w	r0, [r2, #192]	; 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001c96:	4894      	ldr	r0, [pc, #592]	; (8001ee8 <HAL_ADC_ConfigChannel+0x39c>)
 8001c98:	4286      	cmp	r6, r0
 8001c9a:	d043      	beq.n	8001d24 <HAL_ADC_ConfigChannel+0x1d8>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001c9c:	2c00      	cmp	r4, #0
 8001c9e:	db13      	blt.n	8001cc8 <HAL_ADC_ConfigChannel+0x17c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ca0:	2000      	movs	r0, #0
 8001ca2:	e003      	b.n	8001cac <HAL_ADC_ConfigChannel+0x160>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ca4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001ca6:	f042 0220 	orr.w	r2, r2, #32
 8001caa:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8001cac:	2200      	movs	r2, #0
 8001cae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8001cb2:	b003      	add	sp, #12
 8001cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb6:	fa94 f5a4 	rbit	r5, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001cba:	b115      	cbz	r5, 8001cc2 <HAL_ADC_ConfigChannel+0x176>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8001cbc:	fab5 f585 	clz	r5, r5
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001cc0:	40a8      	lsls	r0, r5
 8001cc2:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8001cc6:	e75c      	b.n	8001b82 <HAL_ADC_ConfigChannel+0x36>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001cc8:	4988      	ldr	r1, [pc, #544]	; (8001eec <HAL_ADC_ConfigChannel+0x3a0>)
 8001cca:	428a      	cmp	r2, r1
 8001ccc:	f000 80c1 	beq.w	8001e52 <HAL_ADC_ConfigChannel+0x306>
 8001cd0:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8001cd4:	428a      	cmp	r2, r1
 8001cd6:	f000 80bc 	beq.w	8001e52 <HAL_ADC_ConfigChannel+0x306>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001cda:	4d85      	ldr	r5, [pc, #532]	; (8001ef0 <HAL_ADC_ConfigChannel+0x3a4>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001cdc:	4885      	ldr	r0, [pc, #532]	; (8001ef4 <HAL_ADC_ConfigChannel+0x3a8>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001cde:	68a9      	ldr	r1, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ce0:	6880      	ldr	r0, [r0, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001ce2:	f001 76e0 	and.w	r6, r1, #29360128	; 0x1c00000
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ce6:	43c0      	mvns	r0, r0
 8001ce8:	f000 0001 	and.w	r0, r0, #1
 8001cec:	2800      	cmp	r0, #0
 8001cee:	f000 80bf 	beq.w	8001e70 <HAL_ADC_ConfigChannel+0x324>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001cf2:	4881      	ldr	r0, [pc, #516]	; (8001ef8 <HAL_ADC_ConfigChannel+0x3ac>)
 8001cf4:	4284      	cmp	r4, r0
 8001cf6:	f000 8107 	beq.w	8001f08 <HAL_ADC_ConfigChannel+0x3bc>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001cfa:	4880      	ldr	r0, [pc, #512]	; (8001efc <HAL_ADC_ConfigChannel+0x3b0>)
 8001cfc:	4284      	cmp	r4, r0
 8001cfe:	f000 8126 	beq.w	8001f4e <HAL_ADC_ConfigChannel+0x402>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001d02:	487f      	ldr	r0, [pc, #508]	; (8001f00 <HAL_ADC_ConfigChannel+0x3b4>)
 8001d04:	4284      	cmp	r4, r0
 8001d06:	d1cb      	bne.n	8001ca0 <HAL_ADC_ConfigChannel+0x154>
            if (ADC_VREFINT_INSTANCE(hadc))
 8001d08:	0249      	lsls	r1, r1, #9
 8001d0a:	d4c9      	bmi.n	8001ca0 <HAL_ADC_ConfigChannel+0x154>
 8001d0c:	4979      	ldr	r1, [pc, #484]	; (8001ef4 <HAL_ADC_ConfigChannel+0x3a8>)
 8001d0e:	428a      	cmp	r2, r1
 8001d10:	d1c6      	bne.n	8001ca0 <HAL_ADC_ConfigChannel+0x154>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001d12:	68aa      	ldr	r2, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d14:	2000      	movs	r0, #0
 8001d16:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8001d1a:	4332      	orrs	r2, r6
 8001d1c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001d20:	60aa      	str	r2, [r5, #8]
}
 8001d22:	e7c3      	b.n	8001cac <HAL_ADC_ConfigChannel+0x160>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d24:	2f00      	cmp	r7, #0
 8001d26:	d075      	beq.n	8001e14 <HAL_ADC_ConfigChannel+0x2c8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d28:	fa94 f0a4 	rbit	r0, r4
  if (value == 0U)
 8001d2c:	2800      	cmp	r0, #0
 8001d2e:	f000 80b3 	beq.w	8001e98 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8001d32:	fab0 f080 	clz	r0, r0
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d36:	3001      	adds	r0, #1
 8001d38:	f000 001f 	and.w	r0, r0, #31
 8001d3c:	2809      	cmp	r0, #9
 8001d3e:	f240 80ab 	bls.w	8001e98 <HAL_ADC_ConfigChannel+0x34c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d42:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8001d46:	2d00      	cmp	r5, #0
 8001d48:	f000 8115 	beq.w	8001f76 <HAL_ADC_ConfigChannel+0x42a>
  return __builtin_clz(value);
 8001d4c:	fab5 f585 	clz	r5, r5
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d50:	3501      	adds	r5, #1
 8001d52:	06ad      	lsls	r5, r5, #26
 8001d54:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d58:	fa94 f0a4 	rbit	r0, r4
  if (value == 0U)
 8001d5c:	2800      	cmp	r0, #0
 8001d5e:	f000 8108 	beq.w	8001f72 <HAL_ADC_ConfigChannel+0x426>
  return __builtin_clz(value);
 8001d62:	fab0 f080 	clz	r0, r0
 8001d66:	2601      	movs	r6, #1
 8001d68:	3001      	adds	r0, #1
 8001d6a:	f000 001f 	and.w	r0, r0, #31
 8001d6e:	fa06 f000 	lsl.w	r0, r6, r0
 8001d72:	4305      	orrs	r5, r0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d74:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 8001d78:	2c00      	cmp	r4, #0
 8001d7a:	f000 80f8 	beq.w	8001f6e <HAL_ADC_ConfigChannel+0x422>
  return __builtin_clz(value);
 8001d7e:	fab4 f484 	clz	r4, r4
 8001d82:	2003      	movs	r0, #3
 8001d84:	f06f 061d 	mvn.w	r6, #29
 8001d88:	3401      	adds	r4, #1
 8001d8a:	f004 041f 	and.w	r4, r4, #31
 8001d8e:	fb10 6004 	smlabb	r0, r0, r4, r6
 8001d92:	0500      	lsls	r0, r0, #20
 8001d94:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d98:	4328      	orrs	r0, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001d9a:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
 8001d9e:	2707      	movs	r7, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001da0:	0dc5      	lsrs	r5, r0, #23
  MODIFY_REG(*preg,
 8001da2:	f3c0 5004 	ubfx	r0, r0, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001da6:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 8001daa:	4087      	lsls	r7, r0
 8001dac:	5974      	ldr	r4, [r6, r5]
 8001dae:	ea24 0407 	bic.w	r4, r4, r7
 8001db2:	688f      	ldr	r7, [r1, #8]
 8001db4:	4087      	lsls	r7, r0
 8001db6:	433c      	orrs	r4, r7
 8001db8:	5174      	str	r4, [r6, r5]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001dba:	680c      	ldr	r4, [r1, #0]
}
 8001dbc:	e76e      	b.n	8001c9c <HAL_ADC_ConfigChannel+0x150>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001dbe:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8001dc2:	694d      	ldr	r5, [r1, #20]
 8001dc4:	0040      	lsls	r0, r0, #1
 8001dc6:	4085      	lsls	r5, r0
 8001dc8:	e721      	b.n	8001c0e <HAL_ADC_ConfigChannel+0xc2>
  __HAL_LOCK(hadc);
 8001dca:	2002      	movs	r0, #2
}
 8001dcc:	b003      	add	sp, #12
 8001dce:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001dd0:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8001dd2:	680c      	ldr	r4, [r1, #0]
 8001dd4:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8001dd8:	06a5      	lsls	r5, r4, #26
 8001dda:	ebb0 6f84 	cmp.w	r0, r4, lsl #26
 8001dde:	d02e      	beq.n	8001e3e <HAL_ADC_ConfigChannel+0x2f2>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001de0:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8001de2:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8001de6:	4285      	cmp	r5, r0
 8001de8:	d024      	beq.n	8001e34 <HAL_ADC_ConfigChannel+0x2e8>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001dea:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8001dec:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8001df0:	4285      	cmp	r5, r0
 8001df2:	d029      	beq.n	8001e48 <HAL_ADC_ConfigChannel+0x2fc>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001df4:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8001df6:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8001dfa:	4285      	cmp	r5, r0
 8001dfc:	f47f af38 	bne.w	8001c70 <HAL_ADC_ConfigChannel+0x124>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001e00:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8001e02:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001e06:	66d0      	str	r0, [r2, #108]	; 0x6c
 8001e08:	e732      	b.n	8001c70 <HAL_ADC_ConfigChannel+0x124>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001e0a:	0840      	lsrs	r0, r0, #1
 8001e0c:	f000 0008 	and.w	r0, r0, #8
 8001e10:	4085      	lsls	r5, r0
 8001e12:	e6fc      	b.n	8001c0e <HAL_ADC_ConfigChannel+0xc2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e14:	0ea0      	lsrs	r0, r4, #26
 8001e16:	3001      	adds	r0, #1
 8001e18:	f000 041f 	and.w	r4, r0, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e1c:	2c09      	cmp	r4, #9
 8001e1e:	d82d      	bhi.n	8001e7c <HAL_ADC_ConfigChannel+0x330>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e20:	0685      	lsls	r5, r0, #26
 8001e22:	2001      	movs	r0, #1
 8001e24:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8001e28:	40a0      	lsls	r0, r4
 8001e2a:	4305      	orrs	r5, r0
 8001e2c:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 8001e30:	0500      	lsls	r0, r0, #20
 8001e32:	e7b1      	b.n	8001d98 <HAL_ADC_ConfigChannel+0x24c>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001e34:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8001e36:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001e3a:	6650      	str	r0, [r2, #100]	; 0x64
 8001e3c:	e7d5      	b.n	8001dea <HAL_ADC_ConfigChannel+0x29e>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001e3e:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8001e40:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001e44:	6610      	str	r0, [r2, #96]	; 0x60
 8001e46:	e7cb      	b.n	8001de0 <HAL_ADC_ConfigChannel+0x294>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001e48:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8001e4a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001e4e:	6690      	str	r0, [r2, #104]	; 0x68
 8001e50:	e7d0      	b.n	8001df4 <HAL_ADC_ConfigChannel+0x2a8>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e52:	4826      	ldr	r0, [pc, #152]	; (8001eec <HAL_ADC_ConfigChannel+0x3a0>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001e54:	4d2b      	ldr	r5, [pc, #172]	; (8001f04 <HAL_ADC_ConfigChannel+0x3b8>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e56:	f500 7080 	add.w	r0, r0, #256	; 0x100
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001e5a:	68a9      	ldr	r1, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e5c:	f850 6cf8 	ldr.w	r6, [r0, #-248]
 8001e60:	6880      	ldr	r0, [r0, #8]
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e62:	4330      	orrs	r0, r6
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001e64:	f001 76e0 	and.w	r6, r1, #29360128	; 0x1c00000
 8001e68:	43c0      	mvns	r0, r0
 8001e6a:	f000 0001 	and.w	r0, r0, #1
 8001e6e:	e73d      	b.n	8001cec <HAL_ADC_ConfigChannel+0x1a0>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8001e72:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e74:	f042 0220 	orr.w	r2, r2, #32
 8001e78:	655a      	str	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8001e7a:	e717      	b.n	8001cac <HAL_ADC_ConfigChannel+0x160>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e7c:	0685      	lsls	r5, r0, #26
 8001e7e:	2601      	movs	r6, #1
 8001e80:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 8001e84:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8001e88:	fa06 f404 	lsl.w	r4, r6, r4
 8001e8c:	381e      	subs	r0, #30
 8001e8e:	4325      	orrs	r5, r4
 8001e90:	0500      	lsls	r0, r0, #20
 8001e92:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 8001e96:	e77f      	b.n	8001d98 <HAL_ADC_ConfigChannel+0x24c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e98:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8001e9c:	2d00      	cmp	r5, #0
 8001e9e:	d072      	beq.n	8001f86 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8001ea0:	fab5 f585 	clz	r5, r5
 8001ea4:	3501      	adds	r5, #1
 8001ea6:	06ad      	lsls	r5, r5, #26
 8001ea8:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eac:	fa94 f0a4 	rbit	r0, r4
  if (value == 0U)
 8001eb0:	2800      	cmp	r0, #0
 8001eb2:	d066      	beq.n	8001f82 <HAL_ADC_ConfigChannel+0x436>
  return __builtin_clz(value);
 8001eb4:	fab0 f080 	clz	r0, r0
 8001eb8:	2601      	movs	r6, #1
 8001eba:	3001      	adds	r0, #1
 8001ebc:	f000 001f 	and.w	r0, r0, #31
 8001ec0:	fa06 f000 	lsl.w	r0, r6, r0
 8001ec4:	4305      	orrs	r5, r0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec6:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 8001eca:	2c00      	cmp	r4, #0
 8001ecc:	d056      	beq.n	8001f7c <HAL_ADC_ConfigChannel+0x430>
  return __builtin_clz(value);
 8001ece:	fab4 f084 	clz	r0, r4
 8001ed2:	3001      	adds	r0, #1
 8001ed4:	f000 001f 	and.w	r0, r0, #31
 8001ed8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001edc:	0500      	lsls	r0, r0, #20
 8001ede:	e75b      	b.n	8001d98 <HAL_ADC_ConfigChannel+0x24c>
 8001ee0:	5c001000 	.word	0x5c001000
 8001ee4:	000fffff 	.word	0x000fffff
 8001ee8:	47ff0000 	.word	0x47ff0000
 8001eec:	40022000 	.word	0x40022000
 8001ef0:	58026300 	.word	0x58026300
 8001ef4:	58026000 	.word	0x58026000
 8001ef8:	cb840000 	.word	0xcb840000
 8001efc:	c7520000 	.word	0xc7520000
 8001f00:	cfb80000 	.word	0xcfb80000
 8001f04:	40022300 	.word	0x40022300
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001f08:	0208      	lsls	r0, r1, #8
 8001f0a:	f53f aec9 	bmi.w	8001ca0 <HAL_ADC_ConfigChannel+0x154>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f0e:	491f      	ldr	r1, [pc, #124]	; (8001f8c <HAL_ADC_ConfigChannel+0x440>)
 8001f10:	428a      	cmp	r2, r1
 8001f12:	f47f aec5 	bne.w	8001ca0 <HAL_ADC_ConfigChannel+0x154>
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f16:	4a1e      	ldr	r2, [pc, #120]	; (8001f90 <HAL_ADC_ConfigChannel+0x444>)
 8001f18:	481e      	ldr	r0, [pc, #120]	; (8001f94 <HAL_ADC_ConfigChannel+0x448>)
 8001f1a:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001f1c:	68a9      	ldr	r1, [r5, #8]
 8001f1e:	0992      	lsrs	r2, r2, #6
 8001f20:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8001f24:	fba0 0202 	umull	r0, r2, r0, r2
 8001f28:	4331      	orrs	r1, r6
 8001f2a:	0992      	lsrs	r2, r2, #6
 8001f2c:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8001f30:	3201      	adds	r2, #1
 8001f32:	60a9      	str	r1, [r5, #8]
 8001f34:	0052      	lsls	r2, r2, #1
 8001f36:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8001f38:	9a01      	ldr	r2, [sp, #4]
 8001f3a:	2a00      	cmp	r2, #0
 8001f3c:	f43f aeb0 	beq.w	8001ca0 <HAL_ADC_ConfigChannel+0x154>
                wait_loop_index--;
 8001f40:	9a01      	ldr	r2, [sp, #4]
 8001f42:	3a01      	subs	r2, #1
 8001f44:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8001f46:	9a01      	ldr	r2, [sp, #4]
 8001f48:	2a00      	cmp	r2, #0
 8001f4a:	d1f9      	bne.n	8001f40 <HAL_ADC_ConfigChannel+0x3f4>
 8001f4c:	e6a8      	b.n	8001ca0 <HAL_ADC_ConfigChannel+0x154>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001f4e:	f011 7080 	ands.w	r0, r1, #16777216	; 0x1000000
 8001f52:	f47f aea5 	bne.w	8001ca0 <HAL_ADC_ConfigChannel+0x154>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f56:	490d      	ldr	r1, [pc, #52]	; (8001f8c <HAL_ADC_ConfigChannel+0x440>)
 8001f58:	428a      	cmp	r2, r1
 8001f5a:	f47f aea1 	bne.w	8001ca0 <HAL_ADC_ConfigChannel+0x154>
 8001f5e:	68aa      	ldr	r2, [r5, #8]
 8001f60:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8001f64:	4332      	orrs	r2, r6
 8001f66:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001f6a:	60aa      	str	r2, [r5, #8]
}
 8001f6c:	e69e      	b.n	8001cac <HAL_ADC_ConfigChannel+0x160>
 8001f6e:	480a      	ldr	r0, [pc, #40]	; (8001f98 <HAL_ADC_ConfigChannel+0x44c>)
 8001f70:	e712      	b.n	8001d98 <HAL_ADC_ConfigChannel+0x24c>
 8001f72:	2002      	movs	r0, #2
 8001f74:	e6fd      	b.n	8001d72 <HAL_ADC_ConfigChannel+0x226>
 8001f76:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8001f7a:	e6ed      	b.n	8001d58 <HAL_ADC_ConfigChannel+0x20c>
 8001f7c:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8001f80:	e70a      	b.n	8001d98 <HAL_ADC_ConfigChannel+0x24c>
 8001f82:	2002      	movs	r0, #2
 8001f84:	e79e      	b.n	8001ec4 <HAL_ADC_ConfigChannel+0x378>
 8001f86:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8001f8a:	e78f      	b.n	8001eac <HAL_ADC_ConfigChannel+0x360>
 8001f8c:	58026000 	.word	0x58026000
 8001f90:	20000164 	.word	0x20000164
 8001f94:	053e2d63 	.word	0x053e2d63
 8001f98:	fe500000 	.word	0xfe500000

08001f9c <ADC_Enable>:
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f9c:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f9e:	689a      	ldr	r2, [r3, #8]
 8001fa0:	07d1      	lsls	r1, r2, #31
 8001fa2:	d501      	bpl.n	8001fa8 <ADC_Enable+0xc>
  return HAL_OK;
 8001fa4:	2000      	movs	r0, #0
}
 8001fa6:	4770      	bx	lr
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001fa8:	6899      	ldr	r1, [r3, #8]
 8001faa:	4a21      	ldr	r2, [pc, #132]	; (8002030 <ADC_Enable+0x94>)
 8001fac:	4211      	tst	r1, r2
{
 8001fae:	b570      	push	{r4, r5, r6, lr}
 8001fb0:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001fb2:	d12c      	bne.n	800200e <ADC_Enable+0x72>
  MODIFY_REG(ADCx->CR,
 8001fb4:	6899      	ldr	r1, [r3, #8]
 8001fb6:	4a1f      	ldr	r2, [pc, #124]	; (8002034 <ADC_Enable+0x98>)
 8001fb8:	400a      	ands	r2, r1
 8001fba:	f042 0201 	orr.w	r2, r2, #1
 8001fbe:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001fc0:	f7ff fd5c 	bl	8001a7c <HAL_GetTick>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001fc4:	6823      	ldr	r3, [r4, #0]
 8001fc6:	4a1c      	ldr	r2, [pc, #112]	; (8002038 <ADC_Enable+0x9c>)
    tickstart = HAL_GetTick();
 8001fc8:	4605      	mov	r5, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d028      	beq.n	8002020 <ADC_Enable+0x84>
 8001fce:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d024      	beq.n	8002020 <ADC_Enable+0x84>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001fd6:	4a19      	ldr	r2, [pc, #100]	; (800203c <ADC_Enable+0xa0>)
 8001fd8:	6892      	ldr	r2, [r2, #8]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	07d6      	lsls	r6, r2, #31
 8001fde:	d414      	bmi.n	800200a <ADC_Enable+0x6e>
  MODIFY_REG(ADCx->CR,
 8001fe0:	4e14      	ldr	r6, [pc, #80]	; (8002034 <ADC_Enable+0x98>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001fe2:	689a      	ldr	r2, [r3, #8]
 8001fe4:	07d0      	lsls	r0, r2, #31
 8001fe6:	d404      	bmi.n	8001ff2 <ADC_Enable+0x56>
  MODIFY_REG(ADCx->CR,
 8001fe8:	689a      	ldr	r2, [r3, #8]
 8001fea:	4032      	ands	r2, r6
 8001fec:	f042 0201 	orr.w	r2, r2, #1
 8001ff0:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001ff2:	f7ff fd43 	bl	8001a7c <HAL_GetTick>
 8001ff6:	1b43      	subs	r3, r0, r5
 8001ff8:	2b02      	cmp	r3, #2
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001ffa:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001ffc:	d902      	bls.n	8002004 <ADC_Enable+0x68>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	07d1      	lsls	r1, r2, #31
 8002002:	d504      	bpl.n	800200e <ADC_Enable+0x72>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	07d2      	lsls	r2, r2, #31
 8002008:	d5eb      	bpl.n	8001fe2 <ADC_Enable+0x46>
  return HAL_OK;
 800200a:	2000      	movs	r0, #0
}
 800200c:	bd70      	pop	{r4, r5, r6, pc}
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800200e:	6d63      	ldr	r3, [r4, #84]	; 0x54
            return HAL_ERROR;
 8002010:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002012:	f043 0310 	orr.w	r3, r3, #16
 8002016:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002018:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800201a:	4303      	orrs	r3, r0
 800201c:	65a3      	str	r3, [r4, #88]	; 0x58
}
 800201e:	bd70      	pop	{r4, r5, r6, pc}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002020:	4a07      	ldr	r2, [pc, #28]	; (8002040 <ADC_Enable+0xa4>)
 8002022:	6892      	ldr	r2, [r2, #8]
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002024:	06d2      	lsls	r2, r2, #27
 8002026:	d0d8      	beq.n	8001fda <ADC_Enable+0x3e>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002028:	4a06      	ldr	r2, [pc, #24]	; (8002044 <ADC_Enable+0xa8>)
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800202a:	4293      	cmp	r3, r2
 800202c:	d1d5      	bne.n	8001fda <ADC_Enable+0x3e>
 800202e:	e7ec      	b.n	800200a <ADC_Enable+0x6e>
 8002030:	8000003f 	.word	0x8000003f
 8002034:	7fffffc0 	.word	0x7fffffc0
 8002038:	40022000 	.word	0x40022000
 800203c:	58026300 	.word	0x58026300
 8002040:	40022300 	.word	0x40022300
 8002044:	40022100 	.word	0x40022100

08002048 <HAL_ADC_Start_DMA>:
{
 8002048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800204c:	4b3c      	ldr	r3, [pc, #240]	; (8002140 <HAL_ADC_Start_DMA+0xf8>)
{
 800204e:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002050:	6800      	ldr	r0, [r0, #0]
{
 8002052:	460e      	mov	r6, r1
 8002054:	4617      	mov	r7, r2
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002056:	4298      	cmp	r0, r3
 8002058:	d05f      	beq.n	800211a <HAL_ADC_Start_DMA+0xd2>
 800205a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800205e:	4298      	cmp	r0, r3
 8002060:	d05b      	beq.n	800211a <HAL_ADC_Start_DMA+0xd2>
 8002062:	4b38      	ldr	r3, [pc, #224]	; (8002144 <HAL_ADC_Start_DMA+0xfc>)
 8002064:	689b      	ldr	r3, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002066:	6885      	ldr	r5, [r0, #8]
 8002068:	f015 0504 	ands.w	r5, r5, #4
 800206c:	d15b      	bne.n	8002126 <HAL_ADC_Start_DMA+0xde>
    __HAL_LOCK(hadc);
 800206e:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 8002072:	2a01      	cmp	r2, #1
 8002074:	d057      	beq.n	8002126 <HAL_ADC_Start_DMA+0xde>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002076:	f003 081f 	and.w	r8, r3, #31
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800207a:	f240 2321 	movw	r3, #545	; 0x221
    __HAL_LOCK(hadc);
 800207e:	2001      	movs	r0, #1
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002080:	fa23 f308 	lsr.w	r3, r3, r8
    __HAL_LOCK(hadc);
 8002084:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002088:	4003      	ands	r3, r0
 800208a:	d053      	beq.n	8002134 <HAL_ADC_Start_DMA+0xec>
      tmp_hal_status = ADC_Enable(hadc);
 800208c:	4620      	mov	r0, r4
 800208e:	f7ff ff85 	bl	8001f9c <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8002092:	2800      	cmp	r0, #0
 8002094:	d14a      	bne.n	800212c <HAL_ADC_Start_DMA+0xe4>
        ADC_STATE_CLR_SET(hadc->State,
 8002096:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002098:	4b2b      	ldr	r3, [pc, #172]	; (8002148 <HAL_ADC_Start_DMA+0x100>)
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800209a:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 800209c:	4013      	ands	r3, r2
 800209e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020a2:	6563      	str	r3, [r4, #84]	; 0x54
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020a4:	f1b8 0f00 	cmp.w	r8, #0
 80020a8:	d002      	beq.n	80020b0 <HAL_ADC_Start_DMA+0x68>
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80020aa:	4b28      	ldr	r3, [pc, #160]	; (800214c <HAL_ADC_Start_DMA+0x104>)
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020ac:	4299      	cmp	r1, r3
 80020ae:	d003      	beq.n	80020b8 <HAL_ADC_Start_DMA+0x70>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020b0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80020b2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80020b6:	6563      	str	r3, [r4, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80020b8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80020ba:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 80020be:	d03d      	beq.n	800213c <HAL_ADC_Start_DMA+0xf4>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80020c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80020c2:	f023 0306 	bic.w	r3, r3, #6
 80020c6:	65a3      	str	r3, [r4, #88]	; 0x58
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80020c8:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80020ca:	4632      	mov	r2, r6
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80020cc:	4d20      	ldr	r5, [pc, #128]	; (8002150 <HAL_ADC_Start_DMA+0x108>)
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80020ce:	463b      	mov	r3, r7
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80020d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80020d2:	3140      	adds	r1, #64	; 0x40
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80020d4:	63c5      	str	r5, [r0, #60]	; 0x3c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80020d6:	4d1f      	ldr	r5, [pc, #124]	; (8002154 <HAL_ADC_Start_DMA+0x10c>)
 80020d8:	6405      	str	r5, [r0, #64]	; 0x40
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80020da:	4d1f      	ldr	r5, [pc, #124]	; (8002158 <HAL_ADC_Start_DMA+0x110>)
 80020dc:	64c5      	str	r5, [r0, #76]	; 0x4c
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80020de:	251c      	movs	r5, #28
 80020e0:	f841 5c40 	str.w	r5, [r1, #-64]
        __HAL_UNLOCK(hadc);
 80020e4:	2500      	movs	r5, #0
 80020e6:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80020ea:	f851 5c3c 	ldr.w	r5, [r1, #-60]
 80020ee:	f045 0510 	orr.w	r5, r5, #16
 80020f2:	f841 5c3c 	str.w	r5, [r1, #-60]
 80020f6:	f851 5c34 	ldr.w	r5, [r1, #-52]
 80020fa:	f025 0503 	bic.w	r5, r5, #3
 80020fe:	4335      	orrs	r5, r6
 8002100:	f841 5c34 	str.w	r5, [r1, #-52]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002104:	f001 f9e6 	bl	80034d4 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002108:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 800210a:	4b14      	ldr	r3, [pc, #80]	; (800215c <HAL_ADC_Start_DMA+0x114>)
 800210c:	6891      	ldr	r1, [r2, #8]
 800210e:	400b      	ands	r3, r1
 8002110:	f043 0304 	orr.w	r3, r3, #4
 8002114:	6093      	str	r3, [r2, #8]
}
 8002116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800211a:	4b11      	ldr	r3, [pc, #68]	; (8002160 <HAL_ADC_Start_DMA+0x118>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800211c:	689b      	ldr	r3, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800211e:	6885      	ldr	r5, [r0, #8]
 8002120:	f015 0504 	ands.w	r5, r5, #4
 8002124:	d0a3      	beq.n	800206e <HAL_ADC_Start_DMA+0x26>
    tmp_hal_status = HAL_BUSY;
 8002126:	2002      	movs	r0, #2
}
 8002128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_UNLOCK(hadc);
 800212c:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
}
 8002130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_UNLOCK(hadc);
 8002134:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          ADC_CLEAR_ERRORCODE(hadc);
 800213c:	65a3      	str	r3, [r4, #88]	; 0x58
 800213e:	e7c3      	b.n	80020c8 <HAL_ADC_Start_DMA+0x80>
 8002140:	40022000 	.word	0x40022000
 8002144:	58026300 	.word	0x58026300
 8002148:	fffff0fe 	.word	0xfffff0fe
 800214c:	40022100 	.word	0x40022100
 8002150:	08001ac5 	.word	0x08001ac5
 8002154:	08001ab9 	.word	0x08001ab9
 8002158:	08001b31 	.word	0x08001b31
 800215c:	7fffffc0 	.word	0x7fffffc0
 8002160:	40022300 	.word	0x40022300

08002164 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002164:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002166:	4a57      	ldr	r2, [pc, #348]	; (80022c4 <ADC_ConfigureBoostMode+0x160>)
{
 8002168:	4604      	mov	r4, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800216a:	6803      	ldr	r3, [r0, #0]
 800216c:	4293      	cmp	r3, r2
 800216e:	d026      	beq.n	80021be <ADC_ConfigureBoostMode+0x5a>
 8002170:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8002174:	4293      	cmp	r3, r2
 8002176:	d022      	beq.n	80021be <ADC_ConfigureBoostMode+0x5a>
 8002178:	4b53      	ldr	r3, [pc, #332]	; (80022c8 <ADC_ConfigureBoostMode+0x164>)
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8002180:	d022      	beq.n	80021c8 <ADC_ConfigureBoostMode+0x64>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002182:	f003 f827 	bl	80051d4 <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8002186:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCC_GetHCLKFreq();
 8002188:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 800218a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800218e:	f000 8088 	beq.w	80022a2 <ADC_ConfigureBoostMode+0x13e>
 8002192:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002196:	d06c      	beq.n	8002272 <ADC_ConfigureBoostMode+0x10e>
 8002198:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800219c:	f000 8081 	beq.w	80022a2 <ADC_ConfigureBoostMode+0x13e>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80021a0:	f7ff fc84 	bl	8001aac <HAL_GetREVID>
 80021a4:	f241 0303 	movw	r3, #4099	; 0x1003
 80021a8:	4298      	cmp	r0, r3
 80021aa:	d84b      	bhi.n	8002244 <ADC_ConfigureBoostMode+0xe0>
  {
    if (freq > 20000000UL)
 80021ac:	4b47      	ldr	r3, [pc, #284]	; (80022cc <ADC_ConfigureBoostMode+0x168>)
 80021ae:	429d      	cmp	r5, r3
 80021b0:	d92a      	bls.n	8002208 <ADC_ConfigureBoostMode+0xa4>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80021b2:	6822      	ldr	r2, [r4, #0]
 80021b4:	6893      	ldr	r3, [r2, #8]
 80021b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ba:	6093      	str	r3, [r2, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80021bc:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80021be:	4b44      	ldr	r3, [pc, #272]	; (80022d0 <ADC_ConfigureBoostMode+0x16c>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 80021c6:	d1dc      	bne.n	8002182 <ADC_ConfigureBoostMode+0x1e>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80021c8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80021cc:	2100      	movs	r1, #0
 80021ce:	f004 f9e3 	bl	8006598 <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 80021d2:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80021d4:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 80021d6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80021da:	d06c      	beq.n	80022b6 <ADC_ConfigureBoostMode+0x152>
 80021dc:	d808      	bhi.n	80021f0 <ADC_ConfigureBoostMode+0x8c>
 80021de:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80021e2:	d050      	beq.n	8002286 <ADC_ConfigureBoostMode+0x122>
 80021e4:	d916      	bls.n	8002214 <ADC_ConfigureBoostMode+0xb0>
 80021e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80021ea:	d1d9      	bne.n	80021a0 <ADC_ConfigureBoostMode+0x3c>
        freq /= 32UL;
 80021ec:	0945      	lsrs	r5, r0, #5
        break;
 80021ee:	e7d7      	b.n	80021a0 <ADC_ConfigureBoostMode+0x3c>
    switch (hadc->Init.ClockPrescaler)
 80021f0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80021f4:	d045      	beq.n	8002282 <ADC_ConfigureBoostMode+0x11e>
 80021f6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80021fa:	d1d1      	bne.n	80021a0 <ADC_ConfigureBoostMode+0x3c>
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80021fc:	f7ff fc56 	bl	8001aac <HAL_GetREVID>
 8002200:	f241 0303 	movw	r3, #4099	; 0x1003
 8002204:	4298      	cmp	r0, r3
 8002206:	d840      	bhi.n	800228a <ADC_ConfigureBoostMode+0x126>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002208:	6822      	ldr	r2, [r4, #0]
 800220a:	6893      	ldr	r3, [r2, #8]
 800220c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002210:	6093      	str	r3, [r2, #8]
}
 8002212:	bd38      	pop	{r3, r4, r5, pc}
    switch (hadc->Init.ClockPrescaler)
 8002214:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002218:	d006      	beq.n	8002228 <ADC_ConfigureBoostMode+0xc4>
 800221a:	d90a      	bls.n	8002232 <ADC_ConfigureBoostMode+0xce>
 800221c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002220:	d002      	beq.n	8002228 <ADC_ConfigureBoostMode+0xc4>
 8002222:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002226:	d1bb      	bne.n	80021a0 <ADC_ConfigureBoostMode+0x3c>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002228:	0c9b      	lsrs	r3, r3, #18
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 8002230:	e7b6      	b.n	80021a0 <ADC_ConfigureBoostMode+0x3c>
    switch (hadc->Init.ClockPrescaler)
 8002232:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002236:	d0f7      	beq.n	8002228 <ADC_ConfigureBoostMode+0xc4>
 8002238:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800223c:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8002240:	d0f2      	beq.n	8002228 <ADC_ConfigureBoostMode+0xc4>
 8002242:	e7ad      	b.n	80021a0 <ADC_ConfigureBoostMode+0x3c>
    if (freq <= 6250000UL)
 8002244:	4b23      	ldr	r3, [pc, #140]	; (80022d4 <ADC_ConfigureBoostMode+0x170>)
 8002246:	429d      	cmp	r5, r3
 8002248:	d805      	bhi.n	8002256 <ADC_ConfigureBoostMode+0xf2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800224a:	6822      	ldr	r2, [r4, #0]
 800224c:	6893      	ldr	r3, [r2, #8]
 800224e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002252:	6093      	str	r3, [r2, #8]
}
 8002254:	bd38      	pop	{r3, r4, r5, pc}
    else if (freq <= 12500000UL)
 8002256:	4b20      	ldr	r3, [pc, #128]	; (80022d8 <ADC_ConfigureBoostMode+0x174>)
 8002258:	429d      	cmp	r5, r3
 800225a:	d91a      	bls.n	8002292 <ADC_ConfigureBoostMode+0x12e>
    else if (freq <= 25000000UL)
 800225c:	4b1f      	ldr	r3, [pc, #124]	; (80022dc <ADC_ConfigureBoostMode+0x178>)
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800225e:	6822      	ldr	r2, [r4, #0]
    else if (freq <= 25000000UL)
 8002260:	429d      	cmp	r5, r3
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002262:	6893      	ldr	r3, [r2, #8]
    else if (freq <= 25000000UL)
 8002264:	d829      	bhi.n	80022ba <ADC_ConfigureBoostMode+0x156>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002266:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800226a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800226e:	6093      	str	r3, [r2, #8]
}
 8002270:	bd38      	pop	{r3, r4, r5, pc}
        freq /= 4UL;
 8002272:	0885      	lsrs	r5, r0, #2
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002274:	f7ff fc1a 	bl	8001aac <HAL_GetREVID>
 8002278:	f241 0303 	movw	r3, #4099	; 0x1003
 800227c:	4298      	cmp	r0, r3
 800227e:	d8e1      	bhi.n	8002244 <ADC_ConfigureBoostMode+0xe0>
 8002280:	e794      	b.n	80021ac <ADC_ConfigureBoostMode+0x48>
        freq /= 128UL;
 8002282:	09c5      	lsrs	r5, r0, #7
        break;
 8002284:	e78c      	b.n	80021a0 <ADC_ConfigureBoostMode+0x3c>
        freq /= 16UL;
 8002286:	0905      	lsrs	r5, r0, #4
        break;
 8002288:	e78a      	b.n	80021a0 <ADC_ConfigureBoostMode+0x3c>
    if (freq <= 6250000UL)
 800228a:	4b12      	ldr	r3, [pc, #72]	; (80022d4 <ADC_ConfigureBoostMode+0x170>)
 800228c:	ebb3 2f15 	cmp.w	r3, r5, lsr #8
 8002290:	d2db      	bcs.n	800224a <ADC_ConfigureBoostMode+0xe6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002292:	6822      	ldr	r2, [r4, #0]
 8002294:	6893      	ldr	r3, [r2, #8]
 8002296:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800229a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800229e:	6093      	str	r3, [r2, #8]
}
 80022a0:	bd38      	pop	{r3, r4, r5, pc}
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80022a2:	0c1b      	lsrs	r3, r3, #16
 80022a4:	fbb5 f5f3 	udiv	r5, r5, r3
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80022a8:	f7ff fc00 	bl	8001aac <HAL_GetREVID>
 80022ac:	f241 0303 	movw	r3, #4099	; 0x1003
 80022b0:	4298      	cmp	r0, r3
 80022b2:	d8c7      	bhi.n	8002244 <ADC_ConfigureBoostMode+0xe0>
 80022b4:	e77a      	b.n	80021ac <ADC_ConfigureBoostMode+0x48>
        freq /= 64UL;
 80022b6:	0985      	lsrs	r5, r0, #6
        break;
 80022b8:	e772      	b.n	80021a0 <ADC_ConfigureBoostMode+0x3c>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80022ba:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80022be:	6093      	str	r3, [r2, #8]
}
 80022c0:	bd38      	pop	{r3, r4, r5, pc}
 80022c2:	bf00      	nop
 80022c4:	40022000 	.word	0x40022000
 80022c8:	58026300 	.word	0x58026300
 80022cc:	01312d00 	.word	0x01312d00
 80022d0:	40022300 	.word	0x40022300
 80022d4:	00bebc21 	.word	0x00bebc21
 80022d8:	017d7841 	.word	0x017d7841
 80022dc:	02faf081 	.word	0x02faf081

080022e0 <HAL_ADC_Init>:
{
 80022e0:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0UL;
 80022e2:	2300      	movs	r3, #0
{
 80022e4:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 80022e6:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 80022e8:	2800      	cmp	r0, #0
 80022ea:	f000 80d1 	beq.w	8002490 <HAL_ADC_Init+0x1b0>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80022ee:	6d45      	ldr	r5, [r0, #84]	; 0x54
 80022f0:	4604      	mov	r4, r0
 80022f2:	2d00      	cmp	r5, #0
 80022f4:	f000 80bb 	beq.w	800246e <HAL_ADC_Init+0x18e>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80022f8:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80022fa:	6893      	ldr	r3, [r2, #8]
 80022fc:	009d      	lsls	r5, r3, #2
 80022fe:	d503      	bpl.n	8002308 <HAL_ADC_Init+0x28>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002300:	6891      	ldr	r1, [r2, #8]
 8002302:	4b72      	ldr	r3, [pc, #456]	; (80024cc <HAL_ADC_Init+0x1ec>)
 8002304:	400b      	ands	r3, r1
 8002306:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002308:	6893      	ldr	r3, [r2, #8]
 800230a:	00d8      	lsls	r0, r3, #3
 800230c:	d416      	bmi.n	800233c <HAL_ADC_Init+0x5c>
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800230e:	4b70      	ldr	r3, [pc, #448]	; (80024d0 <HAL_ADC_Init+0x1f0>)
 8002310:	4970      	ldr	r1, [pc, #448]	; (80024d4 <HAL_ADC_Init+0x1f4>)
 8002312:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8002314:	6890      	ldr	r0, [r2, #8]
 8002316:	099b      	lsrs	r3, r3, #6
 8002318:	fba1 1303 	umull	r1, r3, r1, r3
 800231c:	496e      	ldr	r1, [pc, #440]	; (80024d8 <HAL_ADC_Init+0x1f8>)
 800231e:	099b      	lsrs	r3, r3, #6
 8002320:	4001      	ands	r1, r0
 8002322:	3301      	adds	r3, #1
 8002324:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8002328:	6091      	str	r1, [r2, #8]
 800232a:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800232c:	9b01      	ldr	r3, [sp, #4]
 800232e:	b12b      	cbz	r3, 800233c <HAL_ADC_Init+0x5c>
      wait_loop_index--;
 8002330:	9b01      	ldr	r3, [sp, #4]
 8002332:	3b01      	subs	r3, #1
 8002334:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002336:	9b01      	ldr	r3, [sp, #4]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d1f9      	bne.n	8002330 <HAL_ADC_Init+0x50>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800233c:	6893      	ldr	r3, [r2, #8]
 800233e:	00d9      	lsls	r1, r3, #3
 8002340:	d424      	bmi.n	800238c <HAL_ADC_Init+0xac>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002342:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8002344:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002346:	f043 0310 	orr.w	r3, r3, #16
 800234a:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800234c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800234e:	432b      	orrs	r3, r5
 8002350:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002352:	6893      	ldr	r3, [r2, #8]
 8002354:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002358:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800235a:	d11d      	bne.n	8002398 <HAL_ADC_Init+0xb8>
 800235c:	06db      	lsls	r3, r3, #27
 800235e:	d41b      	bmi.n	8002398 <HAL_ADC_Init+0xb8>
    ADC_STATE_CLR_SET(hadc->State,
 8002360:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002362:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002366:	f043 0302 	orr.w	r3, r3, #2
 800236a:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800236c:	6893      	ldr	r3, [r2, #8]
 800236e:	07de      	lsls	r6, r3, #31
 8002370:	d428      	bmi.n	80023c4 <HAL_ADC_Init+0xe4>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002372:	4b5a      	ldr	r3, [pc, #360]	; (80024dc <HAL_ADC_Init+0x1fc>)
 8002374:	429a      	cmp	r2, r3
 8002376:	d017      	beq.n	80023a8 <HAL_ADC_Init+0xc8>
 8002378:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800237c:	429a      	cmp	r2, r3
 800237e:	d013      	beq.n	80023a8 <HAL_ADC_Init+0xc8>
 8002380:	4b57      	ldr	r3, [pc, #348]	; (80024e0 <HAL_ADC_Init+0x200>)
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	07d9      	lsls	r1, r3, #31
 8002386:	d41d      	bmi.n	80023c4 <HAL_ADC_Init+0xe4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002388:	4a56      	ldr	r2, [pc, #344]	; (80024e4 <HAL_ADC_Init+0x204>)
 800238a:	e015      	b.n	80023b8 <HAL_ADC_Init+0xd8>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800238c:	6893      	ldr	r3, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800238e:	2500      	movs	r5, #0
 8002390:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002394:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002396:	d0e1      	beq.n	800235c <HAL_ADC_Init+0x7c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002398:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 800239a:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800239c:	f043 0310 	orr.w	r3, r3, #16
}
 80023a0:	4628      	mov	r0, r5
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023a2:	6563      	str	r3, [r4, #84]	; 0x54
}
 80023a4:	b002      	add	sp, #8
 80023a6:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80023a8:	4a4c      	ldr	r2, [pc, #304]	; (80024dc <HAL_ADC_Init+0x1fc>)
 80023aa:	4b4f      	ldr	r3, [pc, #316]	; (80024e8 <HAL_ADC_Init+0x208>)
 80023ac:	6892      	ldr	r2, [r2, #8]
 80023ae:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	07d8      	lsls	r0, r3, #31
 80023b4:	d406      	bmi.n	80023c4 <HAL_ADC_Init+0xe4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80023b6:	4a4d      	ldr	r2, [pc, #308]	; (80024ec <HAL_ADC_Init+0x20c>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80023b8:	6893      	ldr	r3, [r2, #8]
 80023ba:	6861      	ldr	r1, [r4, #4]
 80023bc:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80023c0:	430b      	orrs	r3, r1
 80023c2:	6093      	str	r3, [r2, #8]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80023c4:	f7ff fb72 	bl	8001aac <HAL_GetREVID>
 80023c8:	f241 0303 	movw	r3, #4099	; 0x1003
 80023cc:	68a1      	ldr	r1, [r4, #8]
 80023ce:	4298      	cmp	r0, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80023d0:	7f23      	ldrb	r3, [r4, #28]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80023d2:	d852      	bhi.n	800247a <HAL_ADC_Init+0x19a>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80023d4:	f894 c015 	ldrb.w	ip, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80023d8:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80023da:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80023dc:	ea42 324c 	orr.w	r2, r2, ip, lsl #13
 80023e0:	4302      	orrs	r2, r0
 80023e2:	430a      	orrs	r2, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d103      	bne.n	80023f0 <HAL_ADC_Init+0x110>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80023e8:	6a23      	ldr	r3, [r4, #32]
 80023ea:	3b01      	subs	r3, #1
 80023ec:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80023f2:	b123      	cbz	r3, 80023fe <HAL_ADC_Init+0x11e>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023f4:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80023f8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80023fa:	430b      	orrs	r3, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023fc:	431a      	orrs	r2, r3
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80023fe:	6823      	ldr	r3, [r4, #0]
 8002400:	493b      	ldr	r1, [pc, #236]	; (80024f0 <HAL_ADC_Init+0x210>)
 8002402:	68d8      	ldr	r0, [r3, #12]
 8002404:	4001      	ands	r1, r0
 8002406:	4311      	orrs	r1, r2
 8002408:	60d9      	str	r1, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800240a:	689a      	ldr	r2, [r3, #8]
 800240c:	f012 0f04 	tst.w	r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002410:	689a      	ldr	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002412:	d11c      	bne.n	800244e <HAL_ADC_Init+0x16e>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002414:	0712      	lsls	r2, r2, #28
 8002416:	d41a      	bmi.n	800244e <HAL_ADC_Init+0x16e>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002418:	68d8      	ldr	r0, [r3, #12]
 800241a:	4a36      	ldr	r2, [pc, #216]	; (80024f4 <HAL_ADC_Init+0x214>)
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800241c:	7d21      	ldrb	r1, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800241e:	4002      	ands	r2, r0
 8002420:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
 8002424:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002426:	430a      	orrs	r2, r1
 8002428:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 800242a:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 800242e:	2a01      	cmp	r2, #1
 8002430:	d03a      	beq.n	80024a8 <HAL_ADC_Init+0x1c8>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002432:	691a      	ldr	r2, [r3, #16]
 8002434:	f022 0201 	bic.w	r2, r2, #1
 8002438:	611a      	str	r2, [r3, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800243a:	691a      	ldr	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 800243c:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800243e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002440:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8002444:	430a      	orrs	r2, r1
 8002446:	611a      	str	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 8002448:	f7ff fe8c 	bl	8002164 <ADC_ConfigureBoostMode>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800244c:	6823      	ldr	r3, [r4, #0]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800244e:	68e2      	ldr	r2, [r4, #12]
 8002450:	2a01      	cmp	r2, #1
 8002452:	d021      	beq.n	8002498 <HAL_ADC_Init+0x1b8>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002454:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002456:	f022 020f 	bic.w	r2, r2, #15
 800245a:	631a      	str	r2, [r3, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800245c:	6d63      	ldr	r3, [r4, #84]	; 0x54
}
 800245e:	4628      	mov	r0, r5
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002460:	f023 0303 	bic.w	r3, r3, #3
 8002464:	f043 0301 	orr.w	r3, r3, #1
 8002468:	6563      	str	r3, [r4, #84]	; 0x54
}
 800246a:	b002      	add	sp, #8
 800246c:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 800246e:	f7fe ff13 	bl	8001298 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002472:	65a5      	str	r5, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 8002474:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 8002478:	e73e      	b.n	80022f8 <HAL_ADC_Init+0x18>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800247a:	2910      	cmp	r1, #16
 800247c:	d1aa      	bne.n	80023d4 <HAL_ADC_Init+0xf4>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800247e:	7d61      	ldrb	r1, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002480:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002482:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8002486:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002488:	430a      	orrs	r2, r1
 800248a:	f042 021c 	orr.w	r2, r2, #28
 800248e:	e7a9      	b.n	80023e4 <HAL_ADC_Init+0x104>
    return HAL_ERROR;
 8002490:	2501      	movs	r5, #1
}
 8002492:	4628      	mov	r0, r5
 8002494:	b002      	add	sp, #8
 8002496:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002498:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800249a:	69a2      	ldr	r2, [r4, #24]
 800249c:	f021 010f 	bic.w	r1, r1, #15
 80024a0:	3a01      	subs	r2, #1
 80024a2:	430a      	orrs	r2, r1
 80024a4:	631a      	str	r2, [r3, #48]	; 0x30
 80024a6:	e7d9      	b.n	800245c <HAL_ADC_Init+0x17c>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80024a8:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	; 0x3c
 80024ac:	6c66      	ldr	r6, [r4, #68]	; 0x44
 80024ae:	3901      	subs	r1, #1
 80024b0:	6918      	ldr	r0, [r3, #16]
 80024b2:	4332      	orrs	r2, r6
 80024b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80024b8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80024ba:	430a      	orrs	r2, r1
 80024bc:	490e      	ldr	r1, [pc, #56]	; (80024f8 <HAL_ADC_Init+0x218>)
 80024be:	4001      	ands	r1, r0
 80024c0:	430a      	orrs	r2, r1
 80024c2:	f042 0201 	orr.w	r2, r2, #1
 80024c6:	611a      	str	r2, [r3, #16]
 80024c8:	e7b7      	b.n	800243a <HAL_ADC_Init+0x15a>
 80024ca:	bf00      	nop
 80024cc:	5fffffc0 	.word	0x5fffffc0
 80024d0:	20000164 	.word	0x20000164
 80024d4:	053e2d63 	.word	0x053e2d63
 80024d8:	6fffffc0 	.word	0x6fffffc0
 80024dc:	40022000 	.word	0x40022000
 80024e0:	58026000 	.word	0x58026000
 80024e4:	58026300 	.word	0x58026300
 80024e8:	40022100 	.word	0x40022100
 80024ec:	40022300 	.word	0x40022300
 80024f0:	fff0c003 	.word	0xfff0c003
 80024f4:	ffffbffc 	.word	0xffffbffc
 80024f8:	fc00f81e 	.word	0xfc00f81e

080024fc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80024fc:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80024fe:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
{
 8002502:	b09a      	sub	sp, #104	; 0x68
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002504:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 8002506:	2a01      	cmp	r2, #1
 8002508:	d04d      	beq.n	80025a6 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 800250a:	4603      	mov	r3, r0

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800250c:	4c2b      	ldr	r4, [pc, #172]	; (80025bc <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800250e:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8002510:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002512:	681d      	ldr	r5, [r3, #0]
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002514:	9216      	str	r2, [sp, #88]	; 0x58
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002516:	42a5      	cmp	r5, r4
  __HAL_LOCK(hadc);
 8002518:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800251c:	9217      	str	r2, [sp, #92]	; 0x5c
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800251e:	d008      	beq.n	8002532 <HAL_ADCEx_MultiModeConfigChannel+0x36>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002520:	6d59      	ldr	r1, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002522:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002526:	f041 0120 	orr.w	r1, r1, #32
 800252a:	6559      	str	r1, [r3, #84]	; 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 800252c:	b01a      	add	sp, #104	; 0x68
 800252e:	bcf0      	pop	{r4, r5, r6, r7}
 8002530:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002532:	4c23      	ldr	r4, [pc, #140]	; (80025c0 <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 8002534:	68a2      	ldr	r2, [r4, #8]
 8002536:	0752      	lsls	r2, r2, #29
 8002538:	d50b      	bpl.n	8002552 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800253a:	68aa      	ldr	r2, [r5, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800253c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 800253e:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002540:	f042 0220 	orr.w	r2, r2, #32
 8002544:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8002546:	2200      	movs	r2, #0
 8002548:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 800254c:	b01a      	add	sp, #104	; 0x68
 800254e:	bcf0      	pop	{r4, r5, r6, r7}
 8002550:	4770      	bx	lr
 8002552:	68a8      	ldr	r0, [r5, #8]
 8002554:	f010 0004 	ands.w	r0, r0, #4
 8002558:	d1f0      	bne.n	800253c <HAL_ADCEx_MultiModeConfigChannel+0x40>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800255a:	b1c6      	cbz	r6, 800258e <HAL_ADCEx_MultiModeConfigChannel+0x92>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800255c:	f8df c068 	ldr.w	ip, [pc, #104]	; 80025c8 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8002560:	684f      	ldr	r7, [r1, #4]
 8002562:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8002566:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800256a:	433a      	orrs	r2, r7
 800256c:	f8cc 2008 	str.w	r2, [ip, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002570:	68ad      	ldr	r5, [r5, #8]
 8002572:	68a2      	ldr	r2, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002574:	432a      	orrs	r2, r5
 8002576:	07d4      	lsls	r4, r2, #31
 8002578:	d413      	bmi.n	80025a2 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
        MODIFY_REG(tmpADC_Common->CCR,
 800257a:	688a      	ldr	r2, [r1, #8]
 800257c:	f8dc 4008 	ldr.w	r4, [ip, #8]
 8002580:	4910      	ldr	r1, [pc, #64]	; (80025c4 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 8002582:	4332      	orrs	r2, r6
 8002584:	4021      	ands	r1, r4
 8002586:	430a      	orrs	r2, r1
 8002588:	f8cc 2008 	str.w	r2, [ip, #8]
 800258c:	e7db      	b.n	8002546 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800258e:	490e      	ldr	r1, [pc, #56]	; (80025c8 <HAL_ADCEx_MultiModeConfigChannel+0xcc>)
 8002590:	688a      	ldr	r2, [r1, #8]
 8002592:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002596:	608a      	str	r2, [r1, #8]
 8002598:	68a8      	ldr	r0, [r5, #8]
 800259a:	68a2      	ldr	r2, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800259c:	4302      	orrs	r2, r0
 800259e:	07d0      	lsls	r0, r2, #31
 80025a0:	d505      	bpl.n	80025ae <HAL_ADCEx_MultiModeConfigChannel+0xb2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025a2:	2000      	movs	r0, #0
 80025a4:	e7cf      	b.n	8002546 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
  __HAL_LOCK(hadc);
 80025a6:	2002      	movs	r0, #2
}
 80025a8:	b01a      	add	sp, #104	; 0x68
 80025aa:	bcf0      	pop	{r4, r5, r6, r7}
 80025ac:	4770      	bx	lr
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80025ae:	688c      	ldr	r4, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025b0:	4630      	mov	r0, r6
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80025b2:	4a04      	ldr	r2, [pc, #16]	; (80025c4 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 80025b4:	4022      	ands	r2, r4
 80025b6:	608a      	str	r2, [r1, #8]
 80025b8:	e7c5      	b.n	8002546 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 80025ba:	bf00      	nop
 80025bc:	40022000 	.word	0x40022000
 80025c0:	40022100 	.word	0x40022100
 80025c4:	fffff0e0 	.word	0xfffff0e0
 80025c8:	40022300 	.word	0x40022300

080025cc <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025cc:	4906      	ldr	r1, [pc, #24]	; (80025e8 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025ce:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025d2:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 80025d4:	4b05      	ldr	r3, [pc, #20]	; (80025ec <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025d6:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025d8:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025dc:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025e0:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 80025e2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80025e4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80025e6:	4770      	bx	lr
 80025e8:	e000ed00 	.word	0xe000ed00
 80025ec:	05fa0000 	.word	0x05fa0000

080025f0 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025f0:	4b1b      	ldr	r3, [pc, #108]	; (8002660 <HAL_NVIC_SetPriority+0x70>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025f8:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025fa:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025fe:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002602:	f1be 0f04 	cmp.w	lr, #4
 8002606:	bf28      	it	cs
 8002608:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800260c:	f1bc 0f06 	cmp.w	ip, #6
 8002610:	d91a      	bls.n	8002648 <HAL_NVIC_SetPriority+0x58>
 8002612:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002614:	f04f 3cff 	mov.w	ip, #4294967295
 8002618:	fa0c fc03 	lsl.w	ip, ip, r3
 800261c:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002620:	f04f 3cff 	mov.w	ip, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8002624:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002626:	fa0c fc0e 	lsl.w	ip, ip, lr
 800262a:	ea21 010c 	bic.w	r1, r1, ip
 800262e:	fa01 f103 	lsl.w	r1, r1, r3
 8002632:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8002636:	db0a      	blt.n	800264e <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002638:	0109      	lsls	r1, r1, #4
 800263a:	4b0a      	ldr	r3, [pc, #40]	; (8002664 <HAL_NVIC_SetPriority+0x74>)
 800263c:	b2c9      	uxtb	r1, r1
 800263e:	4403      	add	r3, r0
 8002640:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002644:	f85d fb04 	ldr.w	pc, [sp], #4
 8002648:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800264a:	4613      	mov	r3, r2
 800264c:	e7e8      	b.n	8002620 <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800264e:	f000 000f 	and.w	r0, r0, #15
 8002652:	0109      	lsls	r1, r1, #4
 8002654:	4b04      	ldr	r3, [pc, #16]	; (8002668 <HAL_NVIC_SetPriority+0x78>)
 8002656:	b2c9      	uxtb	r1, r1
 8002658:	4403      	add	r3, r0
 800265a:	7619      	strb	r1, [r3, #24]
 800265c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002660:	e000ed00 	.word	0xe000ed00
 8002664:	e000e100 	.word	0xe000e100
 8002668:	e000ecfc 	.word	0xe000ecfc

0800266c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800266c:	2800      	cmp	r0, #0
 800266e:	db07      	blt.n	8002680 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002670:	2301      	movs	r3, #1
 8002672:	f000 011f 	and.w	r1, r0, #31
 8002676:	4a03      	ldr	r2, [pc, #12]	; (8002684 <HAL_NVIC_EnableIRQ+0x18>)
 8002678:	0940      	lsrs	r0, r0, #5
 800267a:	408b      	lsls	r3, r1
 800267c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	e000e100 	.word	0xe000e100

08002688 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002688:	1e43      	subs	r3, r0, #1
 800268a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800268e:	d20c      	bcs.n	80026aa <HAL_SYSTICK_Config+0x22>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002690:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002694:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002696:	4906      	ldr	r1, [pc, #24]	; (80026b0 <HAL_SYSTICK_Config+0x28>)
 8002698:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800269c:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800269e:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026a0:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026a4:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026a6:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026a8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80026aa:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	e000ed00 	.word	0xe000ed00

080026b4 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 80026b4:	b188      	cbz	r0, 80026da <HAL_DAC_Init+0x26>
{
 80026b6:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80026b8:	7903      	ldrb	r3, [r0, #4]
 80026ba:	4604      	mov	r4, r0
 80026bc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80026c0:	b13b      	cbz	r3, 80026d2 <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80026c2:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 80026c4:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80026c6:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 80026c8:	7121      	strb	r1, [r4, #4]

  /* Return function status */
  return HAL_OK;
 80026ca:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80026cc:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 80026ce:	7122      	strb	r2, [r4, #4]
}
 80026d0:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 80026d2:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 80026d4:	f7fe fe3c 	bl	8001350 <HAL_DAC_MspInit>
 80026d8:	e7f3      	b.n	80026c2 <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 80026da:	2001      	movs	r0, #1
}
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop

080026e0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80026e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026e2:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80026e4:	7940      	ldrb	r0, [r0, #5]
{
 80026e6:	9f06      	ldr	r7, [sp, #24]
  __HAL_LOCK(hdac);
 80026e8:	2801      	cmp	r0, #1
 80026ea:	d053      	beq.n	8002794 <HAL_DAC_Start_DMA+0xb4>
 80026ec:	460d      	mov	r5, r1
 80026ee:	4611      	mov	r1, r2
 80026f0:	2201      	movs	r2, #1

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80026f2:	6826      	ldr	r6, [r4, #0]
  __HAL_LOCK(hdac);
 80026f4:	7162      	strb	r2, [r4, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 80026f6:	2202      	movs	r2, #2
 80026f8:	7122      	strb	r2, [r4, #4]
  if (Channel == DAC_CHANNEL_1)
 80026fa:	bb3d      	cbnz	r5, 800274c <HAL_DAC_Start_DMA+0x6c>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80026fc:	68a0      	ldr	r0, [r4, #8]

    /* Case of use of channel 1 */
    switch (Alignment)
 80026fe:	2f04      	cmp	r7, #4
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002700:	4a37      	ldr	r2, [pc, #220]	; (80027e0 <HAL_DAC_Start_DMA+0x100>)
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002702:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80027e8 <HAL_DAC_Start_DMA+0x108>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002706:	63c2      	str	r2, [r0, #60]	; 0x3c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002708:	6832      	ldr	r2, [r6, #0]
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800270a:	f8c0 c040 	str.w	ip, [r0, #64]	; 0x40
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800270e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002712:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 80027ec <HAL_DAC_Start_DMA+0x10c>
 8002716:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800271a:	6032      	str	r2, [r6, #0]
    switch (Alignment)
 800271c:	d042      	beq.n	80027a4 <HAL_DAC_Start_DMA+0xc4>
 800271e:	2f08      	cmp	r7, #8
 8002720:	d03d      	beq.n	800279e <HAL_DAC_Start_DMA+0xbe>
 8002722:	2f00      	cmp	r7, #0
 8002724:	d038      	beq.n	8002798 <HAL_DAC_Start_DMA+0xb8>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002726:	462a      	mov	r2, r5

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002728:	6837      	ldr	r7, [r6, #0]
 800272a:	f447 5700 	orr.w	r7, r7, #8192	; 0x2000
 800272e:	6037      	str	r7, [r6, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002730:	f000 fed0 	bl	80034d4 <HAL_DMA_Start_IT>
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002734:	2300      	movs	r3, #0
 8002736:	7163      	strb	r3, [r4, #5]

  if (status == HAL_OK)
 8002738:	bb38      	cbnz	r0, 800278a <HAL_DAC_Start_DMA+0xaa>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800273a:	6822      	ldr	r2, [r4, #0]
 800273c:	f005 0510 	and.w	r5, r5, #16
 8002740:	2301      	movs	r3, #1
 8002742:	6811      	ldr	r1, [r2, #0]
 8002744:	40ab      	lsls	r3, r5
 8002746:	430b      	orrs	r3, r1
 8002748:	6013      	str	r3, [r2, #0]
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
  }

  /* Return function status */
  return status;
}
 800274a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800274c:	68e0      	ldr	r0, [r4, #12]
    switch (Alignment)
 800274e:	2f04      	cmp	r7, #4
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002750:	4a24      	ldr	r2, [pc, #144]	; (80027e4 <HAL_DAC_Start_DMA+0x104>)
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002752:	f8df c09c 	ldr.w	ip, [pc, #156]	; 80027f0 <HAL_DAC_Start_DMA+0x110>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002756:	63c2      	str	r2, [r0, #60]	; 0x3c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002758:	6832      	ldr	r2, [r6, #0]
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800275a:	f8c0 c040 	str.w	ip, [r0, #64]	; 0x40
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800275e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002762:	f8df c090 	ldr.w	ip, [pc, #144]	; 80027f4 <HAL_DAC_Start_DMA+0x114>
 8002766:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800276a:	6032      	str	r2, [r6, #0]
    switch (Alignment)
 800276c:	d02f      	beq.n	80027ce <HAL_DAC_Start_DMA+0xee>
 800276e:	2f08      	cmp	r7, #8
 8002770:	d024      	beq.n	80027bc <HAL_DAC_Start_DMA+0xdc>
 8002772:	b1d7      	cbz	r7, 80027aa <HAL_DAC_Start_DMA+0xca>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002774:	6837      	ldr	r7, [r6, #0]
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002776:	2200      	movs	r2, #0
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002778:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 800277c:	6037      	str	r7, [r6, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800277e:	f000 fea9 	bl	80034d4 <HAL_DMA_Start_IT>
  __HAL_UNLOCK(hdac);
 8002782:	2300      	movs	r3, #0
 8002784:	7163      	strb	r3, [r4, #5]
  if (status == HAL_OK)
 8002786:	2800      	cmp	r0, #0
 8002788:	d0d7      	beq.n	800273a <HAL_DAC_Start_DMA+0x5a>
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800278a:	6923      	ldr	r3, [r4, #16]
 800278c:	f043 0304 	orr.w	r3, r3, #4
 8002790:	6123      	str	r3, [r4, #16]
}
 8002792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hdac);
 8002794:	2002      	movs	r0, #2
}
 8002796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002798:	f106 0208 	add.w	r2, r6, #8
        break;
 800279c:	e7c4      	b.n	8002728 <HAL_DAC_Start_DMA+0x48>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800279e:	f106 0210 	add.w	r2, r6, #16
        break;
 80027a2:	e7c1      	b.n	8002728 <HAL_DAC_Start_DMA+0x48>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80027a4:	f106 020c 	add.w	r2, r6, #12
        break;
 80027a8:	e7be      	b.n	8002728 <HAL_DAC_Start_DMA+0x48>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80027aa:	6837      	ldr	r7, [r6, #0]
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80027ac:	f106 0214 	add.w	r2, r6, #20
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80027b0:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 80027b4:	6037      	str	r7, [r6, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80027b6:	f000 fe8d 	bl	80034d4 <HAL_DMA_Start_IT>
 80027ba:	e7e2      	b.n	8002782 <HAL_DAC_Start_DMA+0xa2>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80027bc:	6837      	ldr	r7, [r6, #0]
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80027be:	f106 021c 	add.w	r2, r6, #28
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80027c2:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 80027c6:	6037      	str	r7, [r6, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80027c8:	f000 fe84 	bl	80034d4 <HAL_DMA_Start_IT>
 80027cc:	e7d9      	b.n	8002782 <HAL_DAC_Start_DMA+0xa2>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80027ce:	6837      	ldr	r7, [r6, #0]
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80027d0:	f106 0218 	add.w	r2, r6, #24
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80027d4:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 80027d8:	6037      	str	r7, [r6, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80027da:	f000 fe7b 	bl	80034d4 <HAL_DMA_Start_IT>
 80027de:	e7d0      	b.n	8002782 <HAL_DAC_Start_DMA+0xa2>
 80027e0:	080027f9 	.word	0x080027f9
 80027e4:	0800298d 	.word	0x0800298d
 80027e8:	08002809 	.word	0x08002809
 80027ec:	08002819 	.word	0x08002819
 80027f0:	080029a1 	.word	0x080029a1
 80027f4:	080029b1 	.word	0x080029b1

080027f8 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80027f8:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027fa:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80027fc:	4620      	mov	r0, r4
 80027fe:	f7fe fcb1 	bl	8001164 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002802:	2301      	movs	r3, #1
 8002804:	7123      	strb	r3, [r4, #4]
}
 8002806:	bd10      	pop	{r4, pc}

08002808 <DAC_DMAHalfConvCpltCh1>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002808:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800280a:	b508      	push	{r3, lr}
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800280c:	f7fe fca4 	bl	8001158 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002810:	bd08      	pop	{r3, pc}
 8002812:	bf00      	nop

08002814 <HAL_DAC_ErrorCallbackCh1>:
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop

08002818 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002818:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800281a:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800281c:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800281e:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002820:	f043 0304 	orr.w	r3, r3, #4
 8002824:	6123      	str	r3, [r4, #16]
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002826:	f7ff fff5 	bl	8002814 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800282a:	2301      	movs	r3, #1
 800282c:	7123      	strb	r3, [r4, #4]
}
 800282e:	bd10      	pop	{r4, pc}

08002830 <HAL_DAC_ConfigChannel>:
{
 8002830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hdac);
 8002834:	7943      	ldrb	r3, [r0, #5]
{
 8002836:	460e      	mov	r6, r1
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8002838:	6809      	ldr	r1, [r1, #0]
  __HAL_LOCK(hdac);
 800283a:	2b01      	cmp	r3, #1
 800283c:	f000 8097 	beq.w	800296e <HAL_DAC_ConfigChannel+0x13e>
 8002840:	2301      	movs	r3, #1
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002842:	2904      	cmp	r1, #4
 8002844:	4605      	mov	r5, r0
 8002846:	4614      	mov	r4, r2
  __HAL_LOCK(hdac);
 8002848:	7143      	strb	r3, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 800284a:	f04f 0302 	mov.w	r3, #2
 800284e:	7103      	strb	r3, [r0, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002850:	d044      	beq.n	80028dc <HAL_DAC_ConfigChannel+0xac>
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002852:	f002 0210 	and.w	r2, r2, #16
    tmpreg1 = hdac->Instance->CCR;
 8002856:	6800      	ldr	r0, [r0, #0]
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002858:	6933      	ldr	r3, [r6, #16]
 800285a:	2b01      	cmp	r3, #1
 800285c:	d108      	bne.n	8002870 <HAL_DAC_ConfigChannel+0x40>
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800285e:	231f      	movs	r3, #31
    tmpreg1 = hdac->Instance->CCR;
 8002860:	6b84      	ldr	r4, [r0, #56]	; 0x38
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002862:	4093      	lsls	r3, r2
 8002864:	ea24 0403 	bic.w	r4, r4, r3
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002868:	6973      	ldr	r3, [r6, #20]
 800286a:	4093      	lsls	r3, r2
 800286c:	4323      	orrs	r3, r4
    hdac->Instance->CCR = tmpreg1;
 800286e:	6383      	str	r3, [r0, #56]	; 0x38
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002870:	2307      	movs	r3, #7
  tmpreg1 = hdac->Instance->MCR;
 8002872:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002874:	4093      	lsls	r3, r2
 8002876:	ea24 0403 	bic.w	r4, r4, r3
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800287a:	e9d6 7302 	ldrd	r7, r3, [r6, #8]
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800287e:	2b01      	cmp	r3, #1
 8002880:	d028      	beq.n	80028d4 <HAL_DAC_ConfigChannel+0xa4>
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002882:	2b02      	cmp	r3, #2
 8002884:	d028      	beq.n	80028d8 <HAL_DAC_ConfigChannel+0xa8>
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002886:	fab7 f387 	clz	r3, r7
 800288a:	095b      	lsrs	r3, r3, #5
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800288c:	433b      	orrs	r3, r7
 800288e:	430b      	orrs	r3, r1
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002890:	6871      	ldr	r1, [r6, #4]
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002892:	4093      	lsls	r3, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002894:	4091      	lsls	r1, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002896:	4323      	orrs	r3, r4
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002898:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  hdac->Instance->MCR = tmpreg1;
 800289c:	63c3      	str	r3, [r0, #60]	; 0x3c
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800289e:	4094      	lsls	r4, r2
 80028a0:	6803      	ldr	r3, [r0, #0]
 80028a2:	ea23 0304 	bic.w	r3, r3, r4
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80028a6:	f640 74fe 	movw	r4, #4094	; 0xffe
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80028aa:	6003      	str	r3, [r0, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80028ac:	4094      	lsls	r4, r2
  tmpreg1 = hdac->Instance->CR;
 80028ae:	6803      	ldr	r3, [r0, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80028b0:	ea23 0304 	bic.w	r3, r3, r4
  hdac->State = HAL_DAC_STATE_READY;
 80028b4:	2401      	movs	r4, #1
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80028b6:	430b      	orrs	r3, r1
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80028b8:	21c0      	movs	r1, #192	; 0xc0
  hdac->Instance->CR = tmpreg1;
 80028ba:	6003      	str	r3, [r0, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80028bc:	fa01 f202 	lsl.w	r2, r1, r2
 80028c0:	6803      	ldr	r3, [r0, #0]
  __HAL_UNLOCK(hdac);
 80028c2:	2100      	movs	r1, #0
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80028c4:	ea23 0302 	bic.w	r3, r3, r2
 80028c8:	6003      	str	r3, [r0, #0]
  return HAL_OK;
 80028ca:	4608      	mov	r0, r1
  hdac->State = HAL_DAC_STATE_READY;
 80028cc:	712c      	strb	r4, [r5, #4]
  __HAL_UNLOCK(hdac);
 80028ce:	7169      	strb	r1, [r5, #5]
}
 80028d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    connectOnChip = 0x00000000UL;
 80028d4:	2300      	movs	r3, #0
 80028d6:	e7d9      	b.n	800288c <HAL_DAC_ConfigChannel+0x5c>
    connectOnChip = DAC_MCR_MODE1_0;
 80028d8:	2301      	movs	r3, #1
 80028da:	e7d7      	b.n	800288c <HAL_DAC_ConfigChannel+0x5c>
    tickstart = HAL_GetTick();
 80028dc:	f7ff f8ce 	bl	8001a7c <HAL_GetTick>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80028e0:	682b      	ldr	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80028e2:	4607      	mov	r7, r0
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80028e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (Channel == DAC_CHANNEL_1)
 80028e6:	bb1c      	cbnz	r4, 8002930 <HAL_DAC_ConfigChannel+0x100>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80028e8:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8002984 <HAL_DAC_ConfigChannel+0x154>
 80028ec:	ea13 0f08 	tst.w	r3, r8
 80028f0:	d00d      	beq.n	800290e <HAL_DAC_ConfigChannel+0xde>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80028f2:	f7ff f8c3 	bl	8001a7c <HAL_GetTick>
 80028f6:	1bc3      	subs	r3, r0, r7
 80028f8:	2b01      	cmp	r3, #1
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80028fa:	682b      	ldr	r3, [r5, #0]
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80028fc:	d903      	bls.n	8002906 <HAL_DAC_ConfigChannel+0xd6>
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80028fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002900:	ea12 0f08 	tst.w	r2, r8
 8002904:	d136      	bne.n	8002974 <HAL_DAC_ConfigChannel+0x144>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002908:	ea13 0f08 	tst.w	r3, r8
 800290c:	d1f1      	bne.n	80028f2 <HAL_DAC_ConfigChannel+0xc2>
      HAL_Delay(1);
 800290e:	2001      	movs	r0, #1
 8002910:	f7ff f8ba 	bl	8001a88 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002914:	6828      	ldr	r0, [r5, #0]
 8002916:	69b3      	ldr	r3, [r6, #24]
 8002918:	6403      	str	r3, [r0, #64]	; 0x40
 800291a:	e011      	b.n	8002940 <HAL_DAC_ConfigChannel+0x110>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800291c:	f7ff f8ae 	bl	8001a7c <HAL_GetTick>
 8002920:	1bc3      	subs	r3, r0, r7
 8002922:	2b01      	cmp	r3, #1
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002924:	682b      	ldr	r3, [r5, #0]
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002926:	d902      	bls.n	800292e <HAL_DAC_ConfigChannel+0xfe>
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002928:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800292a:	2a00      	cmp	r2, #0
 800292c:	db22      	blt.n	8002974 <HAL_DAC_ConfigChannel+0x144>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800292e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002930:	2b00      	cmp	r3, #0
 8002932:	dbf3      	blt.n	800291c <HAL_DAC_ConfigChannel+0xec>
      HAL_Delay(1U);
 8002934:	2001      	movs	r0, #1
 8002936:	f7ff f8a7 	bl	8001a88 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800293a:	6828      	ldr	r0, [r5, #0]
 800293c:	69b3      	ldr	r3, [r6, #24]
 800293e:	6443      	str	r3, [r0, #68]	; 0x44
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002940:	f004 0210 	and.w	r2, r4, #16
 8002944:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002948:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800294a:	4091      	lsls	r1, r2
 800294c:	ea23 0301 	bic.w	r3, r3, r1
 8002950:	69f1      	ldr	r1, [r6, #28]
 8002952:	4091      	lsls	r1, r2
 8002954:	430b      	orrs	r3, r1
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002956:	21ff      	movs	r1, #255	; 0xff
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002958:	6483      	str	r3, [r0, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800295a:	4091      	lsls	r1, r2
 800295c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800295e:	ea23 0301 	bic.w	r3, r3, r1
 8002962:	6a31      	ldr	r1, [r6, #32]
 8002964:	4091      	lsls	r1, r2
 8002966:	430b      	orrs	r3, r1
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002968:	6831      	ldr	r1, [r6, #0]
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800296a:	64c3      	str	r3, [r0, #76]	; 0x4c
 800296c:	e774      	b.n	8002858 <HAL_DAC_ConfigChannel+0x28>
  __HAL_LOCK(hdac);
 800296e:	2002      	movs	r0, #2
}
 8002970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002974:	692b      	ldr	r3, [r5, #16]
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002976:	2203      	movs	r2, #3
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002978:	f043 0308 	orr.w	r3, r3, #8
            return HAL_TIMEOUT;
 800297c:	4610      	mov	r0, r2
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800297e:	612b      	str	r3, [r5, #16]
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002980:	712a      	strb	r2, [r5, #4]
            return HAL_TIMEOUT;
 8002982:	e7a5      	b.n	80028d0 <HAL_DAC_ConfigChannel+0xa0>
 8002984:	20008000 	.word	0x20008000

08002988 <HAL_DACEx_ConvCpltCallbackCh2>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop

0800298c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800298c:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800298e:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002990:	4620      	mov	r0, r4
 8002992:	f7ff fff9 	bl	8002988 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002996:	2301      	movs	r3, #1
 8002998:	7123      	strb	r3, [r4, #4]
}
 800299a:	bd10      	pop	{r4, pc}

0800299c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop

080029a0 <DAC_DMAHalfConvCpltCh2>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80029a0:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 80029a2:	b508      	push	{r3, lr}
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80029a4:	f7ff fffa 	bl	800299c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80029a8:	bd08      	pop	{r3, pc}
 80029aa:	bf00      	nop

080029ac <HAL_DACEx_ErrorCallbackCh2>:
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop

080029b0 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80029b0:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029b2:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80029b4:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80029b6:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80029b8:	f043 0304 	orr.w	r3, r3, #4
 80029bc:	6123      	str	r3, [r4, #16]
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80029be:	f7ff fff5 	bl	80029ac <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80029c2:	2301      	movs	r3, #1
 80029c4:	7123      	strb	r3, [r4, #4]
}
 80029c6:	bd10      	pop	{r4, pc}

080029c8 <HAL_DFSDM_ChannelInit>:
  __IO uint32_t               *channelCounterPtr;
  DFSDM_Channel_HandleTypeDef **channelHandleTable;
  DFSDM_Channel_TypeDef       *channel0Instance;

  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 80029c8:	2800      	cmp	r0, #0
 80029ca:	f000 80a4 	beq.w	8002b16 <HAL_DFSDM_ChannelInit+0x14e>
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef* Instance)
{
  uint32_t channel;

  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 80029ce:	4a5c      	ldr	r2, [pc, #368]	; (8002b40 <HAL_DFSDM_ChannelInit+0x178>)
{
 80029d0:	b538      	push	{r3, r4, r5, lr}
  if (channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80029d2:	6803      	ldr	r3, [r0, #0]
 80029d4:	4604      	mov	r4, r0
  if(Instance == DFSDM1_Channel0)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d077      	beq.n	8002aca <HAL_DFSDM_ChannelInit+0x102>
  else if (Instance == DFSDM2_Channel1)
  {
    channel = 1;
  }
#endif /* DFSDM2_Channel0 */
  else if(Instance == DFSDM1_Channel1)
 80029da:	3220      	adds	r2, #32
 80029dc:	4293      	cmp	r3, r2
 80029de:	d07a      	beq.n	8002ad6 <HAL_DFSDM_ChannelInit+0x10e>
  {
    channel = 1;
  }
  else if(Instance == DFSDM1_Channel2)
 80029e0:	3220      	adds	r2, #32
 80029e2:	4293      	cmp	r3, r2
 80029e4:	f000 8099 	beq.w	8002b1a <HAL_DFSDM_ChannelInit+0x152>
  {
    channel = 2;
  }
  else if(Instance == DFSDM1_Channel3)
 80029e8:	3220      	adds	r2, #32
 80029ea:	4293      	cmp	r3, r2
 80029ec:	f000 8097 	beq.w	8002b1e <HAL_DFSDM_ChannelInit+0x156>
  {
    channel = 3;
  }
  else if(Instance == DFSDM1_Channel4)
 80029f0:	3220      	adds	r2, #32
 80029f2:	4293      	cmp	r3, r2
 80029f4:	f000 8099 	beq.w	8002b2a <HAL_DFSDM_ChannelInit+0x162>
  {
    channel = 4;
  }
  else if(Instance == DFSDM1_Channel5)
 80029f8:	3220      	adds	r2, #32
 80029fa:	4293      	cmp	r3, r2
 80029fc:	f000 8093 	beq.w	8002b26 <HAL_DFSDM_ChannelInit+0x15e>
  {
    channel = 5;
  }
  else if(Instance == DFSDM1_Channel6)
 8002a00:	4a50      	ldr	r2, [pc, #320]	; (8002b44 <HAL_DFSDM_ChannelInit+0x17c>)
 8002a02:	4851      	ldr	r0, [pc, #324]	; (8002b48 <HAL_DFSDM_ChannelInit+0x180>)
 8002a04:	1f11      	subs	r1, r2, #4
 8002a06:	4283      	cmp	r3, r0
 8002a08:	bf08      	it	eq
 8002a0a:	460a      	moveq	r2, r1
  if (channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002a0c:	6813      	ldr	r3, [r2, #0]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d15f      	bne.n	8002ad2 <HAL_DFSDM_ChannelInit+0x10a>
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002a12:	4620      	mov	r0, r4
 8002a14:	f7fe fdf4 	bl	8001600 <HAL_DFSDM_ChannelMspInit>
  (*channelCounterPtr)++;
 8002a18:	4b4c      	ldr	r3, [pc, #304]	; (8002b4c <HAL_DFSDM_ChannelInit+0x184>)
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	3201      	adds	r2, #1
 8002a1e:	601a      	str	r2, [r3, #0]
  if(*channelCounterPtr == 1U)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d059      	beq.n	8002ada <HAL_DFSDM_ChannelInit+0x112>
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002a26:	6823      	ldr	r3, [r4, #0]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002a28:	69a0      	ldr	r0, [r4, #24]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002a2a:	6819      	ldr	r1, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002a2c:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002a30:	f421 4171 	bic.w	r1, r1, #61696	; 0xf100
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002a34:	432a      	orrs	r2, r5
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002a36:	6a25      	ldr	r5, [r4, #32]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002a38:	6019      	str	r1, [r3, #0]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002a3a:	4302      	orrs	r2, r0
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002a3c:	6818      	ldr	r0, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002a3e:	69e1      	ldr	r1, [r4, #28]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002a40:	4302      	orrs	r2, r0
 8002a42:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002a44:	ea41 0205 	orr.w	r2, r1, r5
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002a48:	6818      	ldr	r0, [r3, #0]
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002a4a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002a4c:	f020 000f 	bic.w	r0, r0, #15
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002a50:	3901      	subs	r1, #1
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002a52:	6018      	str	r0, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002a54:	6818      	ldr	r0, [r3, #0]
 8002a56:	4302      	orrs	r2, r0
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002a58:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002a5a:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002a5c:	689a      	ldr	r2, [r3, #8]
 8002a5e:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002a62:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002a64:	689a      	ldr	r2, [r3, #8]
 8002a66:	4302      	orrs	r2, r0
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002a68:	6b20      	ldr	r0, [r4, #48]	; 0x30
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002a6a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002a6e:	2101      	movs	r1, #1
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002a70:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002a72:	685a      	ldr	r2, [r3, #4]
 8002a74:	f002 0207 	and.w	r2, r2, #7
 8002a78:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002a7a:	685a      	ldr	r2, [r3, #4]
 8002a7c:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8002a80:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002a82:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002a86:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a8e:	601a      	str	r2, [r3, #0]
  if(Instance == DFSDM1_Channel0)
 8002a90:	4a2b      	ldr	r2, [pc, #172]	; (8002b40 <HAL_DFSDM_ChannelInit+0x178>)
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002a92:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  if(Instance == DFSDM1_Channel0)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d03b      	beq.n	8002b12 <HAL_DFSDM_ChannelInit+0x14a>
  else if(Instance == DFSDM1_Channel1)
 8002a9a:	3220      	adds	r2, #32
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d040      	beq.n	8002b22 <HAL_DFSDM_ChannelInit+0x15a>
  else if(Instance == DFSDM1_Channel2)
 8002aa0:	3220      	adds	r2, #32
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d043      	beq.n	8002b2e <HAL_DFSDM_ChannelInit+0x166>
  else if(Instance == DFSDM1_Channel3)
 8002aa6:	3220      	adds	r2, #32
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d042      	beq.n	8002b32 <HAL_DFSDM_ChannelInit+0x16a>
  else if(Instance == DFSDM1_Channel4)
 8002aac:	3220      	adds	r2, #32
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d041      	beq.n	8002b36 <HAL_DFSDM_ChannelInit+0x16e>
  else if(Instance == DFSDM1_Channel5)
 8002ab2:	3220      	adds	r2, #32
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d040      	beq.n	8002b3a <HAL_DFSDM_ChannelInit+0x172>
  else if(Instance == DFSDM1_Channel6)
 8002ab8:	4a22      	ldr	r2, [pc, #136]	; (8002b44 <HAL_DFSDM_ChannelInit+0x17c>)
 8002aba:	4823      	ldr	r0, [pc, #140]	; (8002b48 <HAL_DFSDM_ChannelInit+0x180>)
 8002abc:	1f11      	subs	r1, r2, #4
 8002abe:	4283      	cmp	r3, r0
 8002ac0:	bf08      	it	eq
 8002ac2:	460a      	moveq	r2, r1
  return HAL_OK;
 8002ac4:	2000      	movs	r0, #0
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002ac6:	6014      	str	r4, [r2, #0]
}
 8002ac8:	bd38      	pop	{r3, r4, r5, pc}
 8002aca:	4a21      	ldr	r2, [pc, #132]	; (8002b50 <HAL_DFSDM_ChannelInit+0x188>)
  if (channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002acc:	6813      	ldr	r3, [r2, #0]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d09f      	beq.n	8002a12 <HAL_DFSDM_ChannelInit+0x4a>
    return HAL_ERROR;
 8002ad2:	2001      	movs	r0, #1
}
 8002ad4:	bd38      	pop	{r3, r4, r5, pc}
 8002ad6:	4a1f      	ldr	r2, [pc, #124]	; (8002b54 <HAL_DFSDM_ChannelInit+0x18c>)
 8002ad8:	e7f8      	b.n	8002acc <HAL_DFSDM_ChannelInit+0x104>
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002ada:	4b19      	ldr	r3, [pc, #100]	; (8002b40 <HAL_DFSDM_ChannelInit+0x178>)
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8002ae2:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	68a1      	ldr	r1, [r4, #8]
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8002af2:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002af4:	7922      	ldrb	r2, [r4, #4]
 8002af6:	2a01      	cmp	r2, #1
 8002af8:	d105      	bne.n	8002b06 <HAL_DFSDM_ChannelInit+0x13e>
      channel0Instance->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002afa:	68e1      	ldr	r1, [r4, #12]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	3901      	subs	r1, #1
 8002b00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002b04:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002b06:	4a0e      	ldr	r2, [pc, #56]	; (8002b40 <HAL_DFSDM_ChannelInit+0x178>)
 8002b08:	6813      	ldr	r3, [r2, #0]
 8002b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b0e:	6013      	str	r3, [r2, #0]
 8002b10:	e789      	b.n	8002a26 <HAL_DFSDM_ChannelInit+0x5e>
 8002b12:	4a0f      	ldr	r2, [pc, #60]	; (8002b50 <HAL_DFSDM_ChannelInit+0x188>)
 8002b14:	e7d6      	b.n	8002ac4 <HAL_DFSDM_ChannelInit+0xfc>
    return HAL_ERROR;
 8002b16:	2001      	movs	r0, #1
}
 8002b18:	4770      	bx	lr
 8002b1a:	4a0f      	ldr	r2, [pc, #60]	; (8002b58 <HAL_DFSDM_ChannelInit+0x190>)
 8002b1c:	e7d6      	b.n	8002acc <HAL_DFSDM_ChannelInit+0x104>
 8002b1e:	4a0f      	ldr	r2, [pc, #60]	; (8002b5c <HAL_DFSDM_ChannelInit+0x194>)
 8002b20:	e7d4      	b.n	8002acc <HAL_DFSDM_ChannelInit+0x104>
 8002b22:	4a0c      	ldr	r2, [pc, #48]	; (8002b54 <HAL_DFSDM_ChannelInit+0x18c>)
 8002b24:	e7ce      	b.n	8002ac4 <HAL_DFSDM_ChannelInit+0xfc>
 8002b26:	4a0e      	ldr	r2, [pc, #56]	; (8002b60 <HAL_DFSDM_ChannelInit+0x198>)
 8002b28:	e7d0      	b.n	8002acc <HAL_DFSDM_ChannelInit+0x104>
 8002b2a:	4a0e      	ldr	r2, [pc, #56]	; (8002b64 <HAL_DFSDM_ChannelInit+0x19c>)
 8002b2c:	e7ce      	b.n	8002acc <HAL_DFSDM_ChannelInit+0x104>
 8002b2e:	4a0a      	ldr	r2, [pc, #40]	; (8002b58 <HAL_DFSDM_ChannelInit+0x190>)
 8002b30:	e7c8      	b.n	8002ac4 <HAL_DFSDM_ChannelInit+0xfc>
 8002b32:	4a0a      	ldr	r2, [pc, #40]	; (8002b5c <HAL_DFSDM_ChannelInit+0x194>)
 8002b34:	e7c6      	b.n	8002ac4 <HAL_DFSDM_ChannelInit+0xfc>
 8002b36:	4a0b      	ldr	r2, [pc, #44]	; (8002b64 <HAL_DFSDM_ChannelInit+0x19c>)
 8002b38:	e7c4      	b.n	8002ac4 <HAL_DFSDM_ChannelInit+0xfc>
 8002b3a:	4a09      	ldr	r2, [pc, #36]	; (8002b60 <HAL_DFSDM_ChannelInit+0x198>)
 8002b3c:	e7c2      	b.n	8002ac4 <HAL_DFSDM_ChannelInit+0xfc>
 8002b3e:	bf00      	nop
 8002b40:	40017000 	.word	0x40017000
 8002b44:	20000940 	.word	0x20000940
 8002b48:	400170c0 	.word	0x400170c0
 8002b4c:	20000944 	.word	0x20000944
 8002b50:	20000924 	.word	0x20000924
 8002b54:	20000928 	.word	0x20000928
 8002b58:	2000092c 	.word	0x2000092c
 8002b5c:	20000930 	.word	0x20000930
 8002b60:	20000938 	.word	0x20000938
 8002b64:	20000934 	.word	0x20000934

08002b68 <HAL_DFSDM_FilterInit>:
  if(hdfsdm_filter == NULL)
 8002b68:	2800      	cmp	r0, #0
 8002b6a:	d06a      	beq.n	8002c42 <HAL_DFSDM_FilterInit+0xda>
  if ((hdfsdm_filter->Instance == filter0Instance) &&
 8002b6c:	4b36      	ldr	r3, [pc, #216]	; (8002c48 <HAL_DFSDM_FilterInit+0xe0>)
 8002b6e:	6802      	ldr	r2, [r0, #0]
 8002b70:	429a      	cmp	r2, r3
{
 8002b72:	b510      	push	{r4, lr}
 8002b74:	4604      	mov	r4, r0
  if ((hdfsdm_filter->Instance == filter0Instance) &&
 8002b76:	d058      	beq.n	8002c2a <HAL_DFSDM_FilterInit+0xc2>
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8002b78:	2300      	movs	r3, #0
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8002b7a:	2201      	movs	r2, #1
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8002b7c:	4620      	mov	r0, r4
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8002b7e:	6323      	str	r3, [r4, #48]	; 0x30
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8002b80:	6523      	str	r3, [r4, #80]	; 0x50
  hdfsdm_filter->InjConvRemaining    = 1;
 8002b82:	e9c4 2211 	strd	r2, r2, [r4, #68]	; 0x44
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8002b86:	f7fe fc41 	bl	800140c <HAL_DFSDM_FilterMspInit>
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8002b8a:	6823      	ldr	r3, [r4, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8002b92:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8002b94:	7a22      	ldrb	r2, [r4, #8]
 8002b96:	2a01      	cmp	r2, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	bf0c      	ite	eq
 8002b9c:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8002ba0:	f022 5200 	bicne.w	r2, r2, #536870912	; 0x20000000
 8002ba4:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8002ba6:	7a62      	ldrb	r2, [r4, #9]
 8002ba8:	2a01      	cmp	r2, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	bf0c      	ite	eq
 8002bae:	f442 1200 	orreq.w	r2, r2, #2097152	; 0x200000
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8002bb2:	f422 1200 	bicne.w	r2, r2, #2097152	; 0x200000
 8002bb6:	601a      	str	r2, [r3, #0]
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8002bb8:	4a24      	ldr	r2, [pc, #144]	; (8002c4c <HAL_DFSDM_FilterInit+0xe4>)
 8002bba:	6819      	ldr	r1, [r3, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8002bbc:	68e0      	ldr	r0, [r4, #12]
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8002bbe:	400a      	ands	r2, r1
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8002bc0:	2802      	cmp	r0, #2
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8002bc2:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8002bc4:	d038      	beq.n	8002c38 <HAL_DFSDM_FilterInit+0xd0>
  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8002bc6:	f894 c010 	ldrb.w	ip, [r4, #16]
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8002bca:	681a      	ldr	r2, [r3, #0]
  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8002bcc:	f1bc 0f01 	cmp.w	ip, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8002bd0:	bf0c      	ite	eq
 8002bd2:	f042 0210 	orreq.w	r2, r2, #16
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8002bd6:	f022 0210 	bicne.w	r2, r2, #16
 8002bda:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8002bdc:	7c62      	ldrb	r2, [r4, #17]
 8002bde:	2a01      	cmp	r2, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	bf0c      	ite	eq
 8002be4:	f042 0220 	orreq.w	r2, r2, #32
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8002be8:	f022 0220 	bicne.w	r2, r2, #32
 8002bec:	601a      	str	r2, [r3, #0]
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8002bee:	4a18      	ldr	r2, [pc, #96]	; (8002c50 <HAL_DFSDM_FilterInit+0xe8>)
 8002bf0:	6959      	ldr	r1, [r3, #20]
 8002bf2:	400a      	ands	r2, r1
 8002bf4:	615a      	str	r2, [r3, #20]
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8002bf6:	6a62      	ldr	r2, [r4, #36]	; 0x24
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002bf8:	6959      	ldr	r1, [r3, #20]
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8002bfa:	3a01      	subs	r2, #1
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	69e1      	ldr	r1, [r4, #28]
 8002c00:	430a      	orrs	r2, r1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8002c02:	6a21      	ldr	r1, [r4, #32]
 8002c04:	3901      	subs	r1, #1
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002c06:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8002c0a:	2101      	movs	r1, #1
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002c0c:	615a      	str	r2, [r3, #20]
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8002c0e:	f884 c040 	strb.w	ip, [r4, #64]	; 0x40
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8002c12:	681a      	ldr	r2, [r3, #0]
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8002c14:	63a0      	str	r0, [r4, #56]	; 0x38
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8002c16:	6860      	ldr	r0, [r4, #4]
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8002c18:	430a      	orrs	r2, r1
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8002c1a:	6360      	str	r0, [r4, #52]	; 0x34
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8002c1c:	69a0      	ldr	r0, [r4, #24]
 8002c1e:	63e0      	str	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8002c20:	2000      	movs	r0, #0
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8002c22:	601a      	str	r2, [r3, #0]
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8002c24:	f884 104c 	strb.w	r1, [r4, #76]	; 0x4c
}
 8002c28:	bd10      	pop	{r4, pc}
  if ((hdfsdm_filter->Instance == filter0Instance) &&
 8002c2a:	6840      	ldr	r0, [r0, #4]
 8002c2c:	2801      	cmp	r0, #1
 8002c2e:	d0fb      	beq.n	8002c28 <HAL_DFSDM_FilterInit+0xc0>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8002c30:	68e0      	ldr	r0, [r4, #12]
 8002c32:	2801      	cmp	r0, #1
 8002c34:	d1a0      	bne.n	8002b78 <HAL_DFSDM_FilterInit+0x10>
 8002c36:	e7f7      	b.n	8002c28 <HAL_DFSDM_FilterInit+0xc0>
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	6961      	ldr	r1, [r4, #20]
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	601a      	str	r2, [r3, #0]
 8002c40:	e7c1      	b.n	8002bc6 <HAL_DFSDM_FilterInit+0x5e>
    return HAL_ERROR;
 8002c42:	2001      	movs	r0, #1
}
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	40017100 	.word	0x40017100
 8002c4c:	ffff80f7 	.word	0xffff80f7
 8002c50:	1c00ff00 	.word	0x1c00ff00

08002c54 <HAL_DFSDM_FilterConfigRegChannel>:
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002c54:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	2bfd      	cmp	r3, #253	; 0xfd
 8002c5e:	d816      	bhi.n	8002c8e <HAL_DFSDM_FilterConfigRegChannel+0x3a>
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8002c60:	4684      	mov	ip, r0
 8002c62:	6800      	ldr	r0, [r0, #0]
 8002c64:	4b11      	ldr	r3, [pc, #68]	; (8002cac <HAL_DFSDM_FilterConfigRegChannel+0x58>)
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8002c66:	2a01      	cmp	r2, #1
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8002c68:	ea4f 2101 	mov.w	r1, r1, lsl #8
{
 8002c6c:	b410      	push	{r4}
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8002c6e:	6804      	ldr	r4, [r0, #0]
 8002c70:	ea03 0304 	and.w	r3, r3, r4
 8002c74:	6003      	str	r3, [r0, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8002c76:	d00c      	beq.n	8002c92 <HAL_DFSDM_FilterConfigRegChannel+0x3e>
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8002c78:	6803      	ldr	r3, [r0, #0]
 8002c7a:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
}
 8002c7e:	f85d 4b04 	ldr.w	r4, [sp], #4
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8002c82:	4319      	orrs	r1, r3
 8002c84:	6001      	str	r1, [r0, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c86:	2000      	movs	r0, #0
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8002c88:	f8cc 2030 	str.w	r2, [ip, #48]	; 0x30
}
 8002c8c:	4770      	bx	lr
    status = HAL_ERROR;
 8002c8e:	2001      	movs	r0, #1
}
 8002c90:	4770      	bx	lr
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8002c92:	6804      	ldr	r4, [r0, #0]
 8002c94:	f001 437f 	and.w	r3, r1, #4278190080	; 0xff000000
 8002c98:	4323      	orrs	r3, r4
}
 8002c9a:	f85d 4b04 	ldr.w	r4, [sp], #4
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8002c9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ca2:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ca4:	2000      	movs	r0, #0
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8002ca6:	f8cc 2030 	str.w	r2, [ip, #48]	; 0x30
}
 8002caa:	4770      	bx	lr
 8002cac:	f8fbffff 	.word	0xf8fbffff

08002cb0 <HAL_DFSDM_FilterRegularStart_DMA>:
  if((pData == NULL) || (Length == 0U))
 8002cb0:	b141      	cbz	r1, 8002cc4 <HAL_DFSDM_FilterRegularStart_DMA+0x14>
 8002cb2:	b13a      	cbz	r2, 8002cc4 <HAL_DFSDM_FilterRegularStart_DMA+0x14>
{
 8002cb4:	b570      	push	{r4, r5, r6, lr}
  else if((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 8002cb6:	6805      	ldr	r5, [r0, #0]
 8002cb8:	4604      	mov	r4, r0
 8002cba:	682b      	ldr	r3, [r5, #0]
 8002cbc:	029b      	lsls	r3, r3, #10
 8002cbe:	d403      	bmi.n	8002cc8 <HAL_DFSDM_FilterRegularStart_DMA+0x18>
    status = HAL_ERROR;
 8002cc0:	2001      	movs	r0, #1
}
 8002cc2:	bd70      	pop	{r4, r5, r6, pc}
    status = HAL_ERROR;
 8002cc4:	2001      	movs	r0, #1
}
 8002cc6:	4770      	bx	lr
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8002cc8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002cca:	b1eb      	cbz	r3, 8002d08 <HAL_DFSDM_FilterRegularStart_DMA+0x58>
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8002ccc:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8002cd0:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d1f3      	bne.n	8002cc0 <HAL_DFSDM_FilterRegularStart_DMA+0x10>
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8002cd8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002cda:	4e30      	ldr	r6, [pc, #192]	; (8002d9c <HAL_DFSDM_FilterRegularStart_DMA+0xec>)
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8002cdc:	4b30      	ldr	r3, [pc, #192]	; (8002da0 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>)
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8002cde:	63c6      	str	r6, [r0, #60]	; 0x3c
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8002ce0:	69c6      	ldr	r6, [r0, #28]
 8002ce2:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8002ce6:	4e2f      	ldr	r6, [pc, #188]	; (8002da4 <HAL_DFSDM_FilterRegularStart_DMA+0xf4>)
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8002ce8:	bf18      	it	ne
 8002cea:	2300      	movne	r3, #0
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8002cec:	64c6      	str	r6, [r0, #76]	; 0x4c
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 8002cee:	6403      	str	r3, [r0, #64]	; 0x40
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	460a      	mov	r2, r1
 8002cf4:	f105 011c 	add.w	r1, r5, #28
 8002cf8:	f000 fbec 	bl	80034d4 <HAL_DMA_Start_IT>
 8002cfc:	b1e0      	cbz	r0, 8002d38 <HAL_DFSDM_FilterRegularStart_DMA+0x88>
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8002cfe:	23ff      	movs	r3, #255	; 0xff
      status = HAL_ERROR;
 8002d00:	2001      	movs	r0, #1
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8002d02:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
}
 8002d06:	bd70      	pop	{r4, r5, r6, pc}
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8002d08:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1de      	bne.n	8002ccc <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8002d0e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8002d10:	2a01      	cmp	r2, #1
 8002d12:	69c3      	ldr	r3, [r0, #28]
 8002d14:	d001      	beq.n	8002d1a <HAL_DFSDM_FilterRegularStart_DMA+0x6a>
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d0d2      	beq.n	8002cc0 <HAL_DFSDM_FilterRegularStart_DMA+0x10>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8002d1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d1e:	d0cf      	beq.n	8002cc0 <HAL_DFSDM_FilterRegularStart_DMA+0x10>
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8002d20:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8002d24:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d1c9      	bne.n	8002cc0 <HAL_DFSDM_FilterRegularStart_DMA+0x10>
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8002d2c:	4b1b      	ldr	r3, [pc, #108]	; (8002d9c <HAL_DFSDM_FilterRegularStart_DMA+0xec>)
 8002d2e:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8002d30:	4b1c      	ldr	r3, [pc, #112]	; (8002da4 <HAL_DFSDM_FilterRegularStart_DMA+0xf4>)
 8002d32:	64c3      	str	r3, [r0, #76]	; 0x4c
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8002d34:	2300      	movs	r3, #0
 8002d36:	e7da      	b.n	8002cee <HAL_DFSDM_FilterRegularStart_DMA+0x3e>
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
  /* Check regular trigger */
  if(hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8002d38:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002d3a:	b96b      	cbnz	r3, 8002d58 <HAL_DFSDM_FilterRegularStart_DMA+0xa8>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8002d3c:	6822      	ldr	r2, [r4, #0]
 8002d3e:	6813      	ldr	r3, [r2, #0]
 8002d40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d44:	6013      	str	r3, [r2, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;

    /* If injected conversion was in progress, restart it */
    if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8002d46:	f894 204c 	ldrb.w	r2, [r4, #76]	; 0x4c
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8002d4a:	2a01      	cmp	r2, #1
 8002d4c:	bf0c      	ite	eq
 8002d4e:	2302      	moveq	r3, #2
 8002d50:	2304      	movne	r3, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8002d52:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
}
 8002d56:	bd70      	pop	{r4, r5, r6, pc}
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8002d58:	6823      	ldr	r3, [r4, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	f022 0201 	bic.w	r2, r2, #1
 8002d60:	601a      	str	r2, [r3, #0]
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002d68:	601a      	str	r2, [r3, #0]
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	f042 0201 	orr.w	r2, r2, #1
 8002d70:	601a      	str	r2, [r3, #0]
    if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8002d72:	f894 204c 	ldrb.w	r2, [r4, #76]	; 0x4c
 8002d76:	2a03      	cmp	r2, #3
 8002d78:	d1e7      	bne.n	8002d4a <HAL_DFSDM_FilterRegularStart_DMA+0x9a>
      if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8002d7a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002d7c:	b91a      	cbnz	r2, 8002d86 <HAL_DFSDM_FilterRegularStart_DMA+0xd6>
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	f042 0202 	orr.w	r2, r2, #2
 8002d84:	601a      	str	r2, [r3, #0]
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8002d86:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8002d8a:	2b01      	cmp	r3, #1
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8002d8c:	f04f 0304 	mov.w	r3, #4
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8002d90:	bf0c      	ite	eq
 8002d92:	6c62      	ldreq	r2, [r4, #68]	; 0x44
 8002d94:	2201      	movne	r2, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8002d96:	64a2      	str	r2, [r4, #72]	; 0x48
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8002d98:	e7db      	b.n	8002d52 <HAL_DFSDM_FilterRegularStart_DMA+0xa2>
 8002d9a:	bf00      	nop
 8002d9c:	08002da9 	.word	0x08002da9
 8002da0:	08002db5 	.word	0x08002db5
 8002da4:	08002dc5 	.word	0x08002dc5

08002da8 <DFSDM_DMARegularConvCplt>:
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8002da8:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8002daa:	b508      	push	{r3, lr}
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8002dac:	f7fe fa1a 	bl	80011e4 <HAL_DFSDM_FilterRegConvCpltCallback>
}
 8002db0:	bd08      	pop	{r3, pc}
 8002db2:	bf00      	nop

08002db4 <DFSDM_DMARegularHalfConvCplt>:
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8002db4:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8002db6:	b508      	push	{r3, lr}
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8002db8:	f7fe f9da 	bl	8001170 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
}
 8002dbc:	bd08      	pop	{r3, pc}
 8002dbe:	bf00      	nop

08002dc0 <HAL_DFSDM_FilterErrorCallback>:
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop

08002dc4 <DFSDM_DMAError>:
{
 8002dc4:	b508      	push	{r3, lr}
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8002dc6:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	6503      	str	r3, [r0, #80]	; 0x50
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8002dcc:	f7ff fff8 	bl	8002dc0 <HAL_DFSDM_FilterErrorCallback>
}
 8002dd0:	bd08      	pop	{r3, pc}
 8002dd2:	bf00      	nop

08002dd4 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002dd4:	6802      	ldr	r2, [r0, #0]
{
 8002dd6:	4601      	mov	r1, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002dd8:	4b32      	ldr	r3, [pc, #200]	; (8002ea4 <DMA_CalcBaseAndBitshift+0xd0>)
 8002dda:	4833      	ldr	r0, [pc, #204]	; (8002ea8 <DMA_CalcBaseAndBitshift+0xd4>)
{
 8002ddc:	b470      	push	{r4, r5, r6}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002dde:	4e33      	ldr	r6, [pc, #204]	; (8002eac <DMA_CalcBaseAndBitshift+0xd8>)
 8002de0:	4d33      	ldr	r5, [pc, #204]	; (8002eb0 <DMA_CalcBaseAndBitshift+0xdc>)
 8002de2:	42b2      	cmp	r2, r6
 8002de4:	bf18      	it	ne
 8002de6:	429a      	cmpne	r2, r3
 8002de8:	4c32      	ldr	r4, [pc, #200]	; (8002eb4 <DMA_CalcBaseAndBitshift+0xe0>)
 8002dea:	bf0c      	ite	eq
 8002dec:	2301      	moveq	r3, #1
 8002dee:	2300      	movne	r3, #0
 8002df0:	42aa      	cmp	r2, r5
 8002df2:	bf08      	it	eq
 8002df4:	f043 0301 	orreq.w	r3, r3, #1
 8002df8:	42a2      	cmp	r2, r4
 8002dfa:	bf08      	it	eq
 8002dfc:	f043 0301 	orreq.w	r3, r3, #1
 8002e00:	3430      	adds	r4, #48	; 0x30
 8002e02:	4282      	cmp	r2, r0
 8002e04:	bf08      	it	eq
 8002e06:	f043 0301 	orreq.w	r3, r3, #1
 8002e0a:	3030      	adds	r0, #48	; 0x30
 8002e0c:	42a2      	cmp	r2, r4
 8002e0e:	bf08      	it	eq
 8002e10:	f043 0301 	orreq.w	r3, r3, #1
 8002e14:	3430      	adds	r4, #48	; 0x30
 8002e16:	4282      	cmp	r2, r0
 8002e18:	bf08      	it	eq
 8002e1a:	f043 0301 	orreq.w	r3, r3, #1
 8002e1e:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8002e22:	42a2      	cmp	r2, r4
 8002e24:	bf08      	it	eq
 8002e26:	f043 0301 	orreq.w	r3, r3, #1
 8002e2a:	f504 745c 	add.w	r4, r4, #880	; 0x370
 8002e2e:	4282      	cmp	r2, r0
 8002e30:	bf08      	it	eq
 8002e32:	f043 0301 	orreq.w	r3, r3, #1
 8002e36:	3030      	adds	r0, #48	; 0x30
 8002e38:	42a2      	cmp	r2, r4
 8002e3a:	bf08      	it	eq
 8002e3c:	f043 0301 	orreq.w	r3, r3, #1
 8002e40:	3430      	adds	r4, #48	; 0x30
 8002e42:	4282      	cmp	r2, r0
 8002e44:	bf08      	it	eq
 8002e46:	f043 0301 	orreq.w	r3, r3, #1
 8002e4a:	3030      	adds	r0, #48	; 0x30
 8002e4c:	42a2      	cmp	r2, r4
 8002e4e:	bf08      	it	eq
 8002e50:	f043 0301 	orreq.w	r3, r3, #1
 8002e54:	3430      	adds	r4, #48	; 0x30
 8002e56:	4282      	cmp	r2, r0
 8002e58:	bf08      	it	eq
 8002e5a:	f043 0301 	orreq.w	r3, r3, #1
 8002e5e:	3030      	adds	r0, #48	; 0x30
 8002e60:	42a2      	cmp	r2, r4
 8002e62:	bf08      	it	eq
 8002e64:	f043 0301 	orreq.w	r3, r3, #1
 8002e68:	4282      	cmp	r2, r0
 8002e6a:	bf08      	it	eq
 8002e6c:	f043 0301 	orreq.w	r3, r3, #1
 8002e70:	b913      	cbnz	r3, 8002e78 <DMA_CalcBaseAndBitshift+0xa4>
 8002e72:	4b11      	ldr	r3, [pc, #68]	; (8002eb8 <DMA_CalcBaseAndBitshift+0xe4>)
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d112      	bne.n	8002e9e <DMA_CalcBaseAndBitshift+0xca>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002e78:	b2d3      	uxtb	r3, r2
 8002e7a:	4810      	ldr	r0, [pc, #64]	; (8002ebc <DMA_CalcBaseAndBitshift+0xe8>)

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002e7c:	4c10      	ldr	r4, [pc, #64]	; (8002ec0 <DMA_CalcBaseAndBitshift+0xec>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002e7e:	3b10      	subs	r3, #16
 8002e80:	fba0 5003 	umull	r5, r0, r0, r3

    if (stream_number > 3U)
 8002e84:	2b5f      	cmp	r3, #95	; 0x5f
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002e86:	ea4f 1010 	mov.w	r0, r0, lsr #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002e8a:	5c20      	ldrb	r0, [r4, r0]
 8002e8c:	65c8      	str	r0, [r1, #92]	; 0x5c
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002e8e:	480d      	ldr	r0, [pc, #52]	; (8002ec4 <DMA_CalcBaseAndBitshift+0xf0>)
 8002e90:	ea00 0002 	and.w	r0, r0, r2
 8002e94:	bf88      	it	hi
 8002e96:	3004      	addhi	r0, #4
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8002e98:	6588      	str	r0, [r1, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
 8002e9a:	bc70      	pop	{r4, r5, r6}
 8002e9c:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8002e9e:	f022 00ff 	bic.w	r0, r2, #255	; 0xff
 8002ea2:	e7f9      	b.n	8002e98 <DMA_CalcBaseAndBitshift+0xc4>
 8002ea4:	40020010 	.word	0x40020010
 8002ea8:	40020070 	.word	0x40020070
 8002eac:	40020028 	.word	0x40020028
 8002eb0:	40020040 	.word	0x40020040
 8002eb4:	40020058 	.word	0x40020058
 8002eb8:	400204b8 	.word	0x400204b8
 8002ebc:	aaaaaaab 	.word	0xaaaaaaab
 8002ec0:	080084ac 	.word	0x080084ac
 8002ec4:	fffffc00 	.word	0xfffffc00

08002ec8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8002ec8:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002eca:	4a27      	ldr	r2, [pc, #156]	; (8002f68 <DMA_CalcDMAMUXChannelBaseAndMask+0xa0>)
 8002ecc:	4927      	ldr	r1, [pc, #156]	; (8002f6c <DMA_CalcDMAMUXChannelBaseAndMask+0xa4>)
{
 8002ece:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002ed0:	4d27      	ldr	r5, [pc, #156]	; (8002f70 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 8002ed2:	4c28      	ldr	r4, [pc, #160]	; (8002f74 <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
 8002ed4:	42ab      	cmp	r3, r5
 8002ed6:	bf18      	it	ne
 8002ed8:	4293      	cmpne	r3, r2
 8002eda:	bf0c      	ite	eq
 8002edc:	2201      	moveq	r2, #1
 8002ede:	2200      	movne	r2, #0
 8002ee0:	428b      	cmp	r3, r1
 8002ee2:	bf08      	it	eq
 8002ee4:	f042 0201 	orreq.w	r2, r2, #1
 8002ee8:	3128      	adds	r1, #40	; 0x28
 8002eea:	42a3      	cmp	r3, r4
 8002eec:	bf08      	it	eq
 8002eee:	f042 0201 	orreq.w	r2, r2, #1
 8002ef2:	3428      	adds	r4, #40	; 0x28
 8002ef4:	428b      	cmp	r3, r1
 8002ef6:	bf08      	it	eq
 8002ef8:	f042 0201 	orreq.w	r2, r2, #1
 8002efc:	3128      	adds	r1, #40	; 0x28
 8002efe:	42a3      	cmp	r3, r4
 8002f00:	bf08      	it	eq
 8002f02:	f042 0201 	orreq.w	r2, r2, #1
 8002f06:	428b      	cmp	r3, r1
 8002f08:	bf08      	it	eq
 8002f0a:	f042 0201 	orreq.w	r2, r2, #1
 8002f0e:	b912      	cbnz	r2, 8002f16 <DMA_CalcDMAMUXChannelBaseAndMask+0x4e>
 8002f10:	4a19      	ldr	r2, [pc, #100]	; (8002f78 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d113      	bne.n	8002f3e <DMA_CalcDMAMUXChannelBaseAndMask+0x76>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	4918      	ldr	r1, [pc, #96]	; (8002f7c <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002f1a:	4a19      	ldr	r2, [pc, #100]	; (8002f80 <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8002f1c:	3b08      	subs	r3, #8
 8002f1e:	4c19      	ldr	r4, [pc, #100]	; (8002f84 <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
 8002f20:	fba1 1303 	umull	r1, r3, r1, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002f24:	2101      	movs	r1, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002f26:	eb02 1213 	add.w	r2, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002f2a:	f3c3 1304 	ubfx	r3, r3, #4, #5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002f2e:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002f30:	fa01 f303 	lsl.w	r3, r1, r3
 8002f34:	6683      	str	r3, [r0, #104]	; 0x68
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8002f36:	e9c0 2418 	strd	r2, r4, [r0, #96]	; 0x60
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8002f3a:	bc30      	pop	{r4, r5}
 8002f3c:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002f3e:	b2d9      	uxtb	r1, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002f40:	4a11      	ldr	r2, [pc, #68]	; (8002f88 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002f42:	4c12      	ldr	r4, [pc, #72]	; (8002f8c <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
 8002f44:	3910      	subs	r1, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002f46:	441a      	add	r2, r3
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002f48:	fba4 4101 	umull	r4, r1, r4, r1
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002f4c:	2aa8      	cmp	r2, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002f4e:	ea4f 1111 	mov.w	r1, r1, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002f52:	d800      	bhi.n	8002f56 <DMA_CalcDMAMUXChannelBaseAndMask+0x8e>
      stream_number += 8U;
 8002f54:	3108      	adds	r1, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002f56:	4a0e      	ldr	r2, [pc, #56]	; (8002f90 <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002f58:	f001 041f 	and.w	r4, r1, #31
 8002f5c:	2301      	movs	r3, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002f5e:	440a      	add	r2, r1
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002f60:	40a3      	lsls	r3, r4
 8002f62:	4c0c      	ldr	r4, [pc, #48]	; (8002f94 <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002f64:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002f66:	e7e5      	b.n	8002f34 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>
 8002f68:	58025408 	.word	0x58025408
 8002f6c:	58025430 	.word	0x58025430
 8002f70:	5802541c 	.word	0x5802541c
 8002f74:	58025444 	.word	0x58025444
 8002f78:	58025494 	.word	0x58025494
 8002f7c:	cccccccd 	.word	0xcccccccd
 8002f80:	16009600 	.word	0x16009600
 8002f84:	58025880 	.word	0x58025880
 8002f88:	bffdfbf0 	.word	0xbffdfbf0
 8002f8c:	aaaaaaab 	.word	0xaaaaaaab
 8002f90:	10008200 	.word	0x10008200
 8002f94:	40020880 	.word	0x40020880

08002f98 <HAL_DMA_Init>:
{
 8002f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f9c:	4605      	mov	r5, r0
 8002f9e:	b083      	sub	sp, #12
  uint32_t tickstart = HAL_GetTick();
 8002fa0:	f7fe fd6c 	bl	8001a7c <HAL_GetTick>
  if(hdma == NULL)
 8002fa4:	2d00      	cmp	r5, #0
 8002fa6:	f000 8199 	beq.w	80032dc <HAL_DMA_Init+0x344>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002faa:	682c      	ldr	r4, [r5, #0]
 8002fac:	4606      	mov	r6, r0
 8002fae:	4ba0      	ldr	r3, [pc, #640]	; (8003230 <HAL_DMA_Init+0x298>)
 8002fb0:	429c      	cmp	r4, r3
 8002fb2:	d048      	beq.n	8003046 <HAL_DMA_Init+0xae>
 8002fb4:	3318      	adds	r3, #24
 8002fb6:	429c      	cmp	r4, r3
 8002fb8:	d045      	beq.n	8003046 <HAL_DMA_Init+0xae>
 8002fba:	3330      	adds	r3, #48	; 0x30
 8002fbc:	4a9d      	ldr	r2, [pc, #628]	; (8003234 <HAL_DMA_Init+0x29c>)
 8002fbe:	4294      	cmp	r4, r2
 8002fc0:	bf18      	it	ne
 8002fc2:	429c      	cmpne	r4, r3
 8002fc4:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8002fc8:	bf0c      	ite	eq
 8002fca:	2301      	moveq	r3, #1
 8002fcc:	2300      	movne	r3, #0
 8002fce:	4294      	cmp	r4, r2
 8002fd0:	bf08      	it	eq
 8002fd2:	f043 0301 	orreq.w	r3, r3, #1
 8002fd6:	3218      	adds	r2, #24
 8002fd8:	4294      	cmp	r4, r2
 8002fda:	bf08      	it	eq
 8002fdc:	f043 0301 	orreq.w	r3, r3, #1
 8002fe0:	3218      	adds	r2, #24
 8002fe2:	4294      	cmp	r4, r2
 8002fe4:	bf08      	it	eq
 8002fe6:	f043 0301 	orreq.w	r3, r3, #1
 8002fea:	3218      	adds	r2, #24
 8002fec:	4294      	cmp	r4, r2
 8002fee:	bf08      	it	eq
 8002ff0:	f043 0301 	orreq.w	r3, r3, #1
 8002ff4:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8002ff8:	4294      	cmp	r4, r2
 8002ffa:	bf08      	it	eq
 8002ffc:	f043 0301 	orreq.w	r3, r3, #1
 8003000:	3218      	adds	r2, #24
 8003002:	4294      	cmp	r4, r2
 8003004:	bf08      	it	eq
 8003006:	f043 0301 	orreq.w	r3, r3, #1
 800300a:	3218      	adds	r2, #24
 800300c:	4294      	cmp	r4, r2
 800300e:	bf08      	it	eq
 8003010:	f043 0301 	orreq.w	r3, r3, #1
 8003014:	3218      	adds	r2, #24
 8003016:	4294      	cmp	r4, r2
 8003018:	bf08      	it	eq
 800301a:	f043 0301 	orreq.w	r3, r3, #1
 800301e:	3218      	adds	r2, #24
 8003020:	4294      	cmp	r4, r2
 8003022:	bf08      	it	eq
 8003024:	f043 0301 	orreq.w	r3, r3, #1
 8003028:	3218      	adds	r2, #24
 800302a:	4294      	cmp	r4, r2
 800302c:	bf08      	it	eq
 800302e:	f043 0301 	orreq.w	r3, r3, #1
 8003032:	3218      	adds	r2, #24
 8003034:	4294      	cmp	r4, r2
 8003036:	bf08      	it	eq
 8003038:	f043 0301 	orreq.w	r3, r3, #1
 800303c:	b91b      	cbnz	r3, 8003046 <HAL_DMA_Init+0xae>
 800303e:	4b7e      	ldr	r3, [pc, #504]	; (8003238 <HAL_DMA_Init+0x2a0>)
 8003040:	429c      	cmp	r4, r3
 8003042:	f040 81a4 	bne.w	800338e <HAL_DMA_Init+0x3f6>
    hdma->State = HAL_DMA_STATE_BUSY;
 8003046:	2302      	movs	r3, #2
 8003048:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 800304c:	2300      	movs	r3, #0
 800304e:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
    __HAL_DMA_DISABLE(hdma);
 8003052:	6823      	ldr	r3, [r4, #0]
 8003054:	f023 0301 	bic.w	r3, r3, #1
 8003058:	6023      	str	r3, [r4, #0]
 800305a:	e006      	b.n	800306a <HAL_DMA_Init+0xd2>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800305c:	f7fe fd0e 	bl	8001a7c <HAL_GetTick>
 8003060:	1b80      	subs	r0, r0, r6
 8003062:	2805      	cmp	r0, #5
 8003064:	f200 8120 	bhi.w	80032a8 <HAL_DMA_Init+0x310>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003068:	682c      	ldr	r4, [r5, #0]
 800306a:	6823      	ldr	r3, [r4, #0]
 800306c:	07df      	lsls	r7, r3, #31
 800306e:	d4f5      	bmi.n	800305c <HAL_DMA_Init+0xc4>
    registerValue |=  hdma->Init.Direction           |
 8003070:	e9d5 3002 	ldrd	r3, r0, [r5, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003074:	6929      	ldr	r1, [r5, #16]
    registerValue |=  hdma->Init.Direction           |
 8003076:	4303      	orrs	r3, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003078:	69aa      	ldr	r2, [r5, #24]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800307a:	6820      	ldr	r0, [r4, #0]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800307c:	430b      	orrs	r3, r1
 800307e:	6969      	ldr	r1, [r5, #20]
 8003080:	430b      	orrs	r3, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003082:	69e9      	ldr	r1, [r5, #28]
 8003084:	4313      	orrs	r3, r2
 8003086:	430b      	orrs	r3, r1
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003088:	496c      	ldr	r1, [pc, #432]	; (800323c <HAL_DMA_Init+0x2a4>)
 800308a:	4001      	ands	r1, r0
            hdma->Init.Mode                | hdma->Init.Priority;
 800308c:	6a28      	ldr	r0, [r5, #32]
 800308e:	4303      	orrs	r3, r0
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003090:	486b      	ldr	r0, [pc, #428]	; (8003240 <HAL_DMA_Init+0x2a8>)
    registerValue |=  hdma->Init.Direction           |
 8003092:	430b      	orrs	r3, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003094:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8003096:	2904      	cmp	r1, #4
 8003098:	f000 8124 	beq.w	80032e4 <HAL_DMA_Init+0x34c>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800309c:	6806      	ldr	r6, [r0, #0]
 800309e:	4869      	ldr	r0, [pc, #420]	; (8003244 <HAL_DMA_Init+0x2ac>)
 80030a0:	4030      	ands	r0, r6
 80030a2:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 80030a6:	f080 80dd 	bcs.w	8003264 <HAL_DMA_Init+0x2cc>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80030aa:	6023      	str	r3, [r4, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80030ac:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80030ae:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 80030b2:	430b      	orrs	r3, r1
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80030b4:	6163      	str	r3, [r4, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80030b6:	4628      	mov	r0, r5
 80030b8:	f7ff fe8c 	bl	8002dd4 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80030bc:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80030be:	233f      	movs	r3, #63	; 0x3f
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80030c0:	495b      	ldr	r1, [pc, #364]	; (8003230 <HAL_DMA_Init+0x298>)
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80030c2:	f002 021f 	and.w	r2, r2, #31
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80030c6:	4e60      	ldr	r6, [pc, #384]	; (8003248 <HAL_DMA_Init+0x2b0>)
 80030c8:	4f60      	ldr	r7, [pc, #384]	; (800324c <HAL_DMA_Init+0x2b4>)
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80030ca:	4093      	lsls	r3, r2
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80030cc:	4a60      	ldr	r2, [pc, #384]	; (8003250 <HAL_DMA_Init+0x2b8>)
 80030ce:	1ba6      	subs	r6, r4, r6
 80030d0:	1be7      	subs	r7, r4, r7
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80030d2:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80030d4:	eba4 0b02 	sub.w	fp, r4, r2
 80030d8:	4b5e      	ldr	r3, [pc, #376]	; (8003254 <HAL_DMA_Init+0x2bc>)
 80030da:	fab6 f686 	clz	r6, r6
 80030de:	fabb fb8b 	clz	fp, fp
 80030e2:	fab7 f787 	clz	r7, r7
 80030e6:	eba4 0a03 	sub.w	sl, r4, r3
 80030ea:	4b5b      	ldr	r3, [pc, #364]	; (8003258 <HAL_DMA_Init+0x2c0>)
 80030ec:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 80030f0:	485a      	ldr	r0, [pc, #360]	; (800325c <HAL_DMA_Init+0x2c4>)
 80030f2:	429c      	cmp	r4, r3
 80030f4:	bf18      	it	ne
 80030f6:	428c      	cmpne	r4, r1
 80030f8:	f103 0318 	add.w	r3, r3, #24
 80030fc:	faba fa8a 	clz	sl, sl
 8003100:	ea4f 1656 	mov.w	r6, r6, lsr #5
 8003104:	bf0c      	ite	eq
 8003106:	2101      	moveq	r1, #1
 8003108:	2100      	movne	r1, #0
 800310a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 800310e:	1a22      	subs	r2, r4, r0
 8003110:	429c      	cmp	r4, r3
 8003112:	bf08      	it	eq
 8003114:	f041 0101 	orreq.w	r1, r1, #1
 8003118:	3318      	adds	r3, #24
 800311a:	097f      	lsrs	r7, r7, #5
 800311c:	fab2 f282 	clz	r2, r2
 8003120:	429c      	cmp	r4, r3
 8003122:	bf08      	it	eq
 8003124:	f041 0101 	orreq.w	r1, r1, #1
 8003128:	3318      	adds	r3, #24
 800312a:	0952      	lsrs	r2, r2, #5
 800312c:	429c      	cmp	r4, r3
 800312e:	bf08      	it	eq
 8003130:	f041 0101 	orreq.w	r1, r1, #1
 8003134:	3318      	adds	r3, #24
 8003136:	9201      	str	r2, [sp, #4]
 8003138:	429c      	cmp	r4, r3
 800313a:	bf08      	it	eq
 800313c:	f041 0101 	orreq.w	r1, r1, #1
 8003140:	3318      	adds	r3, #24
 8003142:	429c      	cmp	r4, r3
 8003144:	bf08      	it	eq
 8003146:	f041 0101 	orreq.w	r1, r1, #1
 800314a:	3318      	adds	r3, #24
 800314c:	429c      	cmp	r4, r3
 800314e:	bf08      	it	eq
 8003150:	f041 0101 	orreq.w	r1, r1, #1
 8003154:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8003158:	429c      	cmp	r4, r3
 800315a:	bf08      	it	eq
 800315c:	f041 0101 	orreq.w	r1, r1, #1
 8003160:	3318      	adds	r3, #24
 8003162:	429c      	cmp	r4, r3
 8003164:	bf08      	it	eq
 8003166:	f041 0101 	orreq.w	r1, r1, #1
 800316a:	3318      	adds	r3, #24
 800316c:	429c      	cmp	r4, r3
 800316e:	bf08      	it	eq
 8003170:	f041 0101 	orreq.w	r1, r1, #1
 8003174:	3318      	adds	r3, #24
 8003176:	429c      	cmp	r4, r3
 8003178:	bf08      	it	eq
 800317a:	f041 0101 	orreq.w	r1, r1, #1
 800317e:	3318      	adds	r3, #24
 8003180:	429c      	cmp	r4, r3
 8003182:	bf08      	it	eq
 8003184:	f041 0101 	orreq.w	r1, r1, #1
 8003188:	3318      	adds	r3, #24
 800318a:	429c      	cmp	r4, r3
 800318c:	bf08      	it	eq
 800318e:	f041 0101 	orreq.w	r1, r1, #1
 8003192:	3318      	adds	r3, #24
 8003194:	429c      	cmp	r4, r3
 8003196:	bf08      	it	eq
 8003198:	f041 0101 	orreq.w	r1, r1, #1
 800319c:	3318      	adds	r3, #24
 800319e:	429c      	cmp	r4, r3
 80031a0:	bf08      	it	eq
 80031a2:	f041 0101 	orreq.w	r1, r1, #1
 80031a6:	4b2e      	ldr	r3, [pc, #184]	; (8003260 <HAL_DMA_Init+0x2c8>)
 80031a8:	ea4b 0101 	orr.w	r1, fp, r1
 80031ac:	eba4 0803 	sub.w	r8, r4, r3
 80031b0:	3314      	adds	r3, #20
 80031b2:	ea4a 0101 	orr.w	r1, sl, r1
 80031b6:	fab8 f888 	clz	r8, r8
 80031ba:	eba4 0903 	sub.w	r9, r4, r3
 80031be:	3314      	adds	r3, #20
 80031c0:	4331      	orrs	r1, r6
 80031c2:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80031c6:	fab9 f989 	clz	r9, r9
 80031ca:	1ae3      	subs	r3, r4, r3
 80031cc:	4339      	orrs	r1, r7
 80031ce:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80031d2:	fab3 f383 	clz	r3, r3
 80031d6:	ea48 0101 	orr.w	r1, r8, r1
 80031da:	095b      	lsrs	r3, r3, #5
 80031dc:	ea49 0101 	orr.w	r1, r9, r1
 80031e0:	4319      	orrs	r1, r3
 80031e2:	d100      	bne.n	80031e6 <HAL_DMA_Init+0x24e>
 80031e4:	b1da      	cbz	r2, 800321e <HAL_DMA_Init+0x286>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80031e6:	4628      	mov	r0, r5
 80031e8:	9300      	str	r3, [sp, #0]
 80031ea:	f7ff fe6d 	bl	8002ec8 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80031ee:	68a9      	ldr	r1, [r5, #8]
 80031f0:	9b00      	ldr	r3, [sp, #0]
 80031f2:	2980      	cmp	r1, #128	; 0x80
 80031f4:	d066      	beq.n	80032c4 <HAL_DMA_Init+0x32c>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80031f6:	6868      	ldr	r0, [r5, #4]
 80031f8:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 80031fa:	b2c4      	uxtb	r4, r0
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80031fc:	3801      	subs	r0, #1
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031fe:	e9d5 c119 	ldrd	ip, r1, [r5, #100]	; 0x64
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003202:	2807      	cmp	r0, #7
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003204:	6014      	str	r4, [r2, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003206:	f8cc 1004 	str.w	r1, [ip, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800320a:	d862      	bhi.n	80032d2 <HAL_DMA_Init+0x33a>
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800320c:	1e61      	subs	r1, r4, #1
 800320e:	2907      	cmp	r1, #7
 8003210:	d979      	bls.n	8003306 <HAL_DMA_Init+0x36e>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003212:	6f6a      	ldr	r2, [r5, #116]	; 0x74
 8003214:	e9d5 301b 	ldrd	r3, r0, [r5, #108]	; 0x6c
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003218:	2100      	movs	r1, #0
 800321a:	6019      	str	r1, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800321c:	6042      	str	r2, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800321e:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8003220:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003222:	6568      	str	r0, [r5, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8003224:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
}
 8003228:	b003      	add	sp, #12
 800322a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800322e:	bf00      	nop
 8003230:	40020010 	.word	0x40020010
 8003234:	40020040 	.word	0x40020040
 8003238:	400204b8 	.word	0x400204b8
 800323c:	fe10803f 	.word	0xfe10803f
 8003240:	5c001000 	.word	0x5c001000
 8003244:	ffff0000 	.word	0xffff0000
 8003248:	58025430 	.word	0x58025430
 800324c:	58025444 	.word	0x58025444
 8003250:	58025408 	.word	0x58025408
 8003254:	5802541c 	.word	0x5802541c
 8003258:	40020028 	.word	0x40020028
 800325c:	58025494 	.word	0x58025494
 8003260:	58025458 	.word	0x58025458
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003264:	6868      	ldr	r0, [r5, #4]
 8003266:	f1a0 0629 	sub.w	r6, r0, #41	; 0x29
 800326a:	2e1f      	cmp	r6, #31
 800326c:	d925      	bls.n	80032ba <HAL_DMA_Init+0x322>
 800326e:	384f      	subs	r0, #79	; 0x4f
 8003270:	2803      	cmp	r0, #3
 8003272:	d801      	bhi.n	8003278 <HAL_DMA_Init+0x2e0>
        registerValue |= DMA_SxCR_TRBUFF;
 8003274:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003278:	6023      	str	r3, [r4, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800327a:	2904      	cmp	r1, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800327c:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800327e:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8003282:	ea43 0301 	orr.w	r3, r3, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003286:	f47f af15 	bne.w	80030b4 <HAL_DMA_Init+0x11c>
 800328a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 800328c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800328e:	430b      	orrs	r3, r1
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003290:	2800      	cmp	r0, #0
 8003292:	f43f af0f 	beq.w	80030b4 <HAL_DMA_Init+0x11c>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003296:	2a00      	cmp	r2, #0
 8003298:	d153      	bne.n	8003342 <HAL_DMA_Init+0x3aa>
    switch (hdma->Init.FIFOThreshold)
 800329a:	2901      	cmp	r1, #1
 800329c:	d072      	beq.n	8003384 <HAL_DMA_Init+0x3ec>
 800329e:	f031 0202 	bics.w	r2, r1, #2
 80032a2:	f47f af07 	bne.w	80030b4 <HAL_DMA_Init+0x11c>
 80032a6:	e054      	b.n	8003352 <HAL_DMA_Init+0x3ba>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032a8:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 80032aa:	2303      	movs	r3, #3
        return HAL_ERROR;
 80032ac:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032ae:	656a      	str	r2, [r5, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 80032b0:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
}
 80032b4:	b003      	add	sp, #12
 80032b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80032ba:	4878      	ldr	r0, [pc, #480]	; (800349c <HAL_DMA_Init+0x504>)
 80032bc:	40f0      	lsrs	r0, r6
 80032be:	07c0      	lsls	r0, r0, #31
 80032c0:	d5da      	bpl.n	8003278 <HAL_DMA_Init+0x2e0>
 80032c2:	e7d7      	b.n	8003274 <HAL_DMA_Init+0x2dc>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80032c4:	2300      	movs	r3, #0
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80032c6:	6ea9      	ldr	r1, [r5, #104]	; 0x68
 80032c8:	e9d5 0218 	ldrd	r0, r2, [r5, #96]	; 0x60
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80032cc:	606b      	str	r3, [r5, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80032ce:	6003      	str	r3, [r0, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80032d0:	6051      	str	r1, [r2, #4]
      hdma->DMAmuxRequestGen = 0U;
 80032d2:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
 80032d4:	e9c5 331b 	strd	r3, r3, [r5, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80032d8:	676b      	str	r3, [r5, #116]	; 0x74
 80032da:	e7a0      	b.n	800321e <HAL_DMA_Init+0x286>
    return HAL_ERROR;
 80032dc:	2001      	movs	r0, #1
}
 80032de:	b003      	add	sp, #12
 80032e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80032e4:	6807      	ldr	r7, [r0, #0]
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80032e6:	e9d5 060b 	ldrd	r0, r6, [r5, #44]	; 0x2c
 80032ea:	4306      	orrs	r6, r0
 80032ec:	4333      	orrs	r3, r6
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80032ee:	4e6c      	ldr	r6, [pc, #432]	; (80034a0 <HAL_DMA_Init+0x508>)
 80032f0:	403e      	ands	r6, r7
 80032f2:	f1b6 5f00 	cmp.w	r6, #536870912	; 0x20000000
 80032f6:	d2b5      	bcs.n	8003264 <HAL_DMA_Init+0x2cc>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80032f8:	6023      	str	r3, [r4, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80032fa:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80032fc:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8003300:	f043 0304 	orr.w	r3, r3, #4
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003304:	e7c2      	b.n	800328c <HAL_DMA_Init+0x2f4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003306:	9a01      	ldr	r2, [sp, #4]
 8003308:	431a      	orrs	r2, r3
 800330a:	ea49 0902 	orr.w	r9, r9, r2
 800330e:	ea48 0809 	orr.w	r8, r8, r9
 8003312:	ea47 0708 	orr.w	r7, r7, r8
 8003316:	433e      	orrs	r6, r7
 8003318:	ea5a 0606 	orrs.w	r6, sl, r6
 800331c:	d107      	bne.n	800332e <HAL_DMA_Init+0x396>
 800331e:	f1bb 0f00 	cmp.w	fp, #0
 8003322:	d104      	bne.n	800332e <HAL_DMA_Init+0x396>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003324:	4b5f      	ldr	r3, [pc, #380]	; (80034a4 <HAL_DMA_Init+0x50c>)

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003326:	4860      	ldr	r0, [pc, #384]	; (80034a8 <HAL_DMA_Init+0x510>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003328:	4423      	add	r3, r4
 800332a:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800332c:	e003      	b.n	8003336 <HAL_DMA_Init+0x39e>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800332e:	4b5f      	ldr	r3, [pc, #380]	; (80034ac <HAL_DMA_Init+0x514>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003330:	485f      	ldr	r0, [pc, #380]	; (80034b0 <HAL_DMA_Init+0x518>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003332:	4423      	add	r3, r4
 8003334:	009b      	lsls	r3, r3, #2
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003336:	2201      	movs	r2, #1
 8003338:	408a      	lsls	r2, r1
 800333a:	e9c5 301b 	strd	r3, r0, [r5, #108]	; 0x6c
 800333e:	676a      	str	r2, [r5, #116]	; 0x74
 8003340:	e76a      	b.n	8003218 <HAL_DMA_Init+0x280>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003342:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003346:	d00e      	beq.n	8003366 <HAL_DMA_Init+0x3ce>
    switch (hdma->Init.FIFOThreshold)
 8003348:	2902      	cmp	r1, #2
 800334a:	d905      	bls.n	8003358 <HAL_DMA_Init+0x3c0>
 800334c:	2903      	cmp	r1, #3
 800334e:	f47f aeb1 	bne.w	80030b4 <HAL_DMA_Init+0x11c>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003352:	01c2      	lsls	r2, r0, #7
 8003354:	f57f aeae 	bpl.w	80030b4 <HAL_DMA_Init+0x11c>
          hdma->State = HAL_DMA_STATE_READY;
 8003358:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800335a:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
 800335c:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800335e:	656a      	str	r2, [r5, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8003360:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
          return HAL_ERROR;
 8003364:	e7a6      	b.n	80032b4 <HAL_DMA_Init+0x31c>
    switch (hdma->Init.FIFOThreshold)
 8003366:	2903      	cmp	r1, #3
 8003368:	f63f aea4 	bhi.w	80030b4 <HAL_DMA_Init+0x11c>
 800336c:	a201      	add	r2, pc, #4	; (adr r2, 8003374 <HAL_DMA_Init+0x3dc>)
 800336e:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
 8003372:	bf00      	nop
 8003374:	08003359 	.word	0x08003359
 8003378:	08003353 	.word	0x08003353
 800337c:	08003359 	.word	0x08003359
 8003380:	08003385 	.word	0x08003385
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003384:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 8003388:	f47f ae94 	bne.w	80030b4 <HAL_DMA_Init+0x11c>
 800338c:	e7e4      	b.n	8003358 <HAL_DMA_Init+0x3c0>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800338e:	4a49      	ldr	r2, [pc, #292]	; (80034b4 <HAL_DMA_Init+0x51c>)
 8003390:	4b49      	ldr	r3, [pc, #292]	; (80034b8 <HAL_DMA_Init+0x520>)
 8003392:	eba4 0b02 	sub.w	fp, r4, r2
 8003396:	4e49      	ldr	r6, [pc, #292]	; (80034bc <HAL_DMA_Init+0x524>)
 8003398:	eba4 0a03 	sub.w	sl, r4, r3
 800339c:	4f48      	ldr	r7, [pc, #288]	; (80034c0 <HAL_DMA_Init+0x528>)
 800339e:	fabb fb8b 	clz	fp, fp
 80033a2:	1ba6      	subs	r6, r4, r6
 80033a4:	faba fa8a 	clz	sl, sl
 80033a8:	333c      	adds	r3, #60	; 0x3c
 80033aa:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 80033ae:	fab6 f686 	clz	r6, r6
 80033b2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80033b6:	1be7      	subs	r7, r4, r7
 80033b8:	eba4 0803 	sub.w	r8, r4, r3
 80033bc:	0976      	lsrs	r6, r6, #5
 80033be:	3314      	adds	r3, #20
 80033c0:	fab7 f787 	clz	r7, r7
 80033c4:	ea4b 010a 	orr.w	r1, fp, sl
 80033c8:	fab8 f888 	clz	r8, r8
 80033cc:	eba4 0903 	sub.w	r9, r4, r3
 80033d0:	097f      	lsrs	r7, r7, #5
 80033d2:	4331      	orrs	r1, r6
 80033d4:	3314      	adds	r3, #20
 80033d6:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80033da:	fab9 f989 	clz	r9, r9
 80033de:	4339      	orrs	r1, r7
 80033e0:	1ae3      	subs	r3, r4, r3
 80033e2:	4838      	ldr	r0, [pc, #224]	; (80034c4 <HAL_DMA_Init+0x52c>)
 80033e4:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80033e8:	ea48 0101 	orr.w	r1, r8, r1
 80033ec:	fab3 f383 	clz	r3, r3
 80033f0:	1a22      	subs	r2, r4, r0
 80033f2:	ea49 0101 	orr.w	r1, r9, r1
 80033f6:	095b      	lsrs	r3, r3, #5
 80033f8:	fab2 f282 	clz	r2, r2
 80033fc:	4319      	orrs	r1, r3
 80033fe:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8003402:	9201      	str	r2, [sp, #4]
 8003404:	d101      	bne.n	800340a <HAL_DMA_Init+0x472>
 8003406:	2a00      	cmp	r2, #0
 8003408:	d041      	beq.n	800348e <HAL_DMA_Init+0x4f6>
    hdma->State = HAL_DMA_STATE_BUSY;
 800340a:	2102      	movs	r1, #2
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800340c:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 80034d0 <HAL_DMA_Init+0x538>
    hdma->State = HAL_DMA_STATE_BUSY;
 8003410:	f885 1035 	strb.w	r1, [r5, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8003414:	2100      	movs	r1, #0
 8003416:	f885 1034 	strb.w	r1, [r5, #52]	; 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800341a:	6821      	ldr	r1, [r4, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800341c:	ea01 0c0c 	and.w	ip, r1, ip
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003420:	68a9      	ldr	r1, [r5, #8]
 8003422:	2940      	cmp	r1, #64	; 0x40
 8003424:	d030      	beq.n	8003488 <HAL_DMA_Init+0x4f0>
 8003426:	f1a1 0180 	sub.w	r1, r1, #128	; 0x80
 800342a:	fab1 f181 	clz	r1, r1
 800342e:	0949      	lsrs	r1, r1, #5
 8003430:	ea4f 3e81 	mov.w	lr, r1, lsl #14
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003434:	6929      	ldr	r1, [r5, #16]
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003436:	68e8      	ldr	r0, [r5, #12]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003438:	08c9      	lsrs	r1, r1, #3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800343a:	4a23      	ldr	r2, [pc, #140]	; (80034c8 <HAL_DMA_Init+0x530>)
 800343c:	9300      	str	r3, [sp, #0]
 800343e:	ea41 00d0 	orr.w	r0, r1, r0, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003442:	6969      	ldr	r1, [r5, #20]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003444:	4422      	add	r2, r4
 8003446:	ea40 00d1 	orr.w	r0, r0, r1, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800344a:	69a9      	ldr	r1, [r5, #24]
 800344c:	ea40 00d1 	orr.w	r0, r0, r1, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003450:	69e9      	ldr	r1, [r5, #28]
 8003452:	ea40 00d1 	orr.w	r0, r0, r1, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003456:	6a29      	ldr	r1, [r5, #32]
 8003458:	ea40 1111 	orr.w	r1, r0, r1, lsr #4
 800345c:	ea41 010c 	orr.w	r1, r1, ip
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003460:	ea4e 0101 	orr.w	r1, lr, r1
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003464:	6021      	str	r1, [r4, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003466:	4919      	ldr	r1, [pc, #100]	; (80034cc <HAL_DMA_Init+0x534>)
 8003468:	fba1 0102 	umull	r0, r1, r1, r2
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800346c:	4628      	mov	r0, r5
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800346e:	0909      	lsrs	r1, r1, #4
 8003470:	0089      	lsls	r1, r1, #2
 8003472:	65e9      	str	r1, [r5, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003474:	f7ff fcae 	bl	8002dd4 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003478:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 800347a:	9b00      	ldr	r3, [sp, #0]
 800347c:	f001 041f 	and.w	r4, r1, #31
 8003480:	2101      	movs	r1, #1
 8003482:	40a1      	lsls	r1, r4
 8003484:	6041      	str	r1, [r0, #4]
 8003486:	e6ae      	b.n	80031e6 <HAL_DMA_Init+0x24e>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003488:	f04f 0e10 	mov.w	lr, #16
 800348c:	e7d2      	b.n	8003434 <HAL_DMA_Init+0x49c>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800348e:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003490:	2303      	movs	r3, #3
    return HAL_ERROR;
 8003492:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003494:	656a      	str	r2, [r5, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003496:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
    return HAL_ERROR;
 800349a:	e70b      	b.n	80032b4 <HAL_DMA_Init+0x31c>
 800349c:	c3c0003f 	.word	0xc3c0003f
 80034a0:	ffff0000 	.word	0xffff0000
 80034a4:	1000823f 	.word	0x1000823f
 80034a8:	40020940 	.word	0x40020940
 80034ac:	1600963f 	.word	0x1600963f
 80034b0:	58025940 	.word	0x58025940
 80034b4:	58025408 	.word	0x58025408
 80034b8:	5802541c 	.word	0x5802541c
 80034bc:	58025430 	.word	0x58025430
 80034c0:	58025444 	.word	0x58025444
 80034c4:	58025494 	.word	0x58025494
 80034c8:	a7fdabf8 	.word	0xa7fdabf8
 80034cc:	cccccccd 	.word	0xcccccccd
 80034d0:	fffe000f 	.word	0xfffe000f

080034d4 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 80034d4:	2800      	cmp	r0, #0
 80034d6:	f000 8177 	beq.w	80037c8 <HAL_DMA_Start_IT+0x2f4>
 80034da:	4684      	mov	ip, r0
  __HAL_LOCK(hdma);
 80034dc:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 80034e0:	2801      	cmp	r0, #1
 80034e2:	f000 8173 	beq.w	80037cc <HAL_DMA_Start_IT+0x2f8>
 80034e6:	2001      	movs	r0, #1
{
 80034e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if(HAL_DMA_STATE_READY == hdma->State)
 80034ec:	f89c 4035 	ldrb.w	r4, [ip, #53]	; 0x35
  __HAL_LOCK(hdma);
 80034f0:	f88c 0034 	strb.w	r0, [ip, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80034f4:	4284      	cmp	r4, r0
 80034f6:	d008      	beq.n	800350a <HAL_DMA_Start_IT+0x36>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80034f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 80034fc:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80034fe:	f8cc 2054 	str.w	r2, [ip, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8003502:	f88c 3034 	strb.w	r3, [ip, #52]	; 0x34
}
 8003506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 800350a:	2002      	movs	r0, #2
    __HAL_DMA_DISABLE(hdma);
 800350c:	f8dc 4000 	ldr.w	r4, [ip]
 8003510:	4d53      	ldr	r5, [pc, #332]	; (8003660 <HAL_DMA_Start_IT+0x18c>)
    hdma->State = HAL_DMA_STATE_BUSY;
 8003512:	f88c 0035 	strb.w	r0, [ip, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003516:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8003518:	4e52      	ldr	r6, [pc, #328]	; (8003664 <HAL_DMA_Start_IT+0x190>)
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800351a:	f8cc 0054 	str.w	r0, [ip, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 800351e:	4852      	ldr	r0, [pc, #328]	; (8003668 <HAL_DMA_Start_IT+0x194>)
 8003520:	42ac      	cmp	r4, r5
 8003522:	bf18      	it	ne
 8003524:	4284      	cmpne	r4, r0
 8003526:	f105 0518 	add.w	r5, r5, #24
 800352a:	bf0c      	ite	eq
 800352c:	2001      	moveq	r0, #1
 800352e:	2000      	movne	r0, #0
 8003530:	42ac      	cmp	r4, r5
 8003532:	bf08      	it	eq
 8003534:	f040 0001 	orreq.w	r0, r0, #1
 8003538:	3518      	adds	r5, #24
 800353a:	42ac      	cmp	r4, r5
 800353c:	bf08      	it	eq
 800353e:	f040 0001 	orreq.w	r0, r0, #1
 8003542:	3518      	adds	r5, #24
 8003544:	42ac      	cmp	r4, r5
 8003546:	bf08      	it	eq
 8003548:	f040 0001 	orreq.w	r0, r0, #1
 800354c:	3518      	adds	r5, #24
 800354e:	42ac      	cmp	r4, r5
 8003550:	bf08      	it	eq
 8003552:	f040 0001 	orreq.w	r0, r0, #1
 8003556:	f505 7556 	add.w	r5, r5, #856	; 0x358
 800355a:	42ac      	cmp	r4, r5
 800355c:	bf08      	it	eq
 800355e:	f040 0001 	orreq.w	r0, r0, #1
 8003562:	3518      	adds	r5, #24
 8003564:	42ac      	cmp	r4, r5
 8003566:	bf08      	it	eq
 8003568:	f040 0001 	orreq.w	r0, r0, #1
 800356c:	3518      	adds	r5, #24
 800356e:	42ac      	cmp	r4, r5
 8003570:	bf08      	it	eq
 8003572:	f040 0001 	orreq.w	r0, r0, #1
 8003576:	3518      	adds	r5, #24
 8003578:	42ac      	cmp	r4, r5
 800357a:	bf08      	it	eq
 800357c:	f040 0001 	orreq.w	r0, r0, #1
 8003580:	3518      	adds	r5, #24
 8003582:	42ac      	cmp	r4, r5
 8003584:	bf08      	it	eq
 8003586:	f040 0001 	orreq.w	r0, r0, #1
 800358a:	3518      	adds	r5, #24
 800358c:	42ac      	cmp	r4, r5
 800358e:	bf08      	it	eq
 8003590:	f040 0001 	orreq.w	r0, r0, #1
 8003594:	3518      	adds	r5, #24
 8003596:	42ac      	cmp	r4, r5
 8003598:	bf08      	it	eq
 800359a:	f040 0001 	orreq.w	r0, r0, #1
 800359e:	3518      	adds	r5, #24
 80035a0:	42ac      	cmp	r4, r5
 80035a2:	bf14      	ite	ne
 80035a4:	4681      	movne	r9, r0
 80035a6:	f040 0901 	orreq.w	r9, r0, #1
 80035aa:	f5a5 6595 	sub.w	r5, r5, #1192	; 0x4a8
 80035ae:	42b4      	cmp	r4, r6
 80035b0:	bf18      	it	ne
 80035b2:	42ac      	cmpne	r4, r5
 80035b4:	bf0c      	ite	eq
 80035b6:	2501      	moveq	r5, #1
 80035b8:	2500      	movne	r5, #0
 80035ba:	d002      	beq.n	80035c2 <HAL_DMA_Start_IT+0xee>
 80035bc:	f1b9 0f00 	cmp.w	r9, #0
 80035c0:	d054      	beq.n	800366c <HAL_DMA_Start_IT+0x198>
 80035c2:	6826      	ldr	r6, [r4, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035c4:	f8dc a058 	ldr.w	sl, [ip, #88]	; 0x58
    __HAL_DMA_DISABLE(hdma);
 80035c8:	f026 0601 	bic.w	r6, r6, #1
 80035cc:	6026      	str	r6, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80035ce:	2d00      	cmp	r5, #0
 80035d0:	d078      	beq.n	80036c4 <HAL_DMA_Start_IT+0x1f0>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035d2:	e9dc 6719 	ldrd	r6, r7, [ip, #100]	; 0x64
 80035d6:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 80035d8:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 80035dc:	b117      	cbz	r7, 80035e4 <HAL_DMA_Start_IT+0x110>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035de:	e9dc 601c 	ldrd	r6, r0, [ip, #112]	; 0x70
 80035e2:	6070      	str	r0, [r6, #4]
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80035e4:	f8dc 605c 	ldr.w	r6, [ip, #92]	; 0x5c
 80035e8:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
 80035ec:	f006 081f 	and.w	r8, r6, #31
 80035f0:	fa0e fe08 	lsl.w	lr, lr, r8
 80035f4:	f8ca e008 	str.w	lr, [sl, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80035f8:	6826      	ldr	r6, [r4, #0]
 80035fa:	f426 2680 	bic.w	r6, r6, #262144	; 0x40000
 80035fe:	6026      	str	r6, [r4, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003600:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003602:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8003606:	2b40      	cmp	r3, #64	; 0x40
 8003608:	f000 80e2 	beq.w	80037d0 <HAL_DMA_Start_IT+0x2fc>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800360c:	60a1      	str	r1, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800360e:	60e2      	str	r2, [r4, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003610:	b91d      	cbnz	r5, 800361a <HAL_DMA_Start_IT+0x146>
 8003612:	f1b9 0f00 	cmp.w	r9, #0
 8003616:	f000 80e1 	beq.w	80037dc <HAL_DMA_Start_IT+0x308>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800361a:	6823      	ldr	r3, [r4, #0]
 800361c:	f023 031e 	bic.w	r3, r3, #30
 8003620:	f043 0316 	orr.w	r3, r3, #22
 8003624:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8003626:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 800362a:	b11b      	cbz	r3, 8003634 <HAL_DMA_Start_IT+0x160>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800362c:	6823      	ldr	r3, [r4, #0]
 800362e:	f043 0308 	orr.w	r3, r3, #8
 8003632:	6023      	str	r3, [r4, #0]
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003634:	f8dc 3060 	ldr.w	r3, [ip, #96]	; 0x60
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	03d2      	lsls	r2, r2, #15
 800363c:	d503      	bpl.n	8003646 <HAL_DMA_Start_IT+0x172>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003644:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 8003646:	b11f      	cbz	r7, 8003650 <HAL_DMA_Start_IT+0x17c>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800364e:	603b      	str	r3, [r7, #0]
    __HAL_DMA_ENABLE(hdma);
 8003650:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003652:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8003654:	f043 0301 	orr.w	r3, r3, #1
 8003658:	6023      	str	r3, [r4, #0]
}
 800365a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800365e:	bf00      	nop
 8003660:	40020058 	.word	0x40020058
 8003664:	40020028 	.word	0x40020028
 8003668:	40020040 	.word	0x40020040
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800366c:	4f61      	ldr	r7, [pc, #388]	; (80037f4 <HAL_DMA_Start_IT+0x320>)
 800366e:	4e62      	ldr	r6, [pc, #392]	; (80037f8 <HAL_DMA_Start_IT+0x324>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003670:	f8dc a058 	ldr.w	sl, [ip, #88]	; 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003674:	42b4      	cmp	r4, r6
 8003676:	bf18      	it	ne
 8003678:	42bc      	cmpne	r4, r7
 800367a:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800367e:	bf0c      	ite	eq
 8003680:	2701      	moveq	r7, #1
 8003682:	2700      	movne	r7, #0
 8003684:	42b4      	cmp	r4, r6
 8003686:	bf08      	it	eq
 8003688:	f047 0701 	orreq.w	r7, r7, #1
 800368c:	3614      	adds	r6, #20
 800368e:	42b4      	cmp	r4, r6
 8003690:	bf08      	it	eq
 8003692:	f047 0701 	orreq.w	r7, r7, #1
 8003696:	3614      	adds	r6, #20
 8003698:	42b4      	cmp	r4, r6
 800369a:	bf08      	it	eq
 800369c:	f047 0701 	orreq.w	r7, r7, #1
 80036a0:	3614      	adds	r6, #20
 80036a2:	42b4      	cmp	r4, r6
 80036a4:	bf08      	it	eq
 80036a6:	f047 0701 	orreq.w	r7, r7, #1
    __HAL_DMA_DISABLE(hdma);
 80036aa:	6826      	ldr	r6, [r4, #0]
 80036ac:	f026 0601 	bic.w	r6, r6, #1
 80036b0:	6026      	str	r6, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80036b2:	4e52      	ldr	r6, [pc, #328]	; (80037fc <HAL_DMA_Start_IT+0x328>)
 80036b4:	42b4      	cmp	r4, r6
 80036b6:	bf08      	it	eq
 80036b8:	f047 0701 	orreq.w	r7, r7, #1
 80036bc:	b917      	cbnz	r7, 80036c4 <HAL_DMA_Start_IT+0x1f0>
 80036be:	4f50      	ldr	r7, [pc, #320]	; (8003800 <HAL_DMA_Start_IT+0x32c>)
 80036c0:	42bc      	cmp	r4, r7
 80036c2:	d10b      	bne.n	80036dc <HAL_DMA_Start_IT+0x208>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036c4:	e9dc 6719 	ldrd	r6, r7, [ip, #100]	; 0x64
 80036c8:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 80036ca:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 80036ce:	b117      	cbz	r7, 80036d6 <HAL_DMA_Start_IT+0x202>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036d0:	e9dc 061c 	ldrd	r0, r6, [ip, #112]	; 0x70
 80036d4:	6046      	str	r6, [r0, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80036d6:	f1b9 0f00 	cmp.w	r9, #0
 80036da:	d183      	bne.n	80035e4 <HAL_DMA_Start_IT+0x110>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80036dc:	4f46      	ldr	r7, [pc, #280]	; (80037f8 <HAL_DMA_Start_IT+0x324>)
 80036de:	f8df e114 	ldr.w	lr, [pc, #276]	; 80037f4 <HAL_DMA_Start_IT+0x320>
 80036e2:	4574      	cmp	r4, lr
 80036e4:	bf18      	it	ne
 80036e6:	42bc      	cmpne	r4, r7
 80036e8:	f10e 0e14 	add.w	lr, lr, #20
 80036ec:	bf0c      	ite	eq
 80036ee:	2701      	moveq	r7, #1
 80036f0:	2700      	movne	r7, #0
 80036f2:	4574      	cmp	r4, lr
 80036f4:	bf08      	it	eq
 80036f6:	f047 0701 	orreq.w	r7, r7, #1
 80036fa:	f10e 0e14 	add.w	lr, lr, #20
 80036fe:	4574      	cmp	r4, lr
 8003700:	bf08      	it	eq
 8003702:	f047 0701 	orreq.w	r7, r7, #1
 8003706:	f10e 0e14 	add.w	lr, lr, #20
 800370a:	4574      	cmp	r4, lr
 800370c:	bf08      	it	eq
 800370e:	f047 0701 	orreq.w	r7, r7, #1
 8003712:	f10e 0e14 	add.w	lr, lr, #20
 8003716:	4574      	cmp	r4, lr
 8003718:	bf08      	it	eq
 800371a:	f047 0701 	orreq.w	r7, r7, #1
 800371e:	f10e 0e14 	add.w	lr, lr, #20
 8003722:	4574      	cmp	r4, lr
 8003724:	bf08      	it	eq
 8003726:	f047 0701 	orreq.w	r7, r7, #1
 800372a:	b917      	cbnz	r7, 8003732 <HAL_DMA_Start_IT+0x25e>
 800372c:	4f34      	ldr	r7, [pc, #208]	; (8003800 <HAL_DMA_Start_IT+0x32c>)
 800372e:	42bc      	cmp	r4, r7
 8003730:	d154      	bne.n	80037dc <HAL_DMA_Start_IT+0x308>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003732:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
 8003736:	2701      	movs	r7, #1
 8003738:	f000 0e1f 	and.w	lr, r0, #31
 800373c:	fa07 f70e 	lsl.w	r7, r7, lr
 8003740:	f8ca 7004 	str.w	r7, [sl, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003744:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003746:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800374a:	2b40      	cmp	r3, #64	; 0x40
 800374c:	d043      	beq.n	80037d6 <HAL_DMA_Start_IT+0x302>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800374e:	60a1      	str	r1, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003750:	60e2      	str	r2, [r4, #12]
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003752:	6823      	ldr	r3, [r4, #0]
 8003754:	f023 030e 	bic.w	r3, r3, #14
 8003758:	f043 030a 	orr.w	r3, r3, #10
 800375c:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800375e:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 8003762:	2b00      	cmp	r3, #0
 8003764:	d02d      	beq.n	80037c2 <HAL_DMA_Start_IT+0x2ee>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003766:	6823      	ldr	r3, [r4, #0]
 8003768:	f043 0304 	orr.w	r3, r3, #4
 800376c:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800376e:	4b21      	ldr	r3, [pc, #132]	; (80037f4 <HAL_DMA_Start_IT+0x320>)
 8003770:	4a21      	ldr	r2, [pc, #132]	; (80037f8 <HAL_DMA_Start_IT+0x324>)
 8003772:	4294      	cmp	r4, r2
 8003774:	bf18      	it	ne
 8003776:	429c      	cmpne	r4, r3
 8003778:	f102 0228 	add.w	r2, r2, #40	; 0x28
 800377c:	bf0c      	ite	eq
 800377e:	2301      	moveq	r3, #1
 8003780:	2300      	movne	r3, #0
 8003782:	4294      	cmp	r4, r2
 8003784:	bf08      	it	eq
 8003786:	f043 0301 	orreq.w	r3, r3, #1
 800378a:	3214      	adds	r2, #20
 800378c:	4294      	cmp	r4, r2
 800378e:	bf08      	it	eq
 8003790:	f043 0301 	orreq.w	r3, r3, #1
 8003794:	3214      	adds	r2, #20
 8003796:	4294      	cmp	r4, r2
 8003798:	bf08      	it	eq
 800379a:	f043 0301 	orreq.w	r3, r3, #1
 800379e:	3214      	adds	r2, #20
 80037a0:	4294      	cmp	r4, r2
 80037a2:	bf08      	it	eq
 80037a4:	f043 0301 	orreq.w	r3, r3, #1
 80037a8:	3214      	adds	r2, #20
 80037aa:	4294      	cmp	r4, r2
 80037ac:	bf08      	it	eq
 80037ae:	f043 0301 	orreq.w	r3, r3, #1
 80037b2:	3214      	adds	r2, #20
 80037b4:	4294      	cmp	r4, r2
 80037b6:	bf08      	it	eq
 80037b8:	f043 0301 	orreq.w	r3, r3, #1
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f43f af47 	beq.w	8003650 <HAL_DMA_Start_IT+0x17c>
 80037c2:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 80037c6:	e735      	b.n	8003634 <HAL_DMA_Start_IT+0x160>
    return HAL_ERROR;
 80037c8:	2001      	movs	r0, #1
 80037ca:	4770      	bx	lr
  __HAL_LOCK(hdma);
 80037cc:	2002      	movs	r0, #2
}
 80037ce:	4770      	bx	lr
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80037d0:	60a2      	str	r2, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80037d2:	60e1      	str	r1, [r4, #12]
 80037d4:	e71c      	b.n	8003610 <HAL_DMA_Start_IT+0x13c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80037d6:	60a2      	str	r2, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80037d8:	60e1      	str	r1, [r4, #12]
 80037da:	e7ba      	b.n	8003752 <HAL_DMA_Start_IT+0x27e>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80037dc:	6823      	ldr	r3, [r4, #0]
 80037de:	f023 030e 	bic.w	r3, r3, #14
 80037e2:	f043 030a 	orr.w	r3, r3, #10
 80037e6:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 80037e8:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d1ba      	bne.n	8003766 <HAL_DMA_Start_IT+0x292>
 80037f0:	e7bd      	b.n	800376e <HAL_DMA_Start_IT+0x29a>
 80037f2:	bf00      	nop
 80037f4:	5802541c 	.word	0x5802541c
 80037f8:	58025408 	.word	0x58025408
 80037fc:	58025480 	.word	0x58025480
 8003800:	58025494 	.word	0x58025494

08003804 <HAL_DMA_Abort>:
{
 8003804:	b570      	push	{r4, r5, r6, lr}
 8003806:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8003808:	f7fe f938 	bl	8001a7c <HAL_GetTick>
  if(hdma == NULL)
 800380c:	2d00      	cmp	r5, #0
 800380e:	f000 8124 	beq.w	8003a5a <HAL_DMA_Abort+0x256>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003812:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 8003816:	2b02      	cmp	r3, #2
 8003818:	f040 80dd 	bne.w	80039d6 <HAL_DMA_Abort+0x1d2>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800381c:	682c      	ldr	r4, [r5, #0]
 800381e:	4606      	mov	r6, r0
 8003820:	4b8f      	ldr	r3, [pc, #572]	; (8003a60 <HAL_DMA_Abort+0x25c>)
 8003822:	4890      	ldr	r0, [pc, #576]	; (8003a64 <HAL_DMA_Abort+0x260>)
 8003824:	4a90      	ldr	r2, [pc, #576]	; (8003a68 <HAL_DMA_Abort+0x264>)
 8003826:	4284      	cmp	r4, r0
 8003828:	bf18      	it	ne
 800382a:	429c      	cmpne	r4, r3
 800382c:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8003830:	498e      	ldr	r1, [pc, #568]	; (8003a6c <HAL_DMA_Abort+0x268>)
 8003832:	bf0c      	ite	eq
 8003834:	2301      	moveq	r3, #1
 8003836:	2300      	movne	r3, #0
 8003838:	4284      	cmp	r4, r0
 800383a:	bf08      	it	eq
 800383c:	f043 0301 	orreq.w	r3, r3, #1
 8003840:	3018      	adds	r0, #24
 8003842:	4284      	cmp	r4, r0
 8003844:	bf08      	it	eq
 8003846:	f043 0301 	orreq.w	r3, r3, #1
 800384a:	3018      	adds	r0, #24
 800384c:	4284      	cmp	r4, r0
 800384e:	bf08      	it	eq
 8003850:	f043 0301 	orreq.w	r3, r3, #1
 8003854:	3018      	adds	r0, #24
 8003856:	4284      	cmp	r4, r0
 8003858:	bf08      	it	eq
 800385a:	f043 0301 	orreq.w	r3, r3, #1
 800385e:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8003862:	4284      	cmp	r4, r0
 8003864:	bf08      	it	eq
 8003866:	f043 0301 	orreq.w	r3, r3, #1
 800386a:	3018      	adds	r0, #24
 800386c:	4284      	cmp	r4, r0
 800386e:	bf08      	it	eq
 8003870:	f043 0301 	orreq.w	r3, r3, #1
 8003874:	3018      	adds	r0, #24
 8003876:	4284      	cmp	r4, r0
 8003878:	bf08      	it	eq
 800387a:	f043 0301 	orreq.w	r3, r3, #1
 800387e:	3018      	adds	r0, #24
 8003880:	4284      	cmp	r4, r0
 8003882:	bf08      	it	eq
 8003884:	f043 0301 	orreq.w	r3, r3, #1
 8003888:	3018      	adds	r0, #24
 800388a:	4284      	cmp	r4, r0
 800388c:	bf08      	it	eq
 800388e:	f043 0301 	orreq.w	r3, r3, #1
 8003892:	3018      	adds	r0, #24
 8003894:	4284      	cmp	r4, r0
 8003896:	bf08      	it	eq
 8003898:	f043 0301 	orreq.w	r3, r3, #1
 800389c:	3018      	adds	r0, #24
 800389e:	4284      	cmp	r4, r0
 80038a0:	bf08      	it	eq
 80038a2:	f043 0301 	orreq.w	r3, r3, #1
 80038a6:	3018      	adds	r0, #24
 80038a8:	4284      	cmp	r4, r0
 80038aa:	bf08      	it	eq
 80038ac:	f043 0301 	orreq.w	r3, r3, #1
 80038b0:	428c      	cmp	r4, r1
 80038b2:	bf18      	it	ne
 80038b4:	4294      	cmpne	r4, r2
 80038b6:	bf0c      	ite	eq
 80038b8:	2201      	moveq	r2, #1
 80038ba:	2200      	movne	r2, #0
 80038bc:	d002      	beq.n	80038c4 <HAL_DMA_Abort+0xc0>
 80038be:	2b00      	cmp	r3, #0
 80038c0:	f000 8090 	beq.w	80039e4 <HAL_DMA_Abort+0x1e0>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80038c4:	6821      	ldr	r1, [r4, #0]
 80038c6:	f021 011e 	bic.w	r1, r1, #30
 80038ca:	6021      	str	r1, [r4, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80038cc:	6961      	ldr	r1, [r4, #20]
 80038ce:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80038d2:	6161      	str	r1, [r4, #20]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80038d4:	2a00      	cmp	r2, #0
 80038d6:	f000 80b0 	beq.w	8003a3a <HAL_DMA_Abort+0x236>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80038da:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 80038dc:	6813      	ldr	r3, [r2, #0]
 80038de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038e2:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80038e4:	6823      	ldr	r3, [r4, #0]
 80038e6:	f023 0301 	bic.w	r3, r3, #1
 80038ea:	6023      	str	r3, [r4, #0]
 80038ec:	e005      	b.n	80038fa <HAL_DMA_Abort+0xf6>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038ee:	f7fe f8c5 	bl	8001a7c <HAL_GetTick>
 80038f2:	1b83      	subs	r3, r0, r6
 80038f4:	2b05      	cmp	r3, #5
 80038f6:	f200 80a6 	bhi.w	8003a46 <HAL_DMA_Abort+0x242>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80038fa:	6823      	ldr	r3, [r4, #0]
 80038fc:	07db      	lsls	r3, r3, #31
 80038fe:	d4f6      	bmi.n	80038ee <HAL_DMA_Abort+0xea>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003900:	682a      	ldr	r2, [r5, #0]
 8003902:	4b57      	ldr	r3, [pc, #348]	; (8003a60 <HAL_DMA_Abort+0x25c>)
 8003904:	4857      	ldr	r0, [pc, #348]	; (8003a64 <HAL_DMA_Abort+0x260>)
 8003906:	495a      	ldr	r1, [pc, #360]	; (8003a70 <HAL_DMA_Abort+0x26c>)
 8003908:	4282      	cmp	r2, r0
 800390a:	bf18      	it	ne
 800390c:	429a      	cmpne	r2, r3
 800390e:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8003912:	bf0c      	ite	eq
 8003914:	2301      	moveq	r3, #1
 8003916:	2300      	movne	r3, #0
 8003918:	428a      	cmp	r2, r1
 800391a:	bf08      	it	eq
 800391c:	f043 0301 	orreq.w	r3, r3, #1
 8003920:	3130      	adds	r1, #48	; 0x30
 8003922:	4282      	cmp	r2, r0
 8003924:	bf08      	it	eq
 8003926:	f043 0301 	orreq.w	r3, r3, #1
 800392a:	3030      	adds	r0, #48	; 0x30
 800392c:	428a      	cmp	r2, r1
 800392e:	bf08      	it	eq
 8003930:	f043 0301 	orreq.w	r3, r3, #1
 8003934:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8003938:	4282      	cmp	r2, r0
 800393a:	bf08      	it	eq
 800393c:	f043 0301 	orreq.w	r3, r3, #1
 8003940:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8003944:	428a      	cmp	r2, r1
 8003946:	bf08      	it	eq
 8003948:	f043 0301 	orreq.w	r3, r3, #1
 800394c:	3130      	adds	r1, #48	; 0x30
 800394e:	4282      	cmp	r2, r0
 8003950:	bf08      	it	eq
 8003952:	f043 0301 	orreq.w	r3, r3, #1
 8003956:	3030      	adds	r0, #48	; 0x30
 8003958:	428a      	cmp	r2, r1
 800395a:	bf08      	it	eq
 800395c:	f043 0301 	orreq.w	r3, r3, #1
 8003960:	3130      	adds	r1, #48	; 0x30
 8003962:	4282      	cmp	r2, r0
 8003964:	bf08      	it	eq
 8003966:	f043 0301 	orreq.w	r3, r3, #1
 800396a:	3030      	adds	r0, #48	; 0x30
 800396c:	428a      	cmp	r2, r1
 800396e:	bf08      	it	eq
 8003970:	f043 0301 	orreq.w	r3, r3, #1
 8003974:	3130      	adds	r1, #48	; 0x30
 8003976:	4282      	cmp	r2, r0
 8003978:	bf08      	it	eq
 800397a:	f043 0301 	orreq.w	r3, r3, #1
 800397e:	428a      	cmp	r2, r1
 8003980:	bf08      	it	eq
 8003982:	f043 0301 	orreq.w	r3, r3, #1
 8003986:	3118      	adds	r1, #24
 8003988:	428a      	cmp	r2, r1
 800398a:	bf08      	it	eq
 800398c:	f043 0301 	orreq.w	r3, r3, #1
 8003990:	b933      	cbnz	r3, 80039a0 <HAL_DMA_Abort+0x19c>
 8003992:	f5a1 6195 	sub.w	r1, r1, #1192	; 0x4a8
 8003996:	4b35      	ldr	r3, [pc, #212]	; (8003a6c <HAL_DMA_Abort+0x268>)
 8003998:	429a      	cmp	r2, r3
 800399a:	bf18      	it	ne
 800399c:	428a      	cmpne	r2, r1
 800399e:	d16f      	bne.n	8003a80 <HAL_DMA_Abort+0x27c>
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80039a0:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80039a2:	233f      	movs	r3, #63	; 0x3f
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039a4:	6da9      	ldr	r1, [r5, #88]	; 0x58
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80039a6:	f002 021f 	and.w	r2, r2, #31
 80039aa:	4093      	lsls	r3, r2
 80039ac:	608b      	str	r3, [r1, #8]
      if(hdma->DMAmuxRequestGen != 0U)
 80039ae:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039b0:	e9d5 2119 	ldrd	r2, r1, [r5, #100]	; 0x64
 80039b4:	6051      	str	r1, [r2, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 80039b6:	b133      	cbz	r3, 80039c6 <HAL_DMA_Abort+0x1c2>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80039b8:	681a      	ldr	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039ba:	e9d5 101c 	ldrd	r1, r0, [r5, #112]	; 0x70
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80039be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039c2:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039c4:	6048      	str	r0, [r1, #4]
    __HAL_UNLOCK(hdma);
 80039c6:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_READY;
 80039c8:	2201      	movs	r2, #1
  return HAL_OK;
 80039ca:	4618      	mov	r0, r3
    hdma->State = HAL_DMA_STATE_READY;
 80039cc:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 80039d0:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
}
 80039d4:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039d6:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 80039d8:	2300      	movs	r3, #0
    return HAL_ERROR;
 80039da:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039dc:	656a      	str	r2, [r5, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 80039de:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
}
 80039e2:	bd70      	pop	{r4, r5, r6, pc}
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80039e4:	6822      	ldr	r2, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80039e6:	4923      	ldr	r1, [pc, #140]	; (8003a74 <HAL_DMA_Abort+0x270>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80039e8:	f022 020e 	bic.w	r2, r2, #14
 80039ec:	6022      	str	r2, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80039ee:	4a22      	ldr	r2, [pc, #136]	; (8003a78 <HAL_DMA_Abort+0x274>)
 80039f0:	428c      	cmp	r4, r1
 80039f2:	bf18      	it	ne
 80039f4:	4294      	cmpne	r4, r2
 80039f6:	f101 0128 	add.w	r1, r1, #40	; 0x28
 80039fa:	bf0c      	ite	eq
 80039fc:	2201      	moveq	r2, #1
 80039fe:	2200      	movne	r2, #0
 8003a00:	428c      	cmp	r4, r1
 8003a02:	bf08      	it	eq
 8003a04:	f042 0201 	orreq.w	r2, r2, #1
 8003a08:	3114      	adds	r1, #20
 8003a0a:	428c      	cmp	r4, r1
 8003a0c:	bf08      	it	eq
 8003a0e:	f042 0201 	orreq.w	r2, r2, #1
 8003a12:	3114      	adds	r1, #20
 8003a14:	428c      	cmp	r4, r1
 8003a16:	bf08      	it	eq
 8003a18:	f042 0201 	orreq.w	r2, r2, #1
 8003a1c:	3114      	adds	r1, #20
 8003a1e:	428c      	cmp	r4, r1
 8003a20:	bf08      	it	eq
 8003a22:	f042 0201 	orreq.w	r2, r2, #1
 8003a26:	3114      	adds	r1, #20
 8003a28:	428c      	cmp	r4, r1
 8003a2a:	bf08      	it	eq
 8003a2c:	f042 0201 	orreq.w	r2, r2, #1
 8003a30:	b91a      	cbnz	r2, 8003a3a <HAL_DMA_Abort+0x236>
 8003a32:	4a12      	ldr	r2, [pc, #72]	; (8003a7c <HAL_DMA_Abort+0x278>)
 8003a34:	4294      	cmp	r4, r2
 8003a36:	f47f af55 	bne.w	80038e4 <HAL_DMA_Abort+0xe0>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003a3a:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8003a3c:	680a      	ldr	r2, [r1, #0]
 8003a3e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a42:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8003a44:	e74e      	b.n	80038e4 <HAL_DMA_Abort+0xe0>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a46:	2120      	movs	r1, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 8003a48:	2203      	movs	r2, #3
        __HAL_UNLOCK(hdma);
 8003a4a:	2300      	movs	r3, #0
        return HAL_ERROR;
 8003a4c:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a4e:	6569      	str	r1, [r5, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8003a50:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_ERROR;
 8003a54:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
}
 8003a58:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003a5a:	2001      	movs	r0, #1
}
 8003a5c:	bd70      	pop	{r4, r5, r6, pc}
 8003a5e:	bf00      	nop
 8003a60:	40020058 	.word	0x40020058
 8003a64:	40020040 	.word	0x40020040
 8003a68:	40020010 	.word	0x40020010
 8003a6c:	40020028 	.word	0x40020028
 8003a70:	40020070 	.word	0x40020070
 8003a74:	58025408 	.word	0x58025408
 8003a78:	5802541c 	.word	0x5802541c
 8003a7c:	58025494 	.word	0x58025494
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003a80:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 8003a82:	2101      	movs	r1, #1
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a84:	4b16      	ldr	r3, [pc, #88]	; (8003ae0 <HAL_DMA_Abort+0x2dc>)
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003a86:	f000 001f 	and.w	r0, r0, #31
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a8a:	4c16      	ldr	r4, [pc, #88]	; (8003ae4 <HAL_DMA_Abort+0x2e0>)
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003a8c:	4081      	lsls	r1, r0
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a8e:	42a2      	cmp	r2, r4
 8003a90:	bf18      	it	ne
 8003a92:	429a      	cmpne	r2, r3
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a94:	6da8      	ldr	r0, [r5, #88]	; 0x58
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a96:	bf0c      	ite	eq
 8003a98:	2301      	moveq	r3, #1
 8003a9a:	2300      	movne	r3, #0
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003a9c:	6041      	str	r1, [r0, #4]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a9e:	4812      	ldr	r0, [pc, #72]	; (8003ae8 <HAL_DMA_Abort+0x2e4>)
 8003aa0:	4912      	ldr	r1, [pc, #72]	; (8003aec <HAL_DMA_Abort+0x2e8>)
 8003aa2:	4282      	cmp	r2, r0
 8003aa4:	bf08      	it	eq
 8003aa6:	f043 0301 	orreq.w	r3, r3, #1
 8003aaa:	3028      	adds	r0, #40	; 0x28
 8003aac:	428a      	cmp	r2, r1
 8003aae:	bf08      	it	eq
 8003ab0:	f043 0301 	orreq.w	r3, r3, #1
 8003ab4:	3128      	adds	r1, #40	; 0x28
 8003ab6:	4282      	cmp	r2, r0
 8003ab8:	bf08      	it	eq
 8003aba:	f043 0301 	orreq.w	r3, r3, #1
 8003abe:	428a      	cmp	r2, r1
 8003ac0:	bf08      	it	eq
 8003ac2:	f043 0301 	orreq.w	r3, r3, #1
 8003ac6:	3114      	adds	r1, #20
 8003ac8:	428a      	cmp	r2, r1
 8003aca:	bf08      	it	eq
 8003acc:	f043 0301 	orreq.w	r3, r3, #1
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	f47f af6c 	bne.w	80039ae <HAL_DMA_Abort+0x1aa>
 8003ad6:	4b06      	ldr	r3, [pc, #24]	; (8003af0 <HAL_DMA_Abort+0x2ec>)
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	f43f af68 	beq.w	80039ae <HAL_DMA_Abort+0x1aa>
 8003ade:	e772      	b.n	80039c6 <HAL_DMA_Abort+0x1c2>
 8003ae0:	5802541c 	.word	0x5802541c
 8003ae4:	58025408 	.word	0x58025408
 8003ae8:	58025430 	.word	0x58025430
 8003aec:	58025444 	.word	0x58025444
 8003af0:	58025494 	.word	0x58025494

08003af4 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 8003af4:	2800      	cmp	r0, #0
 8003af6:	d05f      	beq.n	8003bb8 <HAL_DMA_Abort_IT+0xc4>
{
 8003af8:	b538      	push	{r3, r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003afa:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 8003afe:	4603      	mov	r3, r0
 8003b00:	2a02      	cmp	r2, #2
 8003b02:	d155      	bne.n	8003bb0 <HAL_DMA_Abort_IT+0xbc>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003b04:	6801      	ldr	r1, [r0, #0]
 8003b06:	4a57      	ldr	r2, [pc, #348]	; (8003c64 <HAL_DMA_Abort_IT+0x170>)
 8003b08:	4291      	cmp	r1, r2
 8003b0a:	d048      	beq.n	8003b9e <HAL_DMA_Abort_IT+0xaa>
 8003b0c:	3218      	adds	r2, #24
 8003b0e:	4291      	cmp	r1, r2
 8003b10:	d045      	beq.n	8003b9e <HAL_DMA_Abort_IT+0xaa>
 8003b12:	3230      	adds	r2, #48	; 0x30
 8003b14:	4c54      	ldr	r4, [pc, #336]	; (8003c68 <HAL_DMA_Abort_IT+0x174>)
 8003b16:	4855      	ldr	r0, [pc, #340]	; (8003c6c <HAL_DMA_Abort_IT+0x178>)
 8003b18:	42a1      	cmp	r1, r4
 8003b1a:	bf18      	it	ne
 8003b1c:	4291      	cmpne	r1, r2
 8003b1e:	f104 0448 	add.w	r4, r4, #72	; 0x48
 8003b22:	bf0c      	ite	eq
 8003b24:	2201      	moveq	r2, #1
 8003b26:	2200      	movne	r2, #0
 8003b28:	4281      	cmp	r1, r0
 8003b2a:	bf08      	it	eq
 8003b2c:	f042 0201 	orreq.w	r2, r2, #1
 8003b30:	3030      	adds	r0, #48	; 0x30
 8003b32:	42a1      	cmp	r1, r4
 8003b34:	bf08      	it	eq
 8003b36:	f042 0201 	orreq.w	r2, r2, #1
 8003b3a:	3430      	adds	r4, #48	; 0x30
 8003b3c:	4281      	cmp	r1, r0
 8003b3e:	bf08      	it	eq
 8003b40:	f042 0201 	orreq.w	r2, r2, #1
 8003b44:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8003b48:	42a1      	cmp	r1, r4
 8003b4a:	bf08      	it	eq
 8003b4c:	f042 0201 	orreq.w	r2, r2, #1
 8003b50:	f504 745c 	add.w	r4, r4, #880	; 0x370
 8003b54:	4281      	cmp	r1, r0
 8003b56:	bf08      	it	eq
 8003b58:	f042 0201 	orreq.w	r2, r2, #1
 8003b5c:	3030      	adds	r0, #48	; 0x30
 8003b5e:	42a1      	cmp	r1, r4
 8003b60:	bf08      	it	eq
 8003b62:	f042 0201 	orreq.w	r2, r2, #1
 8003b66:	3430      	adds	r4, #48	; 0x30
 8003b68:	4281      	cmp	r1, r0
 8003b6a:	bf08      	it	eq
 8003b6c:	f042 0201 	orreq.w	r2, r2, #1
 8003b70:	3030      	adds	r0, #48	; 0x30
 8003b72:	42a1      	cmp	r1, r4
 8003b74:	bf08      	it	eq
 8003b76:	f042 0201 	orreq.w	r2, r2, #1
 8003b7a:	3430      	adds	r4, #48	; 0x30
 8003b7c:	4281      	cmp	r1, r0
 8003b7e:	bf08      	it	eq
 8003b80:	f042 0201 	orreq.w	r2, r2, #1
 8003b84:	3030      	adds	r0, #48	; 0x30
 8003b86:	42a1      	cmp	r1, r4
 8003b88:	bf08      	it	eq
 8003b8a:	f042 0201 	orreq.w	r2, r2, #1
 8003b8e:	4281      	cmp	r1, r0
 8003b90:	bf08      	it	eq
 8003b92:	f042 0201 	orreq.w	r2, r2, #1
 8003b96:	b912      	cbnz	r2, 8003b9e <HAL_DMA_Abort_IT+0xaa>
 8003b98:	4a35      	ldr	r2, [pc, #212]	; (8003c70 <HAL_DMA_Abort_IT+0x17c>)
 8003b9a:	4291      	cmp	r1, r2
 8003b9c:	d10e      	bne.n	8003bbc <HAL_DMA_Abort_IT+0xc8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8003b9e:	2204      	movs	r2, #4
  return HAL_OK;
 8003ba0:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
 8003ba2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8003ba6:	680b      	ldr	r3, [r1, #0]
 8003ba8:	f023 0301 	bic.w	r3, r3, #1
 8003bac:	600b      	str	r3, [r1, #0]
}
 8003bae:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bb0:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 8003bb2:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bb4:	655a      	str	r2, [r3, #84]	; 0x54
}
 8003bb6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003bb8:	2001      	movs	r0, #1
}
 8003bba:	4770      	bx	lr
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003bbc:	4a2d      	ldr	r2, [pc, #180]	; (8003c74 <HAL_DMA_Abort_IT+0x180>)
 8003bbe:	4d2e      	ldr	r5, [pc, #184]	; (8003c78 <HAL_DMA_Abort_IT+0x184>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003bc0:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003bc2:	42a9      	cmp	r1, r5
 8003bc4:	bf18      	it	ne
 8003bc6:	4291      	cmpne	r1, r2
 8003bc8:	4c2c      	ldr	r4, [pc, #176]	; (8003c7c <HAL_DMA_Abort_IT+0x188>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003bca:	f020 000e 	bic.w	r0, r0, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003bce:	f105 053c 	add.w	r5, r5, #60	; 0x3c
 8003bd2:	bf0c      	ite	eq
 8003bd4:	2201      	moveq	r2, #1
 8003bd6:	2200      	movne	r2, #0
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003bd8:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003bda:	42a1      	cmp	r1, r4
 8003bdc:	bf08      	it	eq
 8003bde:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 8003be2:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003be4:	3428      	adds	r4, #40	; 0x28
 8003be6:	42a9      	cmp	r1, r5
 8003be8:	bf08      	it	eq
 8003bea:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 8003bee:	f020 0001 	bic.w	r0, r0, #1
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003bf2:	42a1      	cmp	r1, r4
 8003bf4:	bf08      	it	eq
 8003bf6:	f042 0201 	orreq.w	r2, r2, #1
 8003bfa:	3414      	adds	r4, #20
      __HAL_DMA_DISABLE(hdma);
 8003bfc:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003bfe:	42a1      	cmp	r1, r4
 8003c00:	bf08      	it	eq
 8003c02:	f042 0201 	orreq.w	r2, r2, #1
 8003c06:	481e      	ldr	r0, [pc, #120]	; (8003c80 <HAL_DMA_Abort_IT+0x18c>)
 8003c08:	4281      	cmp	r1, r0
 8003c0a:	bf08      	it	eq
 8003c0c:	f042 0201 	orreq.w	r2, r2, #1
 8003c10:	b912      	cbnz	r2, 8003c18 <HAL_DMA_Abort_IT+0x124>
 8003c12:	4a1c      	ldr	r2, [pc, #112]	; (8003c84 <HAL_DMA_Abort_IT+0x190>)
 8003c14:	4291      	cmp	r1, r2
 8003c16:	d117      	bne.n	8003c48 <HAL_DMA_Abort_IT+0x154>
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003c18:	2201      	movs	r2, #1
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c1a:	6d9d      	ldr	r5, [r3, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003c1c:	e9d3 0417 	ldrd	r0, r4, [r3, #92]	; 0x5c
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003c20:	6821      	ldr	r1, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003c22:	f000 001f 	and.w	r0, r0, #31
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003c26:	f421 7180 	bic.w	r1, r1, #256	; 0x100
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003c2a:	4082      	lsls	r2, r0
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003c2c:	6021      	str	r1, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003c2e:	606a      	str	r2, [r5, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8003c30:	6eda      	ldr	r2, [r3, #108]	; 0x6c
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c32:	e9d3 1019 	ldrd	r1, r0, [r3, #100]	; 0x64
 8003c36:	6048      	str	r0, [r1, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8003c38:	b132      	cbz	r2, 8003c48 <HAL_DMA_Abort_IT+0x154>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003c3a:	6811      	ldr	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c3c:	e9d3 041c 	ldrd	r0, r4, [r3, #112]	; 0x70
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003c40:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8003c44:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c46:	6044      	str	r4, [r0, #4]
      hdma->State = HAL_DMA_STATE_READY;
 8003c48:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma);
 8003c4a:	2400      	movs	r4, #0
      if(hdma->XferAbortCallback != NULL)
 8003c4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      hdma->State = HAL_DMA_STATE_READY;
 8003c4e:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8003c52:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 8003c56:	b11a      	cbz	r2, 8003c60 <HAL_DMA_Abort_IT+0x16c>
        hdma->XferAbortCallback(hdma);
 8003c58:	4618      	mov	r0, r3
 8003c5a:	4790      	blx	r2
  return HAL_OK;
 8003c5c:	4620      	mov	r0, r4
}
 8003c5e:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8003c60:	4610      	mov	r0, r2
}
 8003c62:	bd38      	pop	{r3, r4, r5, pc}
 8003c64:	40020010 	.word	0x40020010
 8003c68:	40020040 	.word	0x40020040
 8003c6c:	40020070 	.word	0x40020070
 8003c70:	400204b8 	.word	0x400204b8
 8003c74:	5802541c 	.word	0x5802541c
 8003c78:	58025408 	.word	0x58025408
 8003c7c:	58025430 	.word	0x58025430
 8003c80:	58025480 	.word	0x58025480
 8003c84:	58025494 	.word	0x58025494

08003c88 <HAL_DMA_IRQHandler>:
{
 8003c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __IO uint32_t count = 0U;
 8003c8c:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600U;
 8003c8e:	4b9e      	ldr	r3, [pc, #632]	; (8003f08 <HAL_DMA_IRQHandler+0x280>)
{
 8003c90:	b082      	sub	sp, #8
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c92:	6d84      	ldr	r4, [r0, #88]	; 0x58
{
 8003c94:	4606      	mov	r6, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 8003c96:	681d      	ldr	r5, [r3, #0]
  __IO uint32_t count = 0U;
 8003c98:	9201      	str	r2, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003c9a:	6803      	ldr	r3, [r0, #0]
 8003c9c:	4a9b      	ldr	r2, [pc, #620]	; (8003f0c <HAL_DMA_IRQHandler+0x284>)
 8003c9e:	489c      	ldr	r0, [pc, #624]	; (8003f10 <HAL_DMA_IRQHandler+0x288>)
  tmpisr_dma  = regs_dma->ISR;
 8003ca0:	6827      	ldr	r7, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	bf18      	it	ne
 8003ca6:	4283      	cmpne	r3, r0
  tmpisr_bdma = regs_bdma->ISR;
 8003ca8:	6821      	ldr	r1, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003caa:	bf0c      	ite	eq
 8003cac:	2001      	moveq	r0, #1
 8003cae:	2000      	movne	r0, #0
 8003cb0:	d04f      	beq.n	8003d52 <HAL_DMA_IRQHandler+0xca>
 8003cb2:	3218      	adds	r2, #24
 8003cb4:	f8df c260 	ldr.w	ip, [pc, #608]	; 8003f18 <HAL_DMA_IRQHandler+0x290>
 8003cb8:	4563      	cmp	r3, ip
 8003cba:	bf18      	it	ne
 8003cbc:	4293      	cmpne	r3, r2
 8003cbe:	f10c 0c18 	add.w	ip, ip, #24
 8003cc2:	bf0c      	ite	eq
 8003cc4:	2201      	moveq	r2, #1
 8003cc6:	2200      	movne	r2, #0
 8003cc8:	4563      	cmp	r3, ip
 8003cca:	bf08      	it	eq
 8003ccc:	f042 0201 	orreq.w	r2, r2, #1
 8003cd0:	f10c 0c18 	add.w	ip, ip, #24
 8003cd4:	4563      	cmp	r3, ip
 8003cd6:	bf08      	it	eq
 8003cd8:	f042 0201 	orreq.w	r2, r2, #1
 8003cdc:	f10c 0c18 	add.w	ip, ip, #24
 8003ce0:	4563      	cmp	r3, ip
 8003ce2:	bf08      	it	eq
 8003ce4:	f042 0201 	orreq.w	r2, r2, #1
 8003ce8:	f10c 0c18 	add.w	ip, ip, #24
 8003cec:	4563      	cmp	r3, ip
 8003cee:	bf08      	it	eq
 8003cf0:	f042 0201 	orreq.w	r2, r2, #1
 8003cf4:	f50c 7c56 	add.w	ip, ip, #856	; 0x358
 8003cf8:	4563      	cmp	r3, ip
 8003cfa:	bf08      	it	eq
 8003cfc:	f042 0201 	orreq.w	r2, r2, #1
 8003d00:	f10c 0c18 	add.w	ip, ip, #24
 8003d04:	4563      	cmp	r3, ip
 8003d06:	bf08      	it	eq
 8003d08:	f042 0201 	orreq.w	r2, r2, #1
 8003d0c:	f10c 0c18 	add.w	ip, ip, #24
 8003d10:	4563      	cmp	r3, ip
 8003d12:	bf08      	it	eq
 8003d14:	f042 0201 	orreq.w	r2, r2, #1
 8003d18:	f10c 0c18 	add.w	ip, ip, #24
 8003d1c:	4563      	cmp	r3, ip
 8003d1e:	bf08      	it	eq
 8003d20:	f042 0201 	orreq.w	r2, r2, #1
 8003d24:	f10c 0c18 	add.w	ip, ip, #24
 8003d28:	4563      	cmp	r3, ip
 8003d2a:	bf08      	it	eq
 8003d2c:	f042 0201 	orreq.w	r2, r2, #1
 8003d30:	f10c 0c18 	add.w	ip, ip, #24
 8003d34:	4563      	cmp	r3, ip
 8003d36:	bf08      	it	eq
 8003d38:	f042 0201 	orreq.w	r2, r2, #1
 8003d3c:	f10c 0c18 	add.w	ip, ip, #24
 8003d40:	4563      	cmp	r3, ip
 8003d42:	bf08      	it	eq
 8003d44:	f042 0201 	orreq.w	r2, r2, #1
 8003d48:	b91a      	cbnz	r2, 8003d52 <HAL_DMA_IRQHandler+0xca>
 8003d4a:	4a72      	ldr	r2, [pc, #456]	; (8003f14 <HAL_DMA_IRQHandler+0x28c>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	f040 824b 	bne.w	80041e8 <HAL_DMA_IRQHandler+0x560>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d52:	6df1      	ldr	r1, [r6, #92]	; 0x5c
 8003d54:	2208      	movs	r2, #8
 8003d56:	f001 0c1f 	and.w	ip, r1, #31
 8003d5a:	fa02 f20c 	lsl.w	r2, r2, ip
 8003d5e:	4217      	tst	r7, r2
 8003d60:	f040 817d 	bne.w	800405e <HAL_DMA_IRQHandler+0x3d6>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d64:	fa27 f20c 	lsr.w	r2, r7, ip
 8003d68:	07d2      	lsls	r2, r2, #31
 8003d6a:	d50a      	bpl.n	8003d82 <HAL_DMA_IRQHandler+0xfa>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003d6c:	695a      	ldr	r2, [r3, #20]
 8003d6e:	0612      	lsls	r2, r2, #24
 8003d70:	d507      	bpl.n	8003d82 <HAL_DMA_IRQHandler+0xfa>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d72:	2201      	movs	r2, #1
 8003d74:	fa02 f20c 	lsl.w	r2, r2, ip
 8003d78:	60a2      	str	r2, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003d7a:	6d72      	ldr	r2, [r6, #84]	; 0x54
 8003d7c:	f042 0202 	orr.w	r2, r2, #2
 8003d80:	6572      	str	r2, [r6, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d82:	f04f 0e04 	mov.w	lr, #4
 8003d86:	fa0e fe0c 	lsl.w	lr, lr, ip
 8003d8a:	ea1e 0f07 	tst.w	lr, r7
 8003d8e:	d05a      	beq.n	8003e46 <HAL_DMA_IRQHandler+0x1be>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003d90:	2800      	cmp	r0, #0
 8003d92:	d14f      	bne.n	8003e34 <HAL_DMA_IRQHandler+0x1ac>
 8003d94:	4a60      	ldr	r2, [pc, #384]	; (8003f18 <HAL_DMA_IRQHandler+0x290>)
 8003d96:	f8df 8184 	ldr.w	r8, [pc, #388]	; 8003f1c <HAL_DMA_IRQHandler+0x294>
 8003d9a:	4543      	cmp	r3, r8
 8003d9c:	bf18      	it	ne
 8003d9e:	4293      	cmpne	r3, r2
 8003da0:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8003da4:	bf0c      	ite	eq
 8003da6:	2201      	moveq	r2, #1
 8003da8:	2200      	movne	r2, #0
 8003daa:	4543      	cmp	r3, r8
 8003dac:	bf08      	it	eq
 8003dae:	f042 0201 	orreq.w	r2, r2, #1
 8003db2:	f108 0818 	add.w	r8, r8, #24
 8003db6:	4543      	cmp	r3, r8
 8003db8:	bf08      	it	eq
 8003dba:	f042 0201 	orreq.w	r2, r2, #1
 8003dbe:	f108 0818 	add.w	r8, r8, #24
 8003dc2:	4543      	cmp	r3, r8
 8003dc4:	bf08      	it	eq
 8003dc6:	f042 0201 	orreq.w	r2, r2, #1
 8003dca:	f108 0818 	add.w	r8, r8, #24
 8003dce:	4543      	cmp	r3, r8
 8003dd0:	bf08      	it	eq
 8003dd2:	f042 0201 	orreq.w	r2, r2, #1
 8003dd6:	f508 7856 	add.w	r8, r8, #856	; 0x358
 8003dda:	4543      	cmp	r3, r8
 8003ddc:	bf08      	it	eq
 8003dde:	f042 0201 	orreq.w	r2, r2, #1
 8003de2:	f108 0818 	add.w	r8, r8, #24
 8003de6:	4543      	cmp	r3, r8
 8003de8:	bf08      	it	eq
 8003dea:	f042 0201 	orreq.w	r2, r2, #1
 8003dee:	f108 0818 	add.w	r8, r8, #24
 8003df2:	4543      	cmp	r3, r8
 8003df4:	bf08      	it	eq
 8003df6:	f042 0201 	orreq.w	r2, r2, #1
 8003dfa:	f108 0818 	add.w	r8, r8, #24
 8003dfe:	4543      	cmp	r3, r8
 8003e00:	bf08      	it	eq
 8003e02:	f042 0201 	orreq.w	r2, r2, #1
 8003e06:	f108 0818 	add.w	r8, r8, #24
 8003e0a:	4543      	cmp	r3, r8
 8003e0c:	bf08      	it	eq
 8003e0e:	f042 0201 	orreq.w	r2, r2, #1
 8003e12:	f108 0818 	add.w	r8, r8, #24
 8003e16:	4543      	cmp	r3, r8
 8003e18:	bf08      	it	eq
 8003e1a:	f042 0201 	orreq.w	r2, r2, #1
 8003e1e:	f108 0818 	add.w	r8, r8, #24
 8003e22:	4543      	cmp	r3, r8
 8003e24:	bf08      	it	eq
 8003e26:	f042 0201 	orreq.w	r2, r2, #1
 8003e2a:	b91a      	cbnz	r2, 8003e34 <HAL_DMA_IRQHandler+0x1ac>
 8003e2c:	4a39      	ldr	r2, [pc, #228]	; (8003f14 <HAL_DMA_IRQHandler+0x28c>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	f040 8214 	bne.w	800425c <HAL_DMA_IRQHandler+0x5d4>
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	0792      	lsls	r2, r2, #30
 8003e38:	d505      	bpl.n	8003e46 <HAL_DMA_IRQHandler+0x1be>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e3a:	f8c4 e008 	str.w	lr, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003e3e:	6d72      	ldr	r2, [r6, #84]	; 0x54
 8003e40:	f042 0204 	orr.w	r2, r2, #4
 8003e44:	6572      	str	r2, [r6, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e46:	2210      	movs	r2, #16
 8003e48:	fa02 fc0c 	lsl.w	ip, r2, ip
 8003e4c:	ea1c 0f07 	tst.w	ip, r7
 8003e50:	d069      	beq.n	8003f26 <HAL_DMA_IRQHandler+0x29e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003e52:	2800      	cmp	r0, #0
 8003e54:	d145      	bne.n	8003ee2 <HAL_DMA_IRQHandler+0x25a>
 8003e56:	4a30      	ldr	r2, [pc, #192]	; (8003f18 <HAL_DMA_IRQHandler+0x290>)
 8003e58:	4830      	ldr	r0, [pc, #192]	; (8003f1c <HAL_DMA_IRQHandler+0x294>)
 8003e5a:	4283      	cmp	r3, r0
 8003e5c:	bf18      	it	ne
 8003e5e:	4293      	cmpne	r3, r2
 8003e60:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8003e64:	bf0c      	ite	eq
 8003e66:	2201      	moveq	r2, #1
 8003e68:	2200      	movne	r2, #0
 8003e6a:	4283      	cmp	r3, r0
 8003e6c:	bf08      	it	eq
 8003e6e:	f042 0201 	orreq.w	r2, r2, #1
 8003e72:	3018      	adds	r0, #24
 8003e74:	4283      	cmp	r3, r0
 8003e76:	bf08      	it	eq
 8003e78:	f042 0201 	orreq.w	r2, r2, #1
 8003e7c:	3018      	adds	r0, #24
 8003e7e:	4283      	cmp	r3, r0
 8003e80:	bf08      	it	eq
 8003e82:	f042 0201 	orreq.w	r2, r2, #1
 8003e86:	3018      	adds	r0, #24
 8003e88:	4283      	cmp	r3, r0
 8003e8a:	bf08      	it	eq
 8003e8c:	f042 0201 	orreq.w	r2, r2, #1
 8003e90:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8003e94:	4283      	cmp	r3, r0
 8003e96:	bf08      	it	eq
 8003e98:	f042 0201 	orreq.w	r2, r2, #1
 8003e9c:	3018      	adds	r0, #24
 8003e9e:	4283      	cmp	r3, r0
 8003ea0:	bf08      	it	eq
 8003ea2:	f042 0201 	orreq.w	r2, r2, #1
 8003ea6:	3018      	adds	r0, #24
 8003ea8:	4283      	cmp	r3, r0
 8003eaa:	bf08      	it	eq
 8003eac:	f042 0201 	orreq.w	r2, r2, #1
 8003eb0:	3018      	adds	r0, #24
 8003eb2:	4283      	cmp	r3, r0
 8003eb4:	bf08      	it	eq
 8003eb6:	f042 0201 	orreq.w	r2, r2, #1
 8003eba:	3018      	adds	r0, #24
 8003ebc:	4283      	cmp	r3, r0
 8003ebe:	bf08      	it	eq
 8003ec0:	f042 0201 	orreq.w	r2, r2, #1
 8003ec4:	3018      	adds	r0, #24
 8003ec6:	4283      	cmp	r3, r0
 8003ec8:	bf08      	it	eq
 8003eca:	f042 0201 	orreq.w	r2, r2, #1
 8003ece:	3018      	adds	r0, #24
 8003ed0:	4283      	cmp	r3, r0
 8003ed2:	bf08      	it	eq
 8003ed4:	f042 0201 	orreq.w	r2, r2, #1
 8003ed8:	b91a      	cbnz	r2, 8003ee2 <HAL_DMA_IRQHandler+0x25a>
 8003eda:	4a0e      	ldr	r2, [pc, #56]	; (8003f14 <HAL_DMA_IRQHandler+0x28c>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	f040 81c5 	bne.w	800426c <HAL_DMA_IRQHandler+0x5e4>
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	0712      	lsls	r2, r2, #28
 8003ee6:	d51e      	bpl.n	8003f26 <HAL_DMA_IRQHandler+0x29e>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ee8:	f8c4 c008 	str.w	ip, [r4, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	0352      	lsls	r2, r2, #13
 8003ef0:	f100 814e 	bmi.w	8004190 <HAL_DMA_IRQHandler+0x508>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	05d2      	lsls	r2, r2, #23
 8003ef8:	d403      	bmi.n	8003f02 <HAL_DMA_IRQHandler+0x27a>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	f022 0208 	bic.w	r2, r2, #8
 8003f00:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 8003f02:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8003f04:	b17b      	cbz	r3, 8003f26 <HAL_DMA_IRQHandler+0x29e>
 8003f06:	e00b      	b.n	8003f20 <HAL_DMA_IRQHandler+0x298>
 8003f08:	20000164 	.word	0x20000164
 8003f0c:	40020028 	.word	0x40020028
 8003f10:	40020010 	.word	0x40020010
 8003f14:	400204b8 	.word	0x400204b8
 8003f18:	40020058 	.word	0x40020058
 8003f1c:	40020040 	.word	0x40020040
            hdma->XferHalfCpltCallback(hdma);
 8003f20:	4630      	mov	r0, r6
 8003f22:	4798      	blx	r3
 8003f24:	6df1      	ldr	r1, [r6, #92]	; 0x5c
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f26:	f001 011f 	and.w	r1, r1, #31
 8003f2a:	2020      	movs	r0, #32
 8003f2c:	4088      	lsls	r0, r1
 8003f2e:	4238      	tst	r0, r7
 8003f30:	d066      	beq.n	8004000 <HAL_DMA_IRQHandler+0x378>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003f32:	6832      	ldr	r2, [r6, #0]
 8003f34:	4ba4      	ldr	r3, [pc, #656]	; (80041c8 <HAL_DMA_IRQHandler+0x540>)
 8003f36:	4fa5      	ldr	r7, [pc, #660]	; (80041cc <HAL_DMA_IRQHandler+0x544>)
 8003f38:	42ba      	cmp	r2, r7
 8003f3a:	bf18      	it	ne
 8003f3c:	429a      	cmpne	r2, r3
 8003f3e:	f107 0718 	add.w	r7, r7, #24
 8003f42:	bf0c      	ite	eq
 8003f44:	2301      	moveq	r3, #1
 8003f46:	2300      	movne	r3, #0
 8003f48:	42ba      	cmp	r2, r7
 8003f4a:	bf08      	it	eq
 8003f4c:	f043 0301 	orreq.w	r3, r3, #1
 8003f50:	3718      	adds	r7, #24
 8003f52:	42ba      	cmp	r2, r7
 8003f54:	bf08      	it	eq
 8003f56:	f043 0301 	orreq.w	r3, r3, #1
 8003f5a:	3718      	adds	r7, #24
 8003f5c:	42ba      	cmp	r2, r7
 8003f5e:	bf08      	it	eq
 8003f60:	f043 0301 	orreq.w	r3, r3, #1
 8003f64:	3718      	adds	r7, #24
 8003f66:	42ba      	cmp	r2, r7
 8003f68:	bf08      	it	eq
 8003f6a:	f043 0301 	orreq.w	r3, r3, #1
 8003f6e:	3718      	adds	r7, #24
 8003f70:	42ba      	cmp	r2, r7
 8003f72:	bf08      	it	eq
 8003f74:	f043 0301 	orreq.w	r3, r3, #1
 8003f78:	3718      	adds	r7, #24
 8003f7a:	42ba      	cmp	r2, r7
 8003f7c:	bf08      	it	eq
 8003f7e:	f043 0301 	orreq.w	r3, r3, #1
 8003f82:	f507 7756 	add.w	r7, r7, #856	; 0x358
 8003f86:	42ba      	cmp	r2, r7
 8003f88:	bf08      	it	eq
 8003f8a:	f043 0301 	orreq.w	r3, r3, #1
 8003f8e:	3718      	adds	r7, #24
 8003f90:	42ba      	cmp	r2, r7
 8003f92:	bf08      	it	eq
 8003f94:	f043 0301 	orreq.w	r3, r3, #1
 8003f98:	3718      	adds	r7, #24
 8003f9a:	42ba      	cmp	r2, r7
 8003f9c:	bf08      	it	eq
 8003f9e:	f043 0301 	orreq.w	r3, r3, #1
 8003fa2:	3718      	adds	r7, #24
 8003fa4:	42ba      	cmp	r2, r7
 8003fa6:	bf08      	it	eq
 8003fa8:	f043 0301 	orreq.w	r3, r3, #1
 8003fac:	3718      	adds	r7, #24
 8003fae:	42ba      	cmp	r2, r7
 8003fb0:	bf08      	it	eq
 8003fb2:	f043 0301 	orreq.w	r3, r3, #1
 8003fb6:	3718      	adds	r7, #24
 8003fb8:	42ba      	cmp	r2, r7
 8003fba:	bf08      	it	eq
 8003fbc:	f043 0301 	orreq.w	r3, r3, #1
 8003fc0:	3718      	adds	r7, #24
 8003fc2:	42ba      	cmp	r2, r7
 8003fc4:	bf08      	it	eq
 8003fc6:	f043 0301 	orreq.w	r3, r3, #1
 8003fca:	b91b      	cbnz	r3, 8003fd4 <HAL_DMA_IRQHandler+0x34c>
 8003fcc:	4b80      	ldr	r3, [pc, #512]	; (80041d0 <HAL_DMA_IRQHandler+0x548>)
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	f040 8161 	bne.w	8004296 <HAL_DMA_IRQHandler+0x60e>
 8003fd4:	6813      	ldr	r3, [r2, #0]
 8003fd6:	06df      	lsls	r7, r3, #27
 8003fd8:	d512      	bpl.n	8004000 <HAL_DMA_IRQHandler+0x378>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003fda:	60a0      	str	r0, [r4, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003fdc:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
 8003fe0:	2b04      	cmp	r3, #4
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003fe2:	6813      	ldr	r3, [r2, #0]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003fe4:	f000 80b6 	beq.w	8004154 <HAL_DMA_IRQHandler+0x4cc>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003fe8:	f413 2f80 	tst.w	r3, #262144	; 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003fec:	6813      	ldr	r3, [r2, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003fee:	f000 80d8 	beq.w	80041a2 <HAL_DMA_IRQHandler+0x51a>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003ff2:	031f      	lsls	r7, r3, #12
 8003ff4:	f140 80e3 	bpl.w	80041be <HAL_DMA_IRQHandler+0x536>
          if(hdma->XferCpltCallback != NULL)
 8003ff8:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8003ffa:	b10b      	cbz	r3, 8004000 <HAL_DMA_IRQHandler+0x378>
            hdma->XferCpltCallback(hdma);
 8003ffc:	4630      	mov	r0, r6
 8003ffe:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004000:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8004002:	2b00      	cmp	r3, #0
 8004004:	f000 80c1 	beq.w	800418a <HAL_DMA_IRQHandler+0x502>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004008:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800400a:	07dc      	lsls	r4, r3, #31
 800400c:	d51e      	bpl.n	800404c <HAL_DMA_IRQHandler+0x3c4>
        __HAL_DMA_DISABLE(hdma);
 800400e:	6832      	ldr	r2, [r6, #0]
        hdma->State = HAL_DMA_STATE_ABORT;
 8004010:	2104      	movs	r1, #4
 8004012:	f886 1035 	strb.w	r1, [r6, #53]	; 0x35
  uint32_t timeout = SystemCoreClock / 9600U;
 8004016:	496f      	ldr	r1, [pc, #444]	; (80041d4 <HAL_DMA_IRQHandler+0x54c>)
        __HAL_DMA_DISABLE(hdma);
 8004018:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800401a:	fba1 5105 	umull	r5, r1, r1, r5
        __HAL_DMA_DISABLE(hdma);
 800401e:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 8004022:	0a89      	lsrs	r1, r1, #10
        __HAL_DMA_DISABLE(hdma);
 8004024:	6013      	str	r3, [r2, #0]
 8004026:	e002      	b.n	800402e <HAL_DMA_IRQHandler+0x3a6>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004028:	6813      	ldr	r3, [r2, #0]
 800402a:	07d8      	lsls	r0, r3, #31
 800402c:	d504      	bpl.n	8004038 <HAL_DMA_IRQHandler+0x3b0>
          if (++count > timeout)
 800402e:	9b01      	ldr	r3, [sp, #4]
 8004030:	3301      	adds	r3, #1
 8004032:	428b      	cmp	r3, r1
 8004034:	9301      	str	r3, [sp, #4]
 8004036:	d9f7      	bls.n	8004028 <HAL_DMA_IRQHandler+0x3a0>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004038:	6813      	ldr	r3, [r2, #0]
 800403a:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 800403c:	bf4c      	ite	mi
 800403e:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 8004040:	2301      	movpl	r3, #1
 8004042:	f886 3035 	strb.w	r3, [r6, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8004046:	2300      	movs	r3, #0
 8004048:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
 800404c:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 800404e:	2b00      	cmp	r3, #0
 8004050:	f000 809b 	beq.w	800418a <HAL_DMA_IRQHandler+0x502>
          hdma->XferCpltCallback(hdma);
 8004054:	4630      	mov	r0, r6
}
 8004056:	b002      	add	sp, #8
 8004058:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          hdma->XferCpltCallback(hdma);
 800405c:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800405e:	f8d3 e000 	ldr.w	lr, [r3]
 8004062:	f01e 0f04 	tst.w	lr, #4
 8004066:	d00a      	beq.n	800407e <HAL_DMA_IRQHandler+0x3f6>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004068:	f8d3 e000 	ldr.w	lr, [r3]
 800406c:	f02e 0e04 	bic.w	lr, lr, #4
 8004070:	f8c3 e000 	str.w	lr, [r3]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004074:	60a2      	str	r2, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004076:	6d72      	ldr	r2, [r6, #84]	; 0x54
 8004078:	f042 0201 	orr.w	r2, r2, #1
 800407c:	6572      	str	r2, [r6, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800407e:	fa27 f20c 	lsr.w	r2, r7, ip
 8004082:	07d2      	lsls	r2, r2, #31
 8004084:	f57f ae7d 	bpl.w	8003d82 <HAL_DMA_IRQHandler+0xfa>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004088:	4a53      	ldr	r2, [pc, #332]	; (80041d8 <HAL_DMA_IRQHandler+0x550>)
 800408a:	f8df e150 	ldr.w	lr, [pc, #336]	; 80041dc <HAL_DMA_IRQHandler+0x554>
 800408e:	4573      	cmp	r3, lr
 8004090:	bf18      	it	ne
 8004092:	4293      	cmpne	r3, r2
 8004094:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8004098:	bf0c      	ite	eq
 800409a:	2201      	moveq	r2, #1
 800409c:	2200      	movne	r2, #0
 800409e:	4573      	cmp	r3, lr
 80040a0:	bf08      	it	eq
 80040a2:	f042 0201 	orreq.w	r2, r2, #1
 80040a6:	f10e 0e18 	add.w	lr, lr, #24
 80040aa:	4573      	cmp	r3, lr
 80040ac:	bf08      	it	eq
 80040ae:	f042 0201 	orreq.w	r2, r2, #1
 80040b2:	f10e 0e18 	add.w	lr, lr, #24
 80040b6:	4573      	cmp	r3, lr
 80040b8:	bf08      	it	eq
 80040ba:	f042 0201 	orreq.w	r2, r2, #1
 80040be:	f10e 0e18 	add.w	lr, lr, #24
 80040c2:	4573      	cmp	r3, lr
 80040c4:	bf08      	it	eq
 80040c6:	f042 0201 	orreq.w	r2, r2, #1
 80040ca:	f50e 7e56 	add.w	lr, lr, #856	; 0x358
 80040ce:	4573      	cmp	r3, lr
 80040d0:	bf08      	it	eq
 80040d2:	f042 0201 	orreq.w	r2, r2, #1
 80040d6:	f10e 0e18 	add.w	lr, lr, #24
 80040da:	4573      	cmp	r3, lr
 80040dc:	bf08      	it	eq
 80040de:	f042 0201 	orreq.w	r2, r2, #1
 80040e2:	f10e 0e18 	add.w	lr, lr, #24
 80040e6:	4573      	cmp	r3, lr
 80040e8:	bf08      	it	eq
 80040ea:	f042 0201 	orreq.w	r2, r2, #1
 80040ee:	f10e 0e18 	add.w	lr, lr, #24
 80040f2:	4573      	cmp	r3, lr
 80040f4:	bf08      	it	eq
 80040f6:	f042 0201 	orreq.w	r2, r2, #1
 80040fa:	f10e 0e18 	add.w	lr, lr, #24
 80040fe:	4573      	cmp	r3, lr
 8004100:	bf08      	it	eq
 8004102:	f042 0201 	orreq.w	r2, r2, #1
 8004106:	f10e 0e18 	add.w	lr, lr, #24
 800410a:	4573      	cmp	r3, lr
 800410c:	bf08      	it	eq
 800410e:	f042 0201 	orreq.w	r2, r2, #1
 8004112:	f10e 0e18 	add.w	lr, lr, #24
 8004116:	4573      	cmp	r3, lr
 8004118:	bf08      	it	eq
 800411a:	f042 0201 	orreq.w	r2, r2, #1
 800411e:	f10e 0e18 	add.w	lr, lr, #24
 8004122:	4573      	cmp	r3, lr
 8004124:	bf08      	it	eq
 8004126:	f042 0201 	orreq.w	r2, r2, #1
 800412a:	2a00      	cmp	r2, #0
 800412c:	f47f ae1e 	bne.w	8003d6c <HAL_DMA_IRQHandler+0xe4>
 8004130:	2800      	cmp	r0, #0
 8004132:	f47f ae1b 	bne.w	8003d6c <HAL_DMA_IRQHandler+0xe4>
 8004136:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004138:	2204      	movs	r2, #4
 800413a:	fa02 f20c 	lsl.w	r2, r2, ip
 800413e:	423a      	tst	r2, r7
 8004140:	f040 808c 	bne.w	800425c <HAL_DMA_IRQHandler+0x5d4>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004144:	2210      	movs	r2, #16
 8004146:	fa02 fc0c 	lsl.w	ip, r2, ip
 800414a:	ea17 0f0c 	tst.w	r7, ip
 800414e:	f43f aeea 	beq.w	8003f26 <HAL_DMA_IRQHandler+0x29e>
 8004152:	e680      	b.n	8003e56 <HAL_DMA_IRQHandler+0x1ce>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004154:	f023 0316 	bic.w	r3, r3, #22
 8004158:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800415a:	6953      	ldr	r3, [r2, #20]
 800415c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004160:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004162:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8004164:	2b00      	cmp	r3, #0
 8004166:	d03b      	beq.n	80041e0 <HAL_DMA_IRQHandler+0x558>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004168:	6813      	ldr	r3, [r2, #0]
 800416a:	f023 0308 	bic.w	r3, r3, #8
 800416e:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004170:	233f      	movs	r3, #63	; 0x3f
          hdma->State = HAL_DMA_STATE_READY;
 8004172:	2001      	movs	r0, #1
          __HAL_UNLOCK(hdma);
 8004174:	2200      	movs	r2, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004176:	408b      	lsls	r3, r1
 8004178:	60a3      	str	r3, [r4, #8]
          if(hdma->XferAbortCallback != NULL)
 800417a:	6d33      	ldr	r3, [r6, #80]	; 0x50
          hdma->State = HAL_DMA_STATE_READY;
 800417c:	f886 0035 	strb.w	r0, [r6, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8004180:	f886 2034 	strb.w	r2, [r6, #52]	; 0x34
          if(hdma->XferAbortCallback != NULL)
 8004184:	2b00      	cmp	r3, #0
 8004186:	f47f af65 	bne.w	8004054 <HAL_DMA_IRQHandler+0x3cc>
}
 800418a:	b002      	add	sp, #8
 800418c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	0318      	lsls	r0, r3, #12
 8004194:	f57f aeb5 	bpl.w	8003f02 <HAL_DMA_IRQHandler+0x27a>
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004198:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 800419a:	2b00      	cmp	r3, #0
 800419c:	f47f aec0 	bne.w	8003f20 <HAL_DMA_IRQHandler+0x298>
 80041a0:	e6c1      	b.n	8003f26 <HAL_DMA_IRQHandler+0x29e>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80041a2:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 80041a6:	f47f af27 	bne.w	8003ff8 <HAL_DMA_IRQHandler+0x370>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80041aa:	6811      	ldr	r1, [r2, #0]
 80041ac:	f021 0110 	bic.w	r1, r1, #16
 80041b0:	6011      	str	r1, [r2, #0]
            hdma->State = HAL_DMA_STATE_READY;
 80041b2:	2201      	movs	r2, #1
            __HAL_UNLOCK(hdma);
 80041b4:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 80041b8:	f886 2035 	strb.w	r2, [r6, #53]	; 0x35
            __HAL_UNLOCK(hdma);
 80041bc:	e71c      	b.n	8003ff8 <HAL_DMA_IRQHandler+0x370>
            if(hdma->XferM1CpltCallback != NULL)
 80041be:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	f47f af1b 	bne.w	8003ffc <HAL_DMA_IRQHandler+0x374>
 80041c6:	e71b      	b.n	8004000 <HAL_DMA_IRQHandler+0x378>
 80041c8:	40020010 	.word	0x40020010
 80041cc:	40020028 	.word	0x40020028
 80041d0:	400204b8 	.word	0x400204b8
 80041d4:	1b4e81b5 	.word	0x1b4e81b5
 80041d8:	40020058 	.word	0x40020058
 80041dc:	40020040 	.word	0x40020040
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80041e0:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1c0      	bne.n	8004168 <HAL_DMA_IRQHandler+0x4e0>
 80041e6:	e7c3      	b.n	8004170 <HAL_DMA_IRQHandler+0x4e8>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80041e8:	4a4b      	ldr	r2, [pc, #300]	; (8004318 <HAL_DMA_IRQHandler+0x690>)
 80041ea:	484c      	ldr	r0, [pc, #304]	; (800431c <HAL_DMA_IRQHandler+0x694>)
 80041ec:	4283      	cmp	r3, r0
 80041ee:	bf18      	it	ne
 80041f0:	4293      	cmpne	r3, r2
 80041f2:	f100 0014 	add.w	r0, r0, #20
 80041f6:	bf0c      	ite	eq
 80041f8:	2201      	moveq	r2, #1
 80041fa:	2200      	movne	r2, #0
 80041fc:	4283      	cmp	r3, r0
 80041fe:	bf08      	it	eq
 8004200:	f042 0201 	orreq.w	r2, r2, #1
 8004204:	3014      	adds	r0, #20
 8004206:	4283      	cmp	r3, r0
 8004208:	bf08      	it	eq
 800420a:	f042 0201 	orreq.w	r2, r2, #1
 800420e:	3014      	adds	r0, #20
 8004210:	4283      	cmp	r3, r0
 8004212:	bf08      	it	eq
 8004214:	f042 0201 	orreq.w	r2, r2, #1
 8004218:	3014      	adds	r0, #20
 800421a:	4283      	cmp	r3, r0
 800421c:	bf08      	it	eq
 800421e:	f042 0201 	orreq.w	r2, r2, #1
 8004222:	3014      	adds	r0, #20
 8004224:	4283      	cmp	r3, r0
 8004226:	bf08      	it	eq
 8004228:	f042 0201 	orreq.w	r2, r2, #1
 800422c:	b912      	cbnz	r2, 8004234 <HAL_DMA_IRQHandler+0x5ac>
 800422e:	4a3c      	ldr	r2, [pc, #240]	; (8004320 <HAL_DMA_IRQHandler+0x698>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d1aa      	bne.n	800418a <HAL_DMA_IRQHandler+0x502>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004234:	6df0      	ldr	r0, [r6, #92]	; 0x5c
 8004236:	2504      	movs	r5, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004238:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800423a:	f000 001f 	and.w	r0, r0, #31
 800423e:	4085      	lsls	r5, r0
 8004240:	420d      	tst	r5, r1
 8004242:	d018      	beq.n	8004276 <HAL_DMA_IRQHandler+0x5ee>
 8004244:	0757      	lsls	r7, r2, #29
 8004246:	d516      	bpl.n	8004276 <HAL_DMA_IRQHandler+0x5ee>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004248:	0410      	lsls	r0, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800424a:	6065      	str	r5, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800424c:	d547      	bpl.n	80042de <HAL_DMA_IRQHandler+0x656>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800424e:	03d1      	lsls	r1, r2, #15
 8004250:	d44b      	bmi.n	80042ea <HAL_DMA_IRQHandler+0x662>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004252:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8004254:	2b00      	cmp	r3, #0
 8004256:	f47f aefd 	bne.w	8004054 <HAL_DMA_IRQHandler+0x3cc>
 800425a:	e796      	b.n	800418a <HAL_DMA_IRQHandler+0x502>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800425c:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800425e:	2210      	movs	r2, #16
 8004260:	fa02 fc0c 	lsl.w	ip, r2, ip
 8004264:	ea17 0f0c 	tst.w	r7, ip
 8004268:	f43f ae5d 	beq.w	8003f26 <HAL_DMA_IRQHandler+0x29e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	0750      	lsls	r0, r2, #29
 8004270:	f57f ae59 	bpl.w	8003f26 <HAL_DMA_IRQHandler+0x29e>
 8004274:	e638      	b.n	8003ee8 <HAL_DMA_IRQHandler+0x260>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004276:	2502      	movs	r5, #2
 8004278:	4085      	lsls	r5, r0
 800427a:	420d      	tst	r5, r1
 800427c:	d010      	beq.n	80042a0 <HAL_DMA_IRQHandler+0x618>
 800427e:	0797      	lsls	r7, r2, #30
 8004280:	d50e      	bpl.n	80042a0 <HAL_DMA_IRQHandler+0x618>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004282:	6065      	str	r5, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004284:	0414      	lsls	r4, r2, #16
 8004286:	d535      	bpl.n	80042f4 <HAL_DMA_IRQHandler+0x66c>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004288:	03d0      	lsls	r0, r2, #15
 800428a:	d43f      	bmi.n	800430c <HAL_DMA_IRQHandler+0x684>
          if(hdma->XferM1CpltCallback != NULL)
 800428c:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800428e:	2b00      	cmp	r3, #0
 8004290:	f47f aee0 	bne.w	8004054 <HAL_DMA_IRQHandler+0x3cc>
 8004294:	e779      	b.n	800418a <HAL_DMA_IRQHandler+0x502>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004296:	6813      	ldr	r3, [r2, #0]
 8004298:	079b      	lsls	r3, r3, #30
 800429a:	f57f aeb1 	bpl.w	8004000 <HAL_DMA_IRQHandler+0x378>
 800429e:	e69c      	b.n	8003fda <HAL_DMA_IRQHandler+0x352>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80042a0:	2508      	movs	r5, #8
 80042a2:	4085      	lsls	r5, r0
 80042a4:	420d      	tst	r5, r1
 80042a6:	f43f af70 	beq.w	800418a <HAL_DMA_IRQHandler+0x502>
 80042aa:	0711      	lsls	r1, r2, #28
 80042ac:	f57f af6d 	bpl.w	800418a <HAL_DMA_IRQHandler+0x502>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042b0:	681a      	ldr	r2, [r3, #0]
      __HAL_UNLOCK(hdma);
 80042b2:	2100      	movs	r1, #0
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042b4:	f022 020e 	bic.w	r2, r2, #14
 80042b8:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80042ba:	2301      	movs	r3, #1
      if (hdma->XferErrorCallback != NULL)
 80042bc:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80042be:	fa03 f000 	lsl.w	r0, r3, r0
 80042c2:	6060      	str	r0, [r4, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80042c4:	6573      	str	r3, [r6, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 80042c6:	f886 1034 	strb.w	r1, [r6, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80042ca:	f886 3035 	strb.w	r3, [r6, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 80042ce:	2a00      	cmp	r2, #0
 80042d0:	f43f af5b 	beq.w	800418a <HAL_DMA_IRQHandler+0x502>
        hdma->XferErrorCallback(hdma);
 80042d4:	4630      	mov	r0, r6
}
 80042d6:	b002      	add	sp, #8
 80042d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        hdma->XferErrorCallback(hdma);
 80042dc:	4710      	bx	r2
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80042de:	0692      	lsls	r2, r2, #26
 80042e0:	d403      	bmi.n	80042ea <HAL_DMA_IRQHandler+0x662>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	f022 0204 	bic.w	r2, r2, #4
 80042e8:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 80042ea:	6c33      	ldr	r3, [r6, #64]	; 0x40
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	f47f aeb1 	bne.w	8004054 <HAL_DMA_IRQHandler+0x3cc>
 80042f2:	e74a      	b.n	800418a <HAL_DMA_IRQHandler+0x502>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80042f4:	f012 0220 	ands.w	r2, r2, #32
 80042f8:	d108      	bne.n	800430c <HAL_DMA_IRQHandler+0x684>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80042fa:	6819      	ldr	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80042fc:	2001      	movs	r0, #1
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80042fe:	f021 010a 	bic.w	r1, r1, #10
 8004302:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8004304:	f886 0035 	strb.w	r0, [r6, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8004308:	f886 2034 	strb.w	r2, [r6, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 800430c:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 800430e:	2b00      	cmp	r3, #0
 8004310:	f47f aea0 	bne.w	8004054 <HAL_DMA_IRQHandler+0x3cc>
 8004314:	e739      	b.n	800418a <HAL_DMA_IRQHandler+0x502>
 8004316:	bf00      	nop
 8004318:	58025408 	.word	0x58025408
 800431c:	5802541c 	.word	0x5802541c
 8004320:	58025494 	.word	0x58025494

08004324 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004328:	680c      	ldr	r4, [r1, #0]
{
 800432a:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800432c:	2c00      	cmp	r4, #0
 800432e:	f000 80a7 	beq.w	8004480 <HAL_GPIO_Init+0x15c>
 8004332:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004336:	4f8a      	ldr	r7, [pc, #552]	; (8004560 <HAL_GPIO_Init+0x23c>)
  uint32_t position = 0x00U;
 8004338:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800433a:	2201      	movs	r2, #1
 800433c:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 800433e:	ea12 0e04 	ands.w	lr, r2, r4
 8004342:	f000 8096 	beq.w	8004472 <HAL_GPIO_Init+0x14e>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004346:	684d      	ldr	r5, [r1, #4]
 8004348:	f005 0903 	and.w	r9, r5, #3
 800434c:	f109 36ff 	add.w	r6, r9, #4294967295
 8004350:	2e01      	cmp	r6, #1
 8004352:	f240 8098 	bls.w	8004486 <HAL_GPIO_Init+0x162>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004356:	f1b9 0f03 	cmp.w	r9, #3
 800435a:	f040 80d2 	bne.w	8004502 <HAL_GPIO_Init+0x1de>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800435e:	fa09 f20c 	lsl.w	r2, r9, ip
 8004362:	ea6f 0802 	mvn.w	r8, r2
      temp = GPIOx->MODER;
 8004366:	6806      	ldr	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004368:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800436c:	ea06 0608 	and.w	r6, r6, r8
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004370:	ea42 0206 	orr.w	r2, r2, r6
      GPIOx->MODER = temp;
 8004374:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004376:	d07c      	beq.n	8004472 <HAL_GPIO_Init+0x14e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004378:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800437c:	f023 0803 	bic.w	r8, r3, #3

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004380:	f003 0903 	and.w	r9, r3, #3
 8004384:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004386:	f042 0202 	orr.w	r2, r2, #2
 800438a:	f108 48b0 	add.w	r8, r8, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800438e:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004392:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8004396:	f508 6880 	add.w	r8, r8, #1024	; 0x400
 800439a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800439e:	fa06 f609 	lsl.w	r6, r6, r9
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043a2:	f002 0202 	and.w	r2, r2, #2
 80043a6:	9201      	str	r2, [sp, #4]
 80043a8:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80043aa:	f8d8 2008 	ldr.w	r2, [r8, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80043ae:	ea22 0206 	bic.w	r2, r2, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80043b2:	4e6c      	ldr	r6, [pc, #432]	; (8004564 <HAL_GPIO_Init+0x240>)
 80043b4:	42b0      	cmp	r0, r6
 80043b6:	d028      	beq.n	800440a <HAL_GPIO_Init+0xe6>
 80043b8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80043bc:	42b0      	cmp	r0, r6
 80043be:	f000 80ac 	beq.w	800451a <HAL_GPIO_Init+0x1f6>
 80043c2:	4e69      	ldr	r6, [pc, #420]	; (8004568 <HAL_GPIO_Init+0x244>)
 80043c4:	42b0      	cmp	r0, r6
 80043c6:	f000 80ad 	beq.w	8004524 <HAL_GPIO_Init+0x200>
 80043ca:	4e68      	ldr	r6, [pc, #416]	; (800456c <HAL_GPIO_Init+0x248>)
 80043cc:	42b0      	cmp	r0, r6
 80043ce:	f000 809f 	beq.w	8004510 <HAL_GPIO_Init+0x1ec>
 80043d2:	4e67      	ldr	r6, [pc, #412]	; (8004570 <HAL_GPIO_Init+0x24c>)
 80043d4:	42b0      	cmp	r0, r6
 80043d6:	f000 80af 	beq.w	8004538 <HAL_GPIO_Init+0x214>
 80043da:	4e66      	ldr	r6, [pc, #408]	; (8004574 <HAL_GPIO_Init+0x250>)
 80043dc:	42b0      	cmp	r0, r6
 80043de:	f000 80b0 	beq.w	8004542 <HAL_GPIO_Init+0x21e>
 80043e2:	4e65      	ldr	r6, [pc, #404]	; (8004578 <HAL_GPIO_Init+0x254>)
 80043e4:	42b0      	cmp	r0, r6
 80043e6:	f000 80a2 	beq.w	800452e <HAL_GPIO_Init+0x20a>
 80043ea:	4e64      	ldr	r6, [pc, #400]	; (800457c <HAL_GPIO_Init+0x258>)
 80043ec:	42b0      	cmp	r0, r6
 80043ee:	f000 80ad 	beq.w	800454c <HAL_GPIO_Init+0x228>
 80043f2:	4e63      	ldr	r6, [pc, #396]	; (8004580 <HAL_GPIO_Init+0x25c>)
 80043f4:	42b0      	cmp	r0, r6
 80043f6:	f000 80ae 	beq.w	8004556 <HAL_GPIO_Init+0x232>
 80043fa:	4e62      	ldr	r6, [pc, #392]	; (8004584 <HAL_GPIO_Init+0x260>)
 80043fc:	42b0      	cmp	r0, r6
 80043fe:	bf0c      	ite	eq
 8004400:	2609      	moveq	r6, #9
 8004402:	260a      	movne	r6, #10
 8004404:	fa06 f609 	lsl.w	r6, r6, r9
 8004408:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 800440a:	f8c8 2008 	str.w	r2, [r8, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800440e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004412:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8004416:	ea6f 060e 	mvn.w	r6, lr
        temp = EXTI->RTSR1;
 800441a:	6812      	ldr	r2, [r2, #0]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 800441c:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8004420:	bf0c      	ite	eq
 8004422:	4032      	andeq	r2, r6
          temp |= iocurrent;
 8004424:	ea4e 0202 	orrne.w	r2, lr, r2

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004428:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
        EXTI->RTSR1 = temp;
 800442c:	f8c8 2000 	str.w	r2, [r8]
        temp = EXTI->FTSR1;
 8004430:	f8d8 2004 	ldr.w	r2, [r8, #4]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8004434:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8004438:	bf0c      	ite	eq
 800443a:	4032      	andeq	r2, r6
          temp |= iocurrent;
 800443c:	ea4e 0202 	orrne.w	r2, lr, r2

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004440:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        EXTI->FTSR1 = temp;
 8004444:	f8c8 2004 	str.w	r2, [r8, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8004448:	f8d8 2084 	ldr.w	r2, [r8, #132]	; 0x84
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800444c:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8004450:	bf0c      	ite	eq
 8004452:	4032      	andeq	r2, r6
          temp |= iocurrent;
 8004454:	ea4e 0202 	orrne.w	r2, lr, r2

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004458:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800445a:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
        EXTI_CurrentCPU->EMR1 = temp;
 800445e:	f8c8 2084 	str.w	r2, [r8, #132]	; 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8004462:	f8d8 2080 	ldr.w	r2, [r8, #128]	; 0x80
        temp &= ~(iocurrent);
 8004466:	bf54      	ite	pl
 8004468:	4032      	andpl	r2, r6
          temp |= iocurrent;
 800446a:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI_CurrentCPU->IMR1 = temp;
 800446e:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
      }
    }

    position++;
 8004472:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004474:	f10c 0c02 	add.w	ip, ip, #2
 8004478:	fa34 f203 	lsrs.w	r2, r4, r3
 800447c:	f47f af5d 	bne.w	800433a <HAL_GPIO_Init+0x16>
  }
}
 8004480:	b003      	add	sp, #12
 8004482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004486:	f04f 0803 	mov.w	r8, #3
        temp = GPIOx->OSPEEDR;
 800448a:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800448c:	fa08 f80c 	lsl.w	r8, r8, ip
 8004490:	ea26 0a08 	bic.w	sl, r6, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004494:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004496:	ea6f 0808 	mvn.w	r8, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 800449a:	fa06 f60c 	lsl.w	r6, r6, ip
 800449e:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
 80044a2:	6086      	str	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044a4:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp = GPIOx->OTYPER;
 80044a8:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044ac:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80044ae:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044b2:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 80044b4:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 80044b6:	68c2      	ldr	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044b8:	f1b9 0f02 	cmp.w	r9, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044bc:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80044be:	ea02 0208 	and.w	r2, r2, r8
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044c2:	fa06 f60c 	lsl.w	r6, r6, ip
 80044c6:	ea46 0602 	orr.w	r6, r6, r2
      GPIOx->PUPDR = temp;
 80044ca:	fa09 f20c 	lsl.w	r2, r9, ip
 80044ce:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044d0:	f47f af49 	bne.w	8004366 <HAL_GPIO_Init+0x42>
        temp = GPIOx->AFR[position >> 3U];
 80044d4:	ea4f 09d3 	mov.w	r9, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80044d8:	f003 0b07 	and.w	fp, r3, #7
 80044dc:	260f      	movs	r6, #15
 80044de:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 80044e2:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 80044e6:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80044ea:	fa06 f60b 	lsl.w	r6, r6, fp
 80044ee:	ea2a 0a06 	bic.w	sl, sl, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80044f2:	690e      	ldr	r6, [r1, #16]
 80044f4:	fa06 f60b 	lsl.w	r6, r6, fp
 80044f8:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->AFR[position >> 3U] = temp;
 80044fc:	f8c9 6020 	str.w	r6, [r9, #32]
 8004500:	e731      	b.n	8004366 <HAL_GPIO_Init+0x42>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004502:	f04f 0803 	mov.w	r8, #3
 8004506:	fa08 f80c 	lsl.w	r8, r8, ip
 800450a:	ea6f 0808 	mvn.w	r8, r8
 800450e:	e7d2      	b.n	80044b6 <HAL_GPIO_Init+0x192>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004510:	2603      	movs	r6, #3
 8004512:	fa06 f609 	lsl.w	r6, r6, r9
 8004516:	4332      	orrs	r2, r6
 8004518:	e777      	b.n	800440a <HAL_GPIO_Init+0xe6>
 800451a:	2601      	movs	r6, #1
 800451c:	fa06 f609 	lsl.w	r6, r6, r9
 8004520:	4332      	orrs	r2, r6
 8004522:	e772      	b.n	800440a <HAL_GPIO_Init+0xe6>
 8004524:	2602      	movs	r6, #2
 8004526:	fa06 f609 	lsl.w	r6, r6, r9
 800452a:	4332      	orrs	r2, r6
 800452c:	e76d      	b.n	800440a <HAL_GPIO_Init+0xe6>
 800452e:	2606      	movs	r6, #6
 8004530:	fa06 f609 	lsl.w	r6, r6, r9
 8004534:	4332      	orrs	r2, r6
 8004536:	e768      	b.n	800440a <HAL_GPIO_Init+0xe6>
 8004538:	2604      	movs	r6, #4
 800453a:	fa06 f609 	lsl.w	r6, r6, r9
 800453e:	4332      	orrs	r2, r6
 8004540:	e763      	b.n	800440a <HAL_GPIO_Init+0xe6>
 8004542:	2605      	movs	r6, #5
 8004544:	fa06 f609 	lsl.w	r6, r6, r9
 8004548:	4332      	orrs	r2, r6
 800454a:	e75e      	b.n	800440a <HAL_GPIO_Init+0xe6>
 800454c:	2607      	movs	r6, #7
 800454e:	fa06 f609 	lsl.w	r6, r6, r9
 8004552:	4332      	orrs	r2, r6
 8004554:	e759      	b.n	800440a <HAL_GPIO_Init+0xe6>
 8004556:	2608      	movs	r6, #8
 8004558:	fa06 f609 	lsl.w	r6, r6, r9
 800455c:	4332      	orrs	r2, r6
 800455e:	e754      	b.n	800440a <HAL_GPIO_Init+0xe6>
 8004560:	58024400 	.word	0x58024400
 8004564:	58020000 	.word	0x58020000
 8004568:	58020800 	.word	0x58020800
 800456c:	58020c00 	.word	0x58020c00
 8004570:	58021000 	.word	0x58021000
 8004574:	58021400 	.word	0x58021400
 8004578:	58021800 	.word	0x58021800
 800457c:	58021c00 	.word	0x58021c00
 8004580:	58022000 	.word	0x58022000
 8004584:	58022400 	.word	0x58022400

08004588 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004588:	b902      	cbnz	r2, 800458c <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800458a:	0409      	lsls	r1, r1, #16
 800458c:	6181      	str	r1, [r0, #24]
  }
}
 800458e:	4770      	bx	lr

08004590 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004590:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004592:	ea01 0203 	and.w	r2, r1, r3
 8004596:	ea21 0103 	bic.w	r1, r1, r3
 800459a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800459e:	6181      	str	r1, [r0, #24]
}
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop

080045a4 <HAL_LPTIM_Init>:
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 80045a4:	2800      	cmp	r0, #0
 80045a6:	d05e      	beq.n	8004666 <HAL_LPTIM_Init+0xc2>
{
 80045a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80045aa:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 80045ae:	4604      	mov	r4, r0
 80045b0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d051      	beq.n	800465c <HAL_LPTIM_Init+0xb8>
    HAL_LPTIM_MspInit(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80045b8:	2302      	movs	r3, #2

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80045ba:	6aa7      	ldr	r7, [r4, #40]	; 0x28
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80045bc:	e9d4 1500 	ldrd	r1, r5, [r4]
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80045c0:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80045c4:	2d01      	cmp	r5, #1
  tmpcfgr = hlptim->Instance->CFGR;
 80045c6:	68c8      	ldr	r0, [r1, #12]
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80045c8:	d03c      	beq.n	8004644 <HAL_LPTIM_Init+0xa0>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80045ca:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
 80045ce:	d039      	beq.n	8004644 <HAL_LPTIM_Init+0xa0>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80045d0:	6962      	ldr	r2, [r4, #20]
 80045d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d003      	beq.n	80045e2 <HAL_LPTIM_Init+0x3e>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 80045da:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 80045de:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80045e2:	68a3      	ldr	r3, [r4, #8]
              hlptim->Init.Clock.Prescaler |
 80045e4:	6a26      	ldr	r6, [r4, #32]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80045e6:	432b      	orrs	r3, r5
              hlptim->Init.Clock.Prescaler |
 80045e8:	4333      	orrs	r3, r6
              hlptim->Init.OutputPolarity  |
 80045ea:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80045ec:	4333      	orrs	r3, r6
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80045ee:	4e22      	ldr	r6, [pc, #136]	; (8004678 <HAL_LPTIM_Init+0xd4>)
              hlptim->Init.UpdateMode      |
 80045f0:	433b      	orrs	r3, r7
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80045f2:	4006      	ands	r6, r0
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80045f4:	4333      	orrs	r3, r6
              hlptim->Init.CounterSource);

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 80045f6:	b1ed      	cbz	r5, 8004634 <HAL_LPTIM_Init+0x90>
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
                hlptim->Init.UltraLowPowerClock.SampleTime);
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80045f8:	2d01      	cmp	r5, #1
 80045fa:	d11f      	bne.n	800463c <HAL_LPTIM_Init+0x98>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80045fc:	e9d4 0503 	ldrd	r0, r5, [r4, #12]
 8004600:	4328      	orrs	r0, r5
 8004602:	4303      	orrs	r3, r0
                hlptim->Init.UltraLowPowerClock.SampleTime);
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8004604:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004608:	4282      	cmp	r2, r0
 800460a:	d004      	beq.n	8004616 <HAL_LPTIM_Init+0x72>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800460c:	69a0      	ldr	r0, [r4, #24]
 800460e:	4302      	orrs	r2, r0
                hlptim->Init.Trigger.ActiveEdge |
 8004610:	69e0      	ldr	r0, [r4, #28]
 8004612:	4302      	orrs	r2, r0
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004614:	4313      	orrs	r3, r2

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 8004616:	4a19      	ldr	r2, [pc, #100]	; (800467c <HAL_LPTIM_Init+0xd8>)
  hlptim->Instance->CFGR = tmpcfgr;
 8004618:	60cb      	str	r3, [r1, #12]
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 800461a:	4291      	cmp	r1, r2
 800461c:	d015      	beq.n	800464a <HAL_LPTIM_Init+0xa6>
 800461e:	4b18      	ldr	r3, [pc, #96]	; (8004680 <HAL_LPTIM_Init+0xdc>)
 8004620:	4299      	cmp	r1, r3
 8004622:	d012      	beq.n	800464a <HAL_LPTIM_Init+0xa6>
    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 8004624:	4b17      	ldr	r3, [pc, #92]	; (8004684 <HAL_LPTIM_Init+0xe0>)
 8004626:	4299      	cmp	r1, r3
 8004628:	d01f      	beq.n	800466a <HAL_LPTIM_Init+0xc6>
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800462a:	2301      	movs	r3, #1

  /* Return function status */
  return HAL_OK;
 800462c:	2000      	movs	r0, #0
  hlptim->State = HAL_LPTIM_STATE_READY;
 800462e:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
}
 8004632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8004634:	69e0      	ldr	r0, [r4, #28]
 8004636:	6925      	ldr	r5, [r4, #16]
 8004638:	4328      	orrs	r0, r5
 800463a:	4303      	orrs	r3, r0
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800463c:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
 8004640:	d1e0      	bne.n	8004604 <HAL_LPTIM_Init+0x60>
 8004642:	e7db      	b.n	80045fc <HAL_LPTIM_Init+0x58>
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8004644:	f020 001e 	bic.w	r0, r0, #30
 8004648:	e7c2      	b.n	80045d0 <HAL_LPTIM_Init+0x2c>
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 800464a:	e9d4 320b 	ldrd	r3, r2, [r4, #44]	; 0x2c
  return HAL_OK;
 800464e:	2000      	movs	r0, #0
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8004650:	4313      	orrs	r3, r2
 8004652:	624b      	str	r3, [r1, #36]	; 0x24
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004654:	2301      	movs	r3, #1
 8004656:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
}
 800465a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hlptim->Lock = HAL_UNLOCKED;
 800465c:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
    HAL_LPTIM_MspInit(hlptim);
 8004660:	f7fd f806 	bl	8001670 <HAL_LPTIM_MspInit>
 8004664:	e7a8      	b.n	80045b8 <HAL_LPTIM_Init+0x14>
    return HAL_ERROR;
 8004666:	2001      	movs	r0, #1
}
 8004668:	4770      	bx	lr
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 800466a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 800466c:	2000      	movs	r0, #0
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 800466e:	624b      	str	r3, [r1, #36]	; 0x24
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004670:	2301      	movs	r3, #1
 8004672:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
}
 8004676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004678:	ff19f1fe 	.word	0xff19f1fe
 800467c:	40002400 	.word	0x40002400
 8004680:	58002400 	.word	0x58002400
 8004684:	58002800 	.word	0x58002800

08004688 <HAL_LPTIM_Counter_Start>:

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 8004688:	6843      	ldr	r3, [r0, #4]
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800468a:	2202      	movs	r2, #2
{
 800468c:	4684      	mov	ip, r0
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 800468e:	2b01      	cmp	r3, #1
{
 8004690:	b410      	push	{r4}
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004692:	f880 2036 	strb.w	r2, [r0, #54]	; 0x36
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 8004696:	d003      	beq.n	80046a0 <HAL_LPTIM_Counter_Start+0x18>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004698:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800469a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800469e:	d027      	beq.n	80046f0 <HAL_LPTIM_Counter_Start+0x68>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 80046a0:	f8dc 2000 	ldr.w	r2, [ip]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80046a4:	6910      	ldr	r0, [r2, #16]
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
  HAL_StatusTypeDef result = HAL_OK;
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 80046a6:	4b15      	ldr	r3, [pc, #84]	; (80046fc <HAL_LPTIM_Counter_Start+0x74>)
  __HAL_LPTIM_ENABLE(hlptim);
 80046a8:	f040 0001 	orr.w	r0, r0, #1
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 80046ac:	4c14      	ldr	r4, [pc, #80]	; (8004700 <HAL_LPTIM_Counter_Start+0x78>)
 80046ae:	681b      	ldr	r3, [r3, #0]
  __HAL_LPTIM_ENABLE(hlptim);
 80046b0:	6110      	str	r0, [r2, #16]
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80046b2:	2010      	movs	r0, #16
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 80046b4:	fba4 4303 	umull	r4, r3, r4, r3
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80046b8:	6050      	str	r0, [r2, #4]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 80046ba:	0b9b      	lsrs	r3, r3, #14
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 80046bc:	6191      	str	r1, [r2, #24]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 80046be:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80046c2:	fb01 f303 	mul.w	r3, r1, r3
  do
  {
    count--;
    if (count == 0UL)
 80046c6:	3b01      	subs	r3, #1
 80046c8:	d00d      	beq.n	80046e6 <HAL_LPTIM_Counter_Start+0x5e>
    {
      result = HAL_TIMEOUT;
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 80046ca:	6811      	ldr	r1, [r2, #0]
 80046cc:	06c9      	lsls	r1, r1, #27
 80046ce:	d5fa      	bpl.n	80046c6 <HAL_LPTIM_Counter_Start+0x3e>
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 80046d0:	6913      	ldr	r3, [r2, #16]
  hlptim->State = HAL_LPTIM_STATE_READY;
 80046d2:	2101      	movs	r1, #1
  return HAL_OK;
 80046d4:	2000      	movs	r0, #0
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 80046d6:	f043 0304 	orr.w	r3, r3, #4
 80046da:	6113      	str	r3, [r2, #16]
  hlptim->State = HAL_LPTIM_STATE_READY;
 80046dc:	f88c 1036 	strb.w	r1, [ip, #54]	; 0x36
}
 80046e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80046e4:	4770      	bx	lr
    return HAL_TIMEOUT;
 80046e6:	2003      	movs	r0, #3
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 80046e8:	6813      	ldr	r3, [r2, #0]
}
 80046ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80046ee:	4770      	bx	lr
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 80046f0:	6802      	ldr	r2, [r0, #0]
 80046f2:	68d3      	ldr	r3, [r2, #12]
 80046f4:	f423 6360 	bic.w	r3, r3, #3584	; 0xe00
 80046f8:	60d3      	str	r3, [r2, #12]
 80046fa:	e7d3      	b.n	80046a4 <HAL_LPTIM_Counter_Start+0x1c>
 80046fc:	20000164 	.word	0x20000164
 8004700:	d1b71759 	.word	0xd1b71759

08004704 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004704:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004706:	4c10      	ldr	r4, [pc, #64]	; (8004748 <HAL_PWREx_ConfigSupply+0x44>)
 8004708:	68e3      	ldr	r3, [r4, #12]
 800470a:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800470e:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004710:	d105      	bne.n	800471e <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004712:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004716:	1a18      	subs	r0, r3, r0
 8004718:	bf18      	it	ne
 800471a:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800471c:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800471e:	f023 0307 	bic.w	r3, r3, #7
 8004722:	4303      	orrs	r3, r0
 8004724:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
 8004726:	f7fd f9a9 	bl	8001a7c <HAL_GetTick>
 800472a:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800472c:	e005      	b.n	800473a <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800472e:	f7fd f9a5 	bl	8001a7c <HAL_GetTick>
 8004732:	1b40      	subs	r0, r0, r5
 8004734:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004738:	d804      	bhi.n	8004744 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800473a:	6863      	ldr	r3, [r4, #4]
 800473c:	049b      	lsls	r3, r3, #18
 800473e:	d5f6      	bpl.n	800472e <HAL_PWREx_ConfigSupply+0x2a>
  return HAL_OK;
 8004740:	2000      	movs	r0, #0
}
 8004742:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8004744:	2001      	movs	r0, #1
}
 8004746:	bd38      	pop	{r3, r4, r5, pc}
 8004748:	58024800 	.word	0x58024800

0800474c <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800474c:	4b3c      	ldr	r3, [pc, #240]	; (8004840 <HAL_RCC_GetSysClockFreq.part.0+0xf4>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 800474e:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004750:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004752:	6a9c      	ldr	r4, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004754:	6add      	ldr	r5, [r3, #44]	; 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
 8004756:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800475a:	6b59      	ldr	r1, [r3, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800475c:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 8004760:	d038      	beq.n	80047d4 <HAL_RCC_GetSysClockFreq.part.0+0x88>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004762:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004766:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800476a:	f002 0203 	and.w	r2, r2, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800476e:	fb05 f101 	mul.w	r1, r5, r1
 8004772:	2a01      	cmp	r2, #1
 8004774:	ee07 1a90 	vmov	s15, r1
 8004778:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      {
        switch (pllsource)
 800477c:	d002      	beq.n	8004784 <HAL_RCC_GetSysClockFreq.part.0+0x38>
 800477e:	2a02      	cmp	r2, #2
 8004780:	d050      	beq.n	8004824 <HAL_RCC_GetSysClockFreq.part.0+0xd8>
 8004782:	b34a      	cbz	r2, 80047d8 <HAL_RCC_GetSysClockFreq.part.0+0x8c>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004784:	ee07 0a90 	vmov	s15, r0
 8004788:	ed9f 5a2e 	vldr	s10, [pc, #184]	; 8004844 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 800478c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004792:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8004796:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8004848 <HAL_RCC_GetSysClockFreq.part.0+0xfc>
 800479a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800479e:	ee07 3a90 	vmov	s15, r3
 80047a2:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80047a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047aa:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80047ae:	eee7 7a06 	vfma.f32	s15, s14, s12
 80047b2:	ee66 6aa7 	vmul.f32	s13, s13, s15
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80047b6:	4b22      	ldr	r3, [pc, #136]	; (8004840 <HAL_RCC_GetSysClockFreq.part.0+0xf4>)
 80047b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ba:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80047be:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80047c0:	ee07 3a90 	vmov	s15, r3
 80047c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80047c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047d0:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 80047d4:	bc30      	pop	{r4, r5}
 80047d6:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	0692      	lsls	r2, r2, #26
 80047dc:	d529      	bpl.n	8004832 <HAL_RCC_GetSysClockFreq.part.0+0xe6>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80047de:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80047e0:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80047e4:	4a19      	ldr	r2, [pc, #100]	; (800484c <HAL_RCC_GetSysClockFreq.part.0+0x100>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80047e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80047ec:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80047f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047f4:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8004848 <HAL_RCC_GetSysClockFreq.part.0+0xfc>
 80047f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80047fc:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80047fe:	ee06 3a10 	vmov	s12, r3
 8004802:	ee05 2a90 	vmov	s11, r2
 8004806:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800480a:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800480e:	ee36 6a26 	vadd.f32	s12, s12, s13
 8004812:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8004816:	eef0 7a46 	vmov.f32	s15, s12
 800481a:	eee7 7a05 	vfma.f32	s15, s14, s10
 800481e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004822:	e7c8      	b.n	80047b6 <HAL_RCC_GetSysClockFreq.part.0+0x6a>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004824:	ee07 0a90 	vmov	s15, r0
 8004828:	ed9f 5a09 	vldr	s10, [pc, #36]	; 8004850 <HAL_RCC_GetSysClockFreq.part.0+0x104>
 800482c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004830:	e7ae      	b.n	8004790 <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004832:	ee07 0a90 	vmov	s15, r0
 8004836:	ed9f 5a07 	vldr	s10, [pc, #28]	; 8004854 <HAL_RCC_GetSysClockFreq.part.0+0x108>
 800483a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800483e:	e7a7      	b.n	8004790 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 8004840:	58024400 	.word	0x58024400
 8004844:	4a742400 	.word	0x4a742400
 8004848:	39000000 	.word	0x39000000
 800484c:	03d09000 	.word	0x03d09000
 8004850:	4af42400 	.word	0x4af42400
 8004854:	4c742400 	.word	0x4c742400

08004858 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8004858:	2800      	cmp	r0, #0
 800485a:	f000 81e8 	beq.w	8004c2e <HAL_RCC_OscConfig+0x3d6>
{
 800485e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004860:	6803      	ldr	r3, [r0, #0]
 8004862:	4604      	mov	r4, r0
 8004864:	07d9      	lsls	r1, r3, #31
 8004866:	d52e      	bpl.n	80048c6 <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004868:	49a4      	ldr	r1, [pc, #656]	; (8004afc <HAL_RCC_OscConfig+0x2a4>)
 800486a:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800486c:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800486e:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004872:	2a10      	cmp	r2, #16
 8004874:	f000 8107 	beq.w	8004a86 <HAL_RCC_OscConfig+0x22e>
 8004878:	2a18      	cmp	r2, #24
 800487a:	f000 80ff 	beq.w	8004a7c <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800487e:	6863      	ldr	r3, [r4, #4]
 8004880:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004884:	f000 812a 	beq.w	8004adc <HAL_RCC_OscConfig+0x284>
 8004888:	2b00      	cmp	r3, #0
 800488a:	f000 8168 	beq.w	8004b5e <HAL_RCC_OscConfig+0x306>
 800488e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004892:	4b9a      	ldr	r3, [pc, #616]	; (8004afc <HAL_RCC_OscConfig+0x2a4>)
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	f000 8289 	beq.w	8004dac <HAL_RCC_OscConfig+0x554>
 800489a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800489e:	601a      	str	r2, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80048a6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80048a8:	f7fd f8e8 	bl	8001a7c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80048ac:	4e93      	ldr	r6, [pc, #588]	; (8004afc <HAL_RCC_OscConfig+0x2a4>)
        tickstart = HAL_GetTick();
 80048ae:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80048b0:	e005      	b.n	80048be <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048b2:	f7fd f8e3 	bl	8001a7c <HAL_GetTick>
 80048b6:	1b40      	subs	r0, r0, r5
 80048b8:	2864      	cmp	r0, #100	; 0x64
 80048ba:	f200 814e 	bhi.w	8004b5a <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80048be:	6833      	ldr	r3, [r6, #0]
 80048c0:	039b      	lsls	r3, r3, #14
 80048c2:	d5f6      	bpl.n	80048b2 <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048c4:	6823      	ldr	r3, [r4, #0]
 80048c6:	079d      	lsls	r5, r3, #30
 80048c8:	f100 808a 	bmi.w	80049e0 <HAL_RCC_OscConfig+0x188>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80048cc:	06d9      	lsls	r1, r3, #27
 80048ce:	d533      	bpl.n	8004938 <HAL_RCC_OscConfig+0xe0>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048d0:	4a8a      	ldr	r2, [pc, #552]	; (8004afc <HAL_RCC_OscConfig+0x2a4>)
 80048d2:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80048d4:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80048da:	2b08      	cmp	r3, #8
 80048dc:	f000 80e3 	beq.w	8004aa6 <HAL_RCC_OscConfig+0x24e>
 80048e0:	2b18      	cmp	r3, #24
 80048e2:	f000 80db 	beq.w	8004a9c <HAL_RCC_OscConfig+0x244>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80048e6:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 80048e8:	4d84      	ldr	r5, [pc, #528]	; (8004afc <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	f000 816f 	beq.w	8004bce <HAL_RCC_OscConfig+0x376>
        __HAL_RCC_CSI_ENABLE();
 80048f0:	682b      	ldr	r3, [r5, #0]
 80048f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048f6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80048f8:	f7fd f8c0 	bl	8001a7c <HAL_GetTick>
 80048fc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80048fe:	e005      	b.n	800490c <HAL_RCC_OscConfig+0xb4>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004900:	f7fd f8bc 	bl	8001a7c <HAL_GetTick>
 8004904:	1b80      	subs	r0, r0, r6
 8004906:	2802      	cmp	r0, #2
 8004908:	f200 8127 	bhi.w	8004b5a <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800490c:	682b      	ldr	r3, [r5, #0]
 800490e:	05db      	lsls	r3, r3, #23
 8004910:	d5f6      	bpl.n	8004900 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004912:	f7fd f8cb 	bl	8001aac <HAL_GetREVID>
 8004916:	f241 0303 	movw	r3, #4099	; 0x1003
 800491a:	4298      	cmp	r0, r3
 800491c:	f200 826d 	bhi.w	8004dfa <HAL_RCC_OscConfig+0x5a2>
 8004920:	6a22      	ldr	r2, [r4, #32]
 8004922:	686b      	ldr	r3, [r5, #4]
 8004924:	2a20      	cmp	r2, #32
 8004926:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800492a:	bf0c      	ite	eq
 800492c:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8004930:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8004934:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004936:	6823      	ldr	r3, [r4, #0]
 8004938:	071d      	lsls	r5, r3, #28
 800493a:	d516      	bpl.n	800496a <HAL_RCC_OscConfig+0x112>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800493c:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 800493e:	4d6f      	ldr	r5, [pc, #444]	; (8004afc <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004940:	2b00      	cmp	r3, #0
 8004942:	f000 8122 	beq.w	8004b8a <HAL_RCC_OscConfig+0x332>
      __HAL_RCC_LSI_ENABLE();
 8004946:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004948:	f043 0301 	orr.w	r3, r3, #1
 800494c:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800494e:	f7fd f895 	bl	8001a7c <HAL_GetTick>
 8004952:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004954:	e005      	b.n	8004962 <HAL_RCC_OscConfig+0x10a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004956:	f7fd f891 	bl	8001a7c <HAL_GetTick>
 800495a:	1b80      	subs	r0, r0, r6
 800495c:	2802      	cmp	r0, #2
 800495e:	f200 80fc 	bhi.w	8004b5a <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004962:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004964:	0798      	lsls	r0, r3, #30
 8004966:	d5f6      	bpl.n	8004956 <HAL_RCC_OscConfig+0xfe>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004968:	6823      	ldr	r3, [r4, #0]
 800496a:	069a      	lsls	r2, r3, #26
 800496c:	d516      	bpl.n	800499c <HAL_RCC_OscConfig+0x144>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800496e:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 8004970:	4d62      	ldr	r5, [pc, #392]	; (8004afc <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004972:	2b00      	cmp	r3, #0
 8004974:	f000 811a 	beq.w	8004bac <HAL_RCC_OscConfig+0x354>
      __HAL_RCC_HSI48_ENABLE();
 8004978:	682b      	ldr	r3, [r5, #0]
 800497a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800497e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8004980:	f7fd f87c 	bl	8001a7c <HAL_GetTick>
 8004984:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004986:	e005      	b.n	8004994 <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004988:	f7fd f878 	bl	8001a7c <HAL_GetTick>
 800498c:	1b80      	subs	r0, r0, r6
 800498e:	2802      	cmp	r0, #2
 8004990:	f200 80e3 	bhi.w	8004b5a <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004994:	682b      	ldr	r3, [r5, #0]
 8004996:	049f      	lsls	r7, r3, #18
 8004998:	d5f6      	bpl.n	8004988 <HAL_RCC_OscConfig+0x130>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800499a:	6823      	ldr	r3, [r4, #0]
 800499c:	0759      	lsls	r1, r3, #29
 800499e:	f100 80a3 	bmi.w	8004ae8 <HAL_RCC_OscConfig+0x290>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80049a4:	b1d0      	cbz	r0, 80049dc <HAL_RCC_OscConfig+0x184>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80049a6:	4d55      	ldr	r5, [pc, #340]	; (8004afc <HAL_RCC_OscConfig+0x2a4>)
 80049a8:	692b      	ldr	r3, [r5, #16]
 80049aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049ae:	2b18      	cmp	r3, #24
 80049b0:	f000 81ae 	beq.w	8004d10 <HAL_RCC_OscConfig+0x4b8>
        __HAL_RCC_PLL_DISABLE();
 80049b4:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049b6:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80049b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049bc:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049be:	f000 8142 	beq.w	8004c46 <HAL_RCC_OscConfig+0x3ee>
        tickstart = HAL_GetTick();
 80049c2:	f7fd f85b 	bl	8001a7c <HAL_GetTick>
 80049c6:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80049c8:	e005      	b.n	80049d6 <HAL_RCC_OscConfig+0x17e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049ca:	f7fd f857 	bl	8001a7c <HAL_GetTick>
 80049ce:	1b00      	subs	r0, r0, r4
 80049d0:	2802      	cmp	r0, #2
 80049d2:	f200 80c2 	bhi.w	8004b5a <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80049d6:	682b      	ldr	r3, [r5, #0]
 80049d8:	019b      	lsls	r3, r3, #6
 80049da:	d4f6      	bmi.n	80049ca <HAL_RCC_OscConfig+0x172>
  return HAL_OK;
 80049dc:	2000      	movs	r0, #0
}
 80049de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049e0:	4a46      	ldr	r2, [pc, #280]	; (8004afc <HAL_RCC_OscConfig+0x2a4>)
 80049e2:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80049e4:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80049e6:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 80049ea:	d12d      	bne.n	8004a48 <HAL_RCC_OscConfig+0x1f0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049ec:	4b43      	ldr	r3, [pc, #268]	; (8004afc <HAL_RCC_OscConfig+0x2a4>)
 80049ee:	68e2      	ldr	r2, [r4, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	0759      	lsls	r1, r3, #29
 80049f4:	d501      	bpl.n	80049fa <HAL_RCC_OscConfig+0x1a2>
 80049f6:	2a00      	cmp	r2, #0
 80049f8:	d04e      	beq.n	8004a98 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80049fa:	4d40      	ldr	r5, [pc, #256]	; (8004afc <HAL_RCC_OscConfig+0x2a4>)
 80049fc:	682b      	ldr	r3, [r5, #0]
 80049fe:	f023 0319 	bic.w	r3, r3, #25
 8004a02:	4313      	orrs	r3, r2
 8004a04:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004a06:	f7fd f839 	bl	8001a7c <HAL_GetTick>
 8004a0a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a0c:	e005      	b.n	8004a1a <HAL_RCC_OscConfig+0x1c2>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a0e:	f7fd f835 	bl	8001a7c <HAL_GetTick>
 8004a12:	1b80      	subs	r0, r0, r6
 8004a14:	2802      	cmp	r0, #2
 8004a16:	f200 80a0 	bhi.w	8004b5a <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a1a:	682b      	ldr	r3, [r5, #0]
 8004a1c:	075b      	lsls	r3, r3, #29
 8004a1e:	d5f6      	bpl.n	8004a0e <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a20:	f7fd f844 	bl	8001aac <HAL_GetREVID>
 8004a24:	f241 0303 	movw	r3, #4099	; 0x1003
 8004a28:	4298      	cmp	r0, r3
 8004a2a:	f200 80f7 	bhi.w	8004c1c <HAL_RCC_OscConfig+0x3c4>
 8004a2e:	6922      	ldr	r2, [r4, #16]
 8004a30:	686b      	ldr	r3, [r5, #4]
 8004a32:	2a40      	cmp	r2, #64	; 0x40
 8004a34:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004a38:	bf0c      	ite	eq
 8004a3a:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 8004a3e:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8004a42:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004a44:	6823      	ldr	r3, [r4, #0]
 8004a46:	e741      	b.n	80048cc <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004a48:	2b18      	cmp	r3, #24
 8004a4a:	f000 80e3 	beq.w	8004c14 <HAL_RCC_OscConfig+0x3bc>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004a4e:	4d2b      	ldr	r5, [pc, #172]	; (8004afc <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004a50:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004a52:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004a54:	2a00      	cmp	r2, #0
 8004a56:	f000 80cc 	beq.w	8004bf2 <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004a5a:	f023 0319 	bic.w	r3, r3, #25
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004a62:	f7fd f80b 	bl	8001a7c <HAL_GetTick>
 8004a66:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a68:	e004      	b.n	8004a74 <HAL_RCC_OscConfig+0x21c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a6a:	f7fd f807 	bl	8001a7c <HAL_GetTick>
 8004a6e:	1b80      	subs	r0, r0, r6
 8004a70:	2802      	cmp	r0, #2
 8004a72:	d872      	bhi.n	8004b5a <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a74:	682b      	ldr	r3, [r5, #0]
 8004a76:	075f      	lsls	r7, r3, #29
 8004a78:	d5f7      	bpl.n	8004a6a <HAL_RCC_OscConfig+0x212>
 8004a7a:	e7d1      	b.n	8004a20 <HAL_RCC_OscConfig+0x1c8>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004a7c:	f001 0103 	and.w	r1, r1, #3
 8004a80:	2902      	cmp	r1, #2
 8004a82:	f47f aefc 	bne.w	800487e <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a86:	4a1d      	ldr	r2, [pc, #116]	; (8004afc <HAL_RCC_OscConfig+0x2a4>)
 8004a88:	6812      	ldr	r2, [r2, #0]
 8004a8a:	0392      	lsls	r2, r2, #14
 8004a8c:	f57f af1b 	bpl.w	80048c6 <HAL_RCC_OscConfig+0x6e>
 8004a90:	6862      	ldr	r2, [r4, #4]
 8004a92:	2a00      	cmp	r2, #0
 8004a94:	f47f af17 	bne.w	80048c6 <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
 8004a98:	2001      	movs	r0, #1
}
 8004a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004a9c:	f002 0203 	and.w	r2, r2, #3
 8004aa0:	2a01      	cmp	r2, #1
 8004aa2:	f47f af20 	bne.w	80048e6 <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004aa6:	4b15      	ldr	r3, [pc, #84]	; (8004afc <HAL_RCC_OscConfig+0x2a4>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	05da      	lsls	r2, r3, #23
 8004aac:	d502      	bpl.n	8004ab4 <HAL_RCC_OscConfig+0x25c>
 8004aae:	69e3      	ldr	r3, [r4, #28]
 8004ab0:	2b80      	cmp	r3, #128	; 0x80
 8004ab2:	d1f1      	bne.n	8004a98 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004ab4:	f7fc fffa 	bl	8001aac <HAL_GetREVID>
 8004ab8:	f241 0303 	movw	r3, #4099	; 0x1003
 8004abc:	4298      	cmp	r0, r3
 8004abe:	f200 80b8 	bhi.w	8004c32 <HAL_RCC_OscConfig+0x3da>
 8004ac2:	6a22      	ldr	r2, [r4, #32]
 8004ac4:	2a20      	cmp	r2, #32
 8004ac6:	f000 81a7 	beq.w	8004e18 <HAL_RCC_OscConfig+0x5c0>
 8004aca:	490c      	ldr	r1, [pc, #48]	; (8004afc <HAL_RCC_OscConfig+0x2a4>)
 8004acc:	684b      	ldr	r3, [r1, #4]
 8004ace:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004ad2:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8004ad6:	604b      	str	r3, [r1, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ad8:	6823      	ldr	r3, [r4, #0]
 8004ada:	e72d      	b.n	8004938 <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004adc:	4a07      	ldr	r2, [pc, #28]	; (8004afc <HAL_RCC_OscConfig+0x2a4>)
 8004ade:	6813      	ldr	r3, [r2, #0]
 8004ae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ae4:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ae6:	e6df      	b.n	80048a8 <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
 8004ae8:	4d05      	ldr	r5, [pc, #20]	; (8004b00 <HAL_RCC_OscConfig+0x2a8>)
 8004aea:	682b      	ldr	r3, [r5, #0]
 8004aec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004af0:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8004af2:	f7fc ffc3 	bl	8001a7c <HAL_GetTick>
 8004af6:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004af8:	e009      	b.n	8004b0e <HAL_RCC_OscConfig+0x2b6>
 8004afa:	bf00      	nop
 8004afc:	58024400 	.word	0x58024400
 8004b00:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b04:	f7fc ffba 	bl	8001a7c <HAL_GetTick>
 8004b08:	1b80      	subs	r0, r0, r6
 8004b0a:	2864      	cmp	r0, #100	; 0x64
 8004b0c:	d825      	bhi.n	8004b5a <HAL_RCC_OscConfig+0x302>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b0e:	682b      	ldr	r3, [r5, #0]
 8004b10:	05da      	lsls	r2, r3, #23
 8004b12:	d5f7      	bpl.n	8004b04 <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b14:	68a3      	ldr	r3, [r4, #8]
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	f000 8178 	beq.w	8004e0c <HAL_RCC_OscConfig+0x5b4>
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	f000 8153 	beq.w	8004dc8 <HAL_RCC_OscConfig+0x570>
 8004b22:	2b05      	cmp	r3, #5
 8004b24:	4ba5      	ldr	r3, [pc, #660]	; (8004dbc <HAL_RCC_OscConfig+0x564>)
 8004b26:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b28:	f000 817f 	beq.w	8004e2a <HAL_RCC_OscConfig+0x5d2>
 8004b2c:	f022 0201 	bic.w	r2, r2, #1
 8004b30:	671a      	str	r2, [r3, #112]	; 0x70
 8004b32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b34:	f022 0204 	bic.w	r2, r2, #4
 8004b38:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8004b3a:	f7fc ff9f 	bl	8001a7c <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b3e:	4e9f      	ldr	r6, [pc, #636]	; (8004dbc <HAL_RCC_OscConfig+0x564>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b40:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004b44:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b46:	e004      	b.n	8004b52 <HAL_RCC_OscConfig+0x2fa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b48:	f7fc ff98 	bl	8001a7c <HAL_GetTick>
 8004b4c:	1b40      	subs	r0, r0, r5
 8004b4e:	42b8      	cmp	r0, r7
 8004b50:	d803      	bhi.n	8004b5a <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b52:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8004b54:	079b      	lsls	r3, r3, #30
 8004b56:	d5f7      	bpl.n	8004b48 <HAL_RCC_OscConfig+0x2f0>
 8004b58:	e723      	b.n	80049a2 <HAL_RCC_OscConfig+0x14a>
            return HAL_TIMEOUT;
 8004b5a:	2003      	movs	r0, #3
}
 8004b5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b5e:	4d97      	ldr	r5, [pc, #604]	; (8004dbc <HAL_RCC_OscConfig+0x564>)
 8004b60:	682b      	ldr	r3, [r5, #0]
 8004b62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b66:	602b      	str	r3, [r5, #0]
 8004b68:	682b      	ldr	r3, [r5, #0]
 8004b6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b6e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004b70:	f7fc ff84 	bl	8001a7c <HAL_GetTick>
 8004b74:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004b76:	e004      	b.n	8004b82 <HAL_RCC_OscConfig+0x32a>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b78:	f7fc ff80 	bl	8001a7c <HAL_GetTick>
 8004b7c:	1b80      	subs	r0, r0, r6
 8004b7e:	2864      	cmp	r0, #100	; 0x64
 8004b80:	d8eb      	bhi.n	8004b5a <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004b82:	682b      	ldr	r3, [r5, #0]
 8004b84:	039f      	lsls	r7, r3, #14
 8004b86:	d4f7      	bmi.n	8004b78 <HAL_RCC_OscConfig+0x320>
 8004b88:	e69c      	b.n	80048c4 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 8004b8a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004b8c:	f023 0301 	bic.w	r3, r3, #1
 8004b90:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8004b92:	f7fc ff73 	bl	8001a7c <HAL_GetTick>
 8004b96:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004b98:	e004      	b.n	8004ba4 <HAL_RCC_OscConfig+0x34c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b9a:	f7fc ff6f 	bl	8001a7c <HAL_GetTick>
 8004b9e:	1b80      	subs	r0, r0, r6
 8004ba0:	2802      	cmp	r0, #2
 8004ba2:	d8da      	bhi.n	8004b5a <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004ba4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004ba6:	0799      	lsls	r1, r3, #30
 8004ba8:	d4f7      	bmi.n	8004b9a <HAL_RCC_OscConfig+0x342>
 8004baa:	e6dd      	b.n	8004968 <HAL_RCC_OscConfig+0x110>
      __HAL_RCC_HSI48_DISABLE();
 8004bac:	682b      	ldr	r3, [r5, #0]
 8004bae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004bb2:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8004bb4:	f7fc ff62 	bl	8001a7c <HAL_GetTick>
 8004bb8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004bba:	e004      	b.n	8004bc6 <HAL_RCC_OscConfig+0x36e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004bbc:	f7fc ff5e 	bl	8001a7c <HAL_GetTick>
 8004bc0:	1b80      	subs	r0, r0, r6
 8004bc2:	2802      	cmp	r0, #2
 8004bc4:	d8c9      	bhi.n	8004b5a <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004bc6:	682b      	ldr	r3, [r5, #0]
 8004bc8:	0498      	lsls	r0, r3, #18
 8004bca:	d4f7      	bmi.n	8004bbc <HAL_RCC_OscConfig+0x364>
 8004bcc:	e6e5      	b.n	800499a <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_CSI_DISABLE();
 8004bce:	682b      	ldr	r3, [r5, #0]
 8004bd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bd4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004bd6:	f7fc ff51 	bl	8001a7c <HAL_GetTick>
 8004bda:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004bdc:	e004      	b.n	8004be8 <HAL_RCC_OscConfig+0x390>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004bde:	f7fc ff4d 	bl	8001a7c <HAL_GetTick>
 8004be2:	1b80      	subs	r0, r0, r6
 8004be4:	2802      	cmp	r0, #2
 8004be6:	d8b8      	bhi.n	8004b5a <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004be8:	682b      	ldr	r3, [r5, #0]
 8004bea:	05df      	lsls	r7, r3, #23
 8004bec:	d4f7      	bmi.n	8004bde <HAL_RCC_OscConfig+0x386>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bee:	6823      	ldr	r3, [r4, #0]
 8004bf0:	e6a2      	b.n	8004938 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
 8004bf2:	f023 0301 	bic.w	r3, r3, #1
 8004bf6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004bf8:	f7fc ff40 	bl	8001a7c <HAL_GetTick>
 8004bfc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004bfe:	e004      	b.n	8004c0a <HAL_RCC_OscConfig+0x3b2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c00:	f7fc ff3c 	bl	8001a7c <HAL_GetTick>
 8004c04:	1b80      	subs	r0, r0, r6
 8004c06:	2802      	cmp	r0, #2
 8004c08:	d8a7      	bhi.n	8004b5a <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004c0a:	682b      	ldr	r3, [r5, #0]
 8004c0c:	0758      	lsls	r0, r3, #29
 8004c0e:	d4f7      	bmi.n	8004c00 <HAL_RCC_OscConfig+0x3a8>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004c10:	6823      	ldr	r3, [r4, #0]
 8004c12:	e65b      	b.n	80048cc <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004c14:	0790      	lsls	r0, r2, #30
 8004c16:	f47f af1a 	bne.w	8004a4e <HAL_RCC_OscConfig+0x1f6>
 8004c1a:	e6e7      	b.n	80049ec <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c1c:	686b      	ldr	r3, [r5, #4]
 8004c1e:	6922      	ldr	r2, [r4, #16]
 8004c20:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004c24:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004c28:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004c2a:	6823      	ldr	r3, [r4, #0]
 8004c2c:	e64e      	b.n	80048cc <HAL_RCC_OscConfig+0x74>
    return HAL_ERROR;
 8004c2e:	2001      	movs	r0, #1
}
 8004c30:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c32:	4a62      	ldr	r2, [pc, #392]	; (8004dbc <HAL_RCC_OscConfig+0x564>)
 8004c34:	6a21      	ldr	r1, [r4, #32]
 8004c36:	68d3      	ldr	r3, [r2, #12]
 8004c38:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8004c3c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004c40:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c42:	6823      	ldr	r3, [r4, #0]
 8004c44:	e678      	b.n	8004938 <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
 8004c46:	f7fc ff19 	bl	8001a7c <HAL_GetTick>
 8004c4a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c4c:	e004      	b.n	8004c58 <HAL_RCC_OscConfig+0x400>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c4e:	f7fc ff15 	bl	8001a7c <HAL_GetTick>
 8004c52:	1b80      	subs	r0, r0, r6
 8004c54:	2802      	cmp	r0, #2
 8004c56:	d880      	bhi.n	8004b5a <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c58:	682b      	ldr	r3, [r5, #0]
 8004c5a:	0199      	lsls	r1, r3, #6
 8004c5c:	d4f7      	bmi.n	8004c4e <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c5e:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8004c60:	4b57      	ldr	r3, [pc, #348]	; (8004dc0 <HAL_RCC_OscConfig+0x568>)
 8004c62:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004c64:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004c66:	4957      	ldr	r1, [pc, #348]	; (8004dc4 <HAL_RCC_OscConfig+0x56c>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004c68:	4e54      	ldr	r6, [pc, #336]	; (8004dbc <HAL_RCC_OscConfig+0x564>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004c6e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8004c72:	62ab      	str	r3, [r5, #40]	; 0x28
 8004c74:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 8004c78:	3b01      	subs	r3, #1
 8004c7a:	3a01      	subs	r2, #1
 8004c7c:	025b      	lsls	r3, r3, #9
 8004c7e:	0412      	lsls	r2, r2, #16
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8004c86:	4313      	orrs	r3, r2
 8004c88:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004c8a:	3a01      	subs	r2, #1
 8004c8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c90:	4313      	orrs	r3, r2
 8004c92:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004c94:	3a01      	subs	r2, #1
 8004c96:	0612      	lsls	r2, r2, #24
 8004c98:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 8004ca0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004ca2:	f023 0301 	bic.w	r3, r3, #1
 8004ca6:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004ca8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8004caa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004cac:	4011      	ands	r1, r2
 8004cae:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8004cb2:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004cb4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004cb6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004cb8:	f023 030c 	bic.w	r3, r3, #12
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004cc0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004cc2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004cc4:	f023 0302 	bic.w	r3, r3, #2
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004ccc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004cce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cd2:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cd4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004cd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cda:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004cdc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004cde:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ce2:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 8004ce4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004ce6:	f043 0301 	orr.w	r3, r3, #1
 8004cea:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8004cec:	682b      	ldr	r3, [r5, #0]
 8004cee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cf2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004cf4:	f7fc fec2 	bl	8001a7c <HAL_GetTick>
 8004cf8:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004cfa:	e005      	b.n	8004d08 <HAL_RCC_OscConfig+0x4b0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cfc:	f7fc febe 	bl	8001a7c <HAL_GetTick>
 8004d00:	1b00      	subs	r0, r0, r4
 8004d02:	2802      	cmp	r0, #2
 8004d04:	f63f af29 	bhi.w	8004b5a <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004d08:	6833      	ldr	r3, [r6, #0]
 8004d0a:	019a      	lsls	r2, r3, #6
 8004d0c:	d5f6      	bpl.n	8004cfc <HAL_RCC_OscConfig+0x4a4>
 8004d0e:	e665      	b.n	80049dc <HAL_RCC_OscConfig+0x184>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d10:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004d12:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004d14:	6b2e      	ldr	r6, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d16:	f43f ae62 	beq.w	80049de <HAL_RCC_OscConfig+0x186>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d1a:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d1e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004d20:	428b      	cmp	r3, r1
 8004d22:	f47f aeb9 	bne.w	8004a98 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d26:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d2a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	f47f aeb3 	bne.w	8004a98 <HAL_RCC_OscConfig+0x240>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004d32:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004d34:	f3c6 0208 	ubfx	r2, r6, #0, #9
 8004d38:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	f47f aeac 	bne.w	8004a98 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004d40:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004d42:	f3c6 2246 	ubfx	r2, r6, #9, #7
 8004d46:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	f47f aea5 	bne.w	8004a98 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004d4e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004d50:	f3c6 4206 	ubfx	r2, r6, #16, #7
 8004d54:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004d56:	429a      	cmp	r2, r3
 8004d58:	f47f ae9e 	bne.w	8004a98 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004d5c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004d5e:	f3c6 6606 	ubfx	r6, r6, #24, #7
 8004d62:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004d64:	429e      	cmp	r6, r3
 8004d66:	f47f ae97 	bne.w	8004a98 <HAL_RCC_OscConfig+0x240>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004d6a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004d6c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004d6e:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004d72:	429a      	cmp	r2, r3
 8004d74:	f43f ae32 	beq.w	80049dc <HAL_RCC_OscConfig+0x184>
          __HAL_RCC_PLLFRACN_DISABLE();
 8004d78:	4a10      	ldr	r2, [pc, #64]	; (8004dbc <HAL_RCC_OscConfig+0x564>)
 8004d7a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004d7c:	f023 0301 	bic.w	r3, r3, #1
 8004d80:	62d3      	str	r3, [r2, #44]	; 0x2c
          tickstart = HAL_GetTick();
 8004d82:	f7fc fe7b 	bl	8001a7c <HAL_GetTick>
 8004d86:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004d88:	f7fc fe78 	bl	8001a7c <HAL_GetTick>
 8004d8c:	42a8      	cmp	r0, r5
 8004d8e:	d0fb      	beq.n	8004d88 <HAL_RCC_OscConfig+0x530>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004d90:	4a0a      	ldr	r2, [pc, #40]	; (8004dbc <HAL_RCC_OscConfig+0x564>)
  return HAL_OK;
 8004d92:	2000      	movs	r0, #0
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004d94:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004d96:	4b0b      	ldr	r3, [pc, #44]	; (8004dc4 <HAL_RCC_OscConfig+0x56c>)
 8004d98:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8004d9a:	4023      	ands	r3, r4
 8004d9c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004da0:	6353      	str	r3, [r2, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 8004da2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004da4:	f043 0301 	orr.w	r3, r3, #1
 8004da8:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8004daa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004dac:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004db0:	601a      	str	r2, [r3, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004db8:	601a      	str	r2, [r3, #0]
 8004dba:	e575      	b.n	80048a8 <HAL_RCC_OscConfig+0x50>
 8004dbc:	58024400 	.word	0x58024400
 8004dc0:	fffffc0c 	.word	0xfffffc0c
 8004dc4:	ffff0007 	.word	0xffff0007
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dc8:	4d1c      	ldr	r5, [pc, #112]	; (8004e3c <HAL_RCC_OscConfig+0x5e4>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dca:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dce:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004dd0:	f023 0301 	bic.w	r3, r3, #1
 8004dd4:	672b      	str	r3, [r5, #112]	; 0x70
 8004dd6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004dd8:	f023 0304 	bic.w	r3, r3, #4
 8004ddc:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8004dde:	f7fc fe4d 	bl	8001a7c <HAL_GetTick>
 8004de2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004de4:	e005      	b.n	8004df2 <HAL_RCC_OscConfig+0x59a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004de6:	f7fc fe49 	bl	8001a7c <HAL_GetTick>
 8004dea:	1b80      	subs	r0, r0, r6
 8004dec:	42b8      	cmp	r0, r7
 8004dee:	f63f aeb4 	bhi.w	8004b5a <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004df2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004df4:	0798      	lsls	r0, r3, #30
 8004df6:	d4f6      	bmi.n	8004de6 <HAL_RCC_OscConfig+0x58e>
 8004df8:	e5d3      	b.n	80049a2 <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004dfa:	68eb      	ldr	r3, [r5, #12]
 8004dfc:	6a22      	ldr	r2, [r4, #32]
 8004dfe:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8004e02:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004e06:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e08:	6823      	ldr	r3, [r4, #0]
 8004e0a:	e595      	b.n	8004938 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e0c:	4a0b      	ldr	r2, [pc, #44]	; (8004e3c <HAL_RCC_OscConfig+0x5e4>)
 8004e0e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8004e10:	f043 0301 	orr.w	r3, r3, #1
 8004e14:	6713      	str	r3, [r2, #112]	; 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e16:	e690      	b.n	8004b3a <HAL_RCC_OscConfig+0x2e2>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004e18:	4a08      	ldr	r2, [pc, #32]	; (8004e3c <HAL_RCC_OscConfig+0x5e4>)
 8004e1a:	6853      	ldr	r3, [r2, #4]
 8004e1c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004e20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e24:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e26:	6823      	ldr	r3, [r4, #0]
 8004e28:	e586      	b.n	8004938 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e2a:	f042 0204 	orr.w	r2, r2, #4
 8004e2e:	671a      	str	r2, [r3, #112]	; 0x70
 8004e30:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e32:	f042 0201 	orr.w	r2, r2, #1
 8004e36:	671a      	str	r2, [r3, #112]	; 0x70
 8004e38:	e67f      	b.n	8004b3a <HAL_RCC_OscConfig+0x2e2>
 8004e3a:	bf00      	nop
 8004e3c:	58024400 	.word	0x58024400

08004e40 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e40:	4a48      	ldr	r2, [pc, #288]	; (8004f64 <HAL_RCC_GetSysClockFreq+0x124>)
 8004e42:	6913      	ldr	r3, [r2, #16]
 8004e44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e48:	2b10      	cmp	r3, #16
 8004e4a:	d004      	beq.n	8004e56 <HAL_RCC_GetSysClockFreq+0x16>
 8004e4c:	2b18      	cmp	r3, #24
 8004e4e:	d00d      	beq.n	8004e6c <HAL_RCC_GetSysClockFreq+0x2c>
 8004e50:	b11b      	cbz	r3, 8004e5a <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
 8004e52:	4845      	ldr	r0, [pc, #276]	; (8004f68 <HAL_RCC_GetSysClockFreq+0x128>)
 8004e54:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e56:	4845      	ldr	r0, [pc, #276]	; (8004f6c <HAL_RCC_GetSysClockFreq+0x12c>)
 8004e58:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e5a:	6813      	ldr	r3, [r2, #0]
 8004e5c:	0699      	lsls	r1, r3, #26
 8004e5e:	d54a      	bpl.n	8004ef6 <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004e60:	6813      	ldr	r3, [r2, #0]
 8004e62:	4843      	ldr	r0, [pc, #268]	; (8004f70 <HAL_RCC_GetSysClockFreq+0x130>)
 8004e64:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004e68:	40d8      	lsrs	r0, r3
 8004e6a:	4770      	bx	lr
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004e6c:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
 8004e6e:	b430      	push	{r4, r5}
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004e70:	6a94      	ldr	r4, [r2, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004e72:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
      if (pllm != 0U)
 8004e74:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004e78:	6b51      	ldr	r1, [r2, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004e7a:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 8004e7e:	d038      	beq.n	8004ef2 <HAL_RCC_GetSysClockFreq+0xb2>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004e80:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004e84:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004e88:	f003 0303 	and.w	r3, r3, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004e8c:	fb05 f101 	mul.w	r1, r5, r1
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	ee07 1a90 	vmov	s15, r1
 8004e96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
        switch (pllsource)
 8004e9a:	d002      	beq.n	8004ea2 <HAL_RCC_GetSysClockFreq+0x62>
 8004e9c:	2b02      	cmp	r3, #2
 8004e9e:	d02c      	beq.n	8004efa <HAL_RCC_GetSysClockFreq+0xba>
 8004ea0:	b393      	cbz	r3, 8004f08 <HAL_RCC_GetSysClockFreq+0xc8>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ea2:	ee07 0a90 	vmov	s15, r0
 8004ea6:	ed9f 5a33 	vldr	s10, [pc, #204]	; 8004f74 <HAL_RCC_GetSysClockFreq+0x134>
 8004eaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004eae:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004eb0:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8004eb4:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8004f78 <HAL_RCC_GetSysClockFreq+0x138>
 8004eb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ebc:	ee07 3a90 	vmov	s15, r3
 8004ec0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8004ec4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ec8:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8004ecc:	eee7 7a06 	vfma.f32	s15, s14, s12
 8004ed0:	ee66 6aa7 	vmul.f32	s13, s13, s15
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004ed4:	4b23      	ldr	r3, [pc, #140]	; (8004f64 <HAL_RCC_GetSysClockFreq+0x124>)
 8004ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004edc:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004ede:	ee07 3a90 	vmov	s15, r3
 8004ee2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ee6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004eea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004eee:	ee17 0a90 	vmov	r0, s15
}
 8004ef2:	bc30      	pop	{r4, r5}
 8004ef4:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004ef6:	481e      	ldr	r0, [pc, #120]	; (8004f70 <HAL_RCC_GetSysClockFreq+0x130>)
}
 8004ef8:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004efa:	ee07 0a90 	vmov	s15, r0
 8004efe:	ed9f 5a1f 	vldr	s10, [pc, #124]	; 8004f7c <HAL_RCC_GetSysClockFreq+0x13c>
 8004f02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f06:	e7d2      	b.n	8004eae <HAL_RCC_GetSysClockFreq+0x6e>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f08:	6813      	ldr	r3, [r2, #0]
 8004f0a:	069b      	lsls	r3, r3, #26
 8004f0c:	d522      	bpl.n	8004f54 <HAL_RCC_GetSysClockFreq+0x114>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004f0e:	6814      	ldr	r4, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f10:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004f14:	4916      	ldr	r1, [pc, #88]	; (8004f70 <HAL_RCC_GetSysClockFreq+0x130>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f1a:	6b13      	ldr	r3, [r2, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004f1c:	f3c4 04c1 	ubfx	r4, r4, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f24:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8004f78 <HAL_RCC_GetSysClockFreq+0x138>
 8004f28:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004f2c:	40e1      	lsrs	r1, r4
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f2e:	ee06 3a10 	vmov	s12, r3
 8004f32:	ee05 1a90 	vmov	s11, r1
 8004f36:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8004f3a:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8004f3e:	ee36 6a26 	vadd.f32	s12, s12, s13
 8004f42:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8004f46:	eef0 7a46 	vmov.f32	s15, s12
 8004f4a:	eee7 7a05 	vfma.f32	s15, s14, s10
 8004f4e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004f52:	e7bf      	b.n	8004ed4 <HAL_RCC_GetSysClockFreq+0x94>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f54:	ee07 0a90 	vmov	s15, r0
 8004f58:	ed9f 5a09 	vldr	s10, [pc, #36]	; 8004f80 <HAL_RCC_GetSysClockFreq+0x140>
 8004f5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f60:	e7a5      	b.n	8004eae <HAL_RCC_GetSysClockFreq+0x6e>
 8004f62:	bf00      	nop
 8004f64:	58024400 	.word	0x58024400
 8004f68:	003d0900 	.word	0x003d0900
 8004f6c:	007a1200 	.word	0x007a1200
 8004f70:	03d09000 	.word	0x03d09000
 8004f74:	4a742400 	.word	0x4a742400
 8004f78:	39000000 	.word	0x39000000
 8004f7c:	4af42400 	.word	0x4af42400
 8004f80:	4c742400 	.word	0x4c742400

08004f84 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8004f84:	2800      	cmp	r0, #0
 8004f86:	f000 810c 	beq.w	80051a2 <HAL_RCC_ClockConfig+0x21e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f8a:	4a8c      	ldr	r2, [pc, #560]	; (80051bc <HAL_RCC_ClockConfig+0x238>)
 8004f8c:	6813      	ldr	r3, [r2, #0]
 8004f8e:	f003 030f 	and.w	r3, r3, #15
 8004f92:	428b      	cmp	r3, r1
{
 8004f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f98:	4604      	mov	r4, r0
 8004f9a:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f9c:	d20c      	bcs.n	8004fb8 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f9e:	6813      	ldr	r3, [r2, #0]
 8004fa0:	f023 030f 	bic.w	r3, r3, #15
 8004fa4:	430b      	orrs	r3, r1
 8004fa6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fa8:	6813      	ldr	r3, [r2, #0]
 8004faa:	f003 030f 	and.w	r3, r3, #15
 8004fae:	428b      	cmp	r3, r1
 8004fb0:	d002      	beq.n	8004fb8 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8004fb2:	2001      	movs	r0, #1
}
 8004fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004fb8:	6823      	ldr	r3, [r4, #0]
 8004fba:	075f      	lsls	r7, r3, #29
 8004fbc:	d50b      	bpl.n	8004fd6 <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004fbe:	4980      	ldr	r1, [pc, #512]	; (80051c0 <HAL_RCC_ClockConfig+0x23c>)
 8004fc0:	6920      	ldr	r0, [r4, #16]
 8004fc2:	698a      	ldr	r2, [r1, #24]
 8004fc4:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004fc8:	4290      	cmp	r0, r2
 8004fca:	d904      	bls.n	8004fd6 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004fcc:	698a      	ldr	r2, [r1, #24]
 8004fce:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004fd2:	4302      	orrs	r2, r0
 8004fd4:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fd6:	071e      	lsls	r6, r3, #28
 8004fd8:	d50b      	bpl.n	8004ff2 <HAL_RCC_ClockConfig+0x6e>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004fda:	4979      	ldr	r1, [pc, #484]	; (80051c0 <HAL_RCC_ClockConfig+0x23c>)
 8004fdc:	6960      	ldr	r0, [r4, #20]
 8004fde:	69ca      	ldr	r2, [r1, #28]
 8004fe0:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004fe4:	4290      	cmp	r0, r2
 8004fe6:	d904      	bls.n	8004ff2 <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004fe8:	69ca      	ldr	r2, [r1, #28]
 8004fea:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004fee:	4302      	orrs	r2, r0
 8004ff0:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ff2:	06d8      	lsls	r0, r3, #27
 8004ff4:	d50b      	bpl.n	800500e <HAL_RCC_ClockConfig+0x8a>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004ff6:	4972      	ldr	r1, [pc, #456]	; (80051c0 <HAL_RCC_ClockConfig+0x23c>)
 8004ff8:	69a0      	ldr	r0, [r4, #24]
 8004ffa:	69ca      	ldr	r2, [r1, #28]
 8004ffc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8005000:	4290      	cmp	r0, r2
 8005002:	d904      	bls.n	800500e <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005004:	69ca      	ldr	r2, [r1, #28]
 8005006:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800500a:	4302      	orrs	r2, r0
 800500c:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800500e:	0699      	lsls	r1, r3, #26
 8005010:	d50b      	bpl.n	800502a <HAL_RCC_ClockConfig+0xa6>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005012:	496b      	ldr	r1, [pc, #428]	; (80051c0 <HAL_RCC_ClockConfig+0x23c>)
 8005014:	69e0      	ldr	r0, [r4, #28]
 8005016:	6a0a      	ldr	r2, [r1, #32]
 8005018:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800501c:	4290      	cmp	r0, r2
 800501e:	d904      	bls.n	800502a <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005020:	6a0a      	ldr	r2, [r1, #32]
 8005022:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005026:	4302      	orrs	r2, r0
 8005028:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800502a:	079a      	lsls	r2, r3, #30
 800502c:	f140 80ab 	bpl.w	8005186 <HAL_RCC_ClockConfig+0x202>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005030:	4863      	ldr	r0, [pc, #396]	; (80051c0 <HAL_RCC_ClockConfig+0x23c>)
 8005032:	68e1      	ldr	r1, [r4, #12]
 8005034:	6982      	ldr	r2, [r0, #24]
 8005036:	f002 020f 	and.w	r2, r2, #15
 800503a:	4291      	cmp	r1, r2
 800503c:	d904      	bls.n	8005048 <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800503e:	6982      	ldr	r2, [r0, #24]
 8005040:	f022 020f 	bic.w	r2, r2, #15
 8005044:	430a      	orrs	r2, r1
 8005046:	6182      	str	r2, [r0, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005048:	07d8      	lsls	r0, r3, #31
 800504a:	d530      	bpl.n	80050ae <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800504c:	4a5c      	ldr	r2, [pc, #368]	; (80051c0 <HAL_RCC_ClockConfig+0x23c>)
 800504e:	68a1      	ldr	r1, [r4, #8]
 8005050:	6993      	ldr	r3, [r2, #24]
 8005052:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005056:	430b      	orrs	r3, r1
 8005058:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800505a:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800505c:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800505e:	2902      	cmp	r1, #2
 8005060:	f000 80a1 	beq.w	80051a6 <HAL_RCC_ClockConfig+0x222>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005064:	2903      	cmp	r1, #3
 8005066:	f000 8098 	beq.w	800519a <HAL_RCC_ClockConfig+0x216>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800506a:	2901      	cmp	r1, #1
 800506c:	f000 80a1 	beq.w	80051b2 <HAL_RCC_ClockConfig+0x22e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005070:	0758      	lsls	r0, r3, #29
 8005072:	d59e      	bpl.n	8004fb2 <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005074:	4e52      	ldr	r6, [pc, #328]	; (80051c0 <HAL_RCC_ClockConfig+0x23c>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005076:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800507a:	6933      	ldr	r3, [r6, #16]
 800507c:	f023 0307 	bic.w	r3, r3, #7
 8005080:	430b      	orrs	r3, r1
 8005082:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 8005084:	f7fc fcfa 	bl	8001a7c <HAL_GetTick>
 8005088:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800508a:	e005      	b.n	8005098 <HAL_RCC_ClockConfig+0x114>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800508c:	f7fc fcf6 	bl	8001a7c <HAL_GetTick>
 8005090:	1bc0      	subs	r0, r0, r7
 8005092:	4540      	cmp	r0, r8
 8005094:	f200 808b 	bhi.w	80051ae <HAL_RCC_ClockConfig+0x22a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005098:	6933      	ldr	r3, [r6, #16]
 800509a:	6862      	ldr	r2, [r4, #4]
 800509c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80050a0:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 80050a4:	d1f2      	bne.n	800508c <HAL_RCC_ClockConfig+0x108>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050a6:	6823      	ldr	r3, [r4, #0]
 80050a8:	0799      	lsls	r1, r3, #30
 80050aa:	d506      	bpl.n	80050ba <HAL_RCC_ClockConfig+0x136>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80050ac:	68e1      	ldr	r1, [r4, #12]
 80050ae:	4844      	ldr	r0, [pc, #272]	; (80051c0 <HAL_RCC_ClockConfig+0x23c>)
 80050b0:	6982      	ldr	r2, [r0, #24]
 80050b2:	f002 020f 	and.w	r2, r2, #15
 80050b6:	428a      	cmp	r2, r1
 80050b8:	d869      	bhi.n	800518e <HAL_RCC_ClockConfig+0x20a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050ba:	4940      	ldr	r1, [pc, #256]	; (80051bc <HAL_RCC_ClockConfig+0x238>)
 80050bc:	680a      	ldr	r2, [r1, #0]
 80050be:	f002 020f 	and.w	r2, r2, #15
 80050c2:	42aa      	cmp	r2, r5
 80050c4:	d90a      	bls.n	80050dc <HAL_RCC_ClockConfig+0x158>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050c6:	680a      	ldr	r2, [r1, #0]
 80050c8:	f022 020f 	bic.w	r2, r2, #15
 80050cc:	432a      	orrs	r2, r5
 80050ce:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050d0:	680a      	ldr	r2, [r1, #0]
 80050d2:	f002 020f 	and.w	r2, r2, #15
 80050d6:	42aa      	cmp	r2, r5
 80050d8:	f47f af6b 	bne.w	8004fb2 <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80050dc:	075a      	lsls	r2, r3, #29
 80050de:	d50b      	bpl.n	80050f8 <HAL_RCC_ClockConfig+0x174>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80050e0:	4937      	ldr	r1, [pc, #220]	; (80051c0 <HAL_RCC_ClockConfig+0x23c>)
 80050e2:	6920      	ldr	r0, [r4, #16]
 80050e4:	698a      	ldr	r2, [r1, #24]
 80050e6:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80050ea:	4290      	cmp	r0, r2
 80050ec:	d204      	bcs.n	80050f8 <HAL_RCC_ClockConfig+0x174>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80050ee:	698a      	ldr	r2, [r1, #24]
 80050f0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80050f4:	4302      	orrs	r2, r0
 80050f6:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050f8:	071f      	lsls	r7, r3, #28
 80050fa:	d50b      	bpl.n	8005114 <HAL_RCC_ClockConfig+0x190>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80050fc:	4930      	ldr	r1, [pc, #192]	; (80051c0 <HAL_RCC_ClockConfig+0x23c>)
 80050fe:	6960      	ldr	r0, [r4, #20]
 8005100:	69ca      	ldr	r2, [r1, #28]
 8005102:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8005106:	4290      	cmp	r0, r2
 8005108:	d204      	bcs.n	8005114 <HAL_RCC_ClockConfig+0x190>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800510a:	69ca      	ldr	r2, [r1, #28]
 800510c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005110:	4302      	orrs	r2, r0
 8005112:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005114:	06de      	lsls	r6, r3, #27
 8005116:	d50b      	bpl.n	8005130 <HAL_RCC_ClockConfig+0x1ac>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005118:	4929      	ldr	r1, [pc, #164]	; (80051c0 <HAL_RCC_ClockConfig+0x23c>)
 800511a:	69a0      	ldr	r0, [r4, #24]
 800511c:	69ca      	ldr	r2, [r1, #28]
 800511e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8005122:	4290      	cmp	r0, r2
 8005124:	d204      	bcs.n	8005130 <HAL_RCC_ClockConfig+0x1ac>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005126:	69ca      	ldr	r2, [r1, #28]
 8005128:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800512c:	4302      	orrs	r2, r0
 800512e:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005130:	069d      	lsls	r5, r3, #26
 8005132:	d50b      	bpl.n	800514c <HAL_RCC_ClockConfig+0x1c8>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005134:	4a22      	ldr	r2, [pc, #136]	; (80051c0 <HAL_RCC_ClockConfig+0x23c>)
 8005136:	69e1      	ldr	r1, [r4, #28]
 8005138:	6a13      	ldr	r3, [r2, #32]
 800513a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800513e:	4299      	cmp	r1, r3
 8005140:	d204      	bcs.n	800514c <HAL_RCC_ClockConfig+0x1c8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005142:	6a13      	ldr	r3, [r2, #32]
 8005144:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005148:	430b      	orrs	r3, r1
 800514a:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800514c:	f7ff fe78 	bl	8004e40 <HAL_RCC_GetSysClockFreq>
 8005150:	4a1b      	ldr	r2, [pc, #108]	; (80051c0 <HAL_RCC_ClockConfig+0x23c>)
 8005152:	4603      	mov	r3, r0
 8005154:	481b      	ldr	r0, [pc, #108]	; (80051c4 <HAL_RCC_ClockConfig+0x240>)
 8005156:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005158:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800515a:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 800515e:	4d1a      	ldr	r5, [pc, #104]	; (80051c8 <HAL_RCC_ClockConfig+0x244>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005160:	f002 020f 	and.w	r2, r2, #15
 8005164:	4c19      	ldr	r4, [pc, #100]	; (80051cc <HAL_RCC_ClockConfig+0x248>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005166:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005168:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800516a:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
 800516e:	4818      	ldr	r0, [pc, #96]	; (80051d0 <HAL_RCC_ClockConfig+0x24c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005170:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005174:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
 8005176:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 8005178:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800517a:	40d3      	lsrs	r3, r2
 800517c:	6023      	str	r3, [r4, #0]
}
 800517e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 8005182:	f7fc bc19 	b.w	80019b8 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005186:	07da      	lsls	r2, r3, #31
 8005188:	f53f af60 	bmi.w	800504c <HAL_RCC_ClockConfig+0xc8>
 800518c:	e795      	b.n	80050ba <HAL_RCC_ClockConfig+0x136>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800518e:	6982      	ldr	r2, [r0, #24]
 8005190:	f022 020f 	bic.w	r2, r2, #15
 8005194:	430a      	orrs	r2, r1
 8005196:	6182      	str	r2, [r0, #24]
 8005198:	e78f      	b.n	80050ba <HAL_RCC_ClockConfig+0x136>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800519a:	019f      	lsls	r7, r3, #6
 800519c:	f53f af6a 	bmi.w	8005074 <HAL_RCC_ClockConfig+0xf0>
 80051a0:	e707      	b.n	8004fb2 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80051a2:	2001      	movs	r0, #1
}
 80051a4:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80051a6:	039b      	lsls	r3, r3, #14
 80051a8:	f53f af64 	bmi.w	8005074 <HAL_RCC_ClockConfig+0xf0>
 80051ac:	e701      	b.n	8004fb2 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 80051ae:	2003      	movs	r0, #3
 80051b0:	e700      	b.n	8004fb4 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80051b2:	05de      	lsls	r6, r3, #23
 80051b4:	f53f af5e 	bmi.w	8005074 <HAL_RCC_ClockConfig+0xf0>
 80051b8:	e6fb      	b.n	8004fb2 <HAL_RCC_ClockConfig+0x2e>
 80051ba:	bf00      	nop
 80051bc:	52002000 	.word	0x52002000
 80051c0:	58024400 	.word	0x58024400
 80051c4:	0800849c 	.word	0x0800849c
 80051c8:	20000164 	.word	0x20000164
 80051cc:	20000168 	.word	0x20000168
 80051d0:	20000170 	.word	0x20000170

080051d4 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051d4:	4a18      	ldr	r2, [pc, #96]	; (8005238 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051d6:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051d8:	6913      	ldr	r3, [r2, #16]
 80051da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80051de:	2b10      	cmp	r3, #16
 80051e0:	d01a      	beq.n	8005218 <HAL_RCC_GetHCLKFreq+0x44>
 80051e2:	2b18      	cmp	r3, #24
 80051e4:	d023      	beq.n	800522e <HAL_RCC_GetHCLKFreq+0x5a>
 80051e6:	b1cb      	cbz	r3, 800521c <HAL_RCC_GetHCLKFreq+0x48>
      sysclockfreq = CSI_VALUE;
 80051e8:	4814      	ldr	r0, [pc, #80]	; (800523c <HAL_RCC_GetHCLKFreq+0x68>)
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80051ea:	4b13      	ldr	r3, [pc, #76]	; (8005238 <HAL_RCC_GetHCLKFreq+0x64>)
 80051ec:	4914      	ldr	r1, [pc, #80]	; (8005240 <HAL_RCC_GetHCLKFreq+0x6c>)
 80051ee:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80051f0:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80051f2:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80051f6:	4c13      	ldr	r4, [pc, #76]	; (8005244 <HAL_RCC_GetHCLKFreq+0x70>)
 80051f8:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80051fc:	4d12      	ldr	r5, [pc, #72]	; (8005248 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80051fe:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005200:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005202:	f002 021f 	and.w	r2, r2, #31
 8005206:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800520a:	f003 001f 	and.w	r0, r3, #31
 800520e:	fa22 f000 	lsr.w	r0, r2, r0
  SystemCoreClock = common_system_clock;
 8005212:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005214:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8005216:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005218:	480c      	ldr	r0, [pc, #48]	; (800524c <HAL_RCC_GetHCLKFreq+0x78>)
 800521a:	e7e6      	b.n	80051ea <HAL_RCC_GetHCLKFreq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800521c:	6813      	ldr	r3, [r2, #0]
 800521e:	069b      	lsls	r3, r3, #26
 8005220:	d508      	bpl.n	8005234 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005222:	6813      	ldr	r3, [r2, #0]
 8005224:	480a      	ldr	r0, [pc, #40]	; (8005250 <HAL_RCC_GetHCLKFreq+0x7c>)
 8005226:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800522a:	40d8      	lsrs	r0, r3
 800522c:	e7dd      	b.n	80051ea <HAL_RCC_GetHCLKFreq+0x16>
 800522e:	f7ff fa8d 	bl	800474c <HAL_RCC_GetSysClockFreq.part.0>
 8005232:	e7da      	b.n	80051ea <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005234:	4806      	ldr	r0, [pc, #24]	; (8005250 <HAL_RCC_GetHCLKFreq+0x7c>)
 8005236:	e7d8      	b.n	80051ea <HAL_RCC_GetHCLKFreq+0x16>
 8005238:	58024400 	.word	0x58024400
 800523c:	003d0900 	.word	0x003d0900
 8005240:	0800849c 	.word	0x0800849c
 8005244:	20000168 	.word	0x20000168
 8005248:	20000164 	.word	0x20000164
 800524c:	007a1200 	.word	0x007a1200
 8005250:	03d09000 	.word	0x03d09000

08005254 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005254:	4a1c      	ldr	r2, [pc, #112]	; (80052c8 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005256:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005258:	6913      	ldr	r3, [r2, #16]
 800525a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800525e:	2b10      	cmp	r3, #16
 8005260:	d021      	beq.n	80052a6 <HAL_RCC_GetPCLK1Freq+0x52>
 8005262:	2b18      	cmp	r3, #24
 8005264:	d02a      	beq.n	80052bc <HAL_RCC_GetPCLK1Freq+0x68>
 8005266:	b303      	cbz	r3, 80052aa <HAL_RCC_GetPCLK1Freq+0x56>
      sysclockfreq = CSI_VALUE;
 8005268:	4818      	ldr	r0, [pc, #96]	; (80052cc <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800526a:	4a17      	ldr	r2, [pc, #92]	; (80052c8 <HAL_RCC_GetPCLK1Freq+0x74>)
 800526c:	4918      	ldr	r1, [pc, #96]	; (80052d0 <HAL_RCC_GetPCLK1Freq+0x7c>)
 800526e:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005270:	4c18      	ldr	r4, [pc, #96]	; (80052d4 <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005272:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemCoreClock = common_system_clock;
 8005276:	4d18      	ldr	r5, [pc, #96]	; (80052d8 <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005278:	5ccb      	ldrb	r3, [r1, r3]
 800527a:	f003 031f 	and.w	r3, r3, #31
 800527e:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005280:	6993      	ldr	r3, [r2, #24]
 8005282:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = common_system_clock;
 8005286:	6028      	str	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005288:	5ccb      	ldrb	r3, [r1, r3]
 800528a:	f003 031f 	and.w	r3, r3, #31
 800528e:	fa20 f303 	lsr.w	r3, r0, r3
 8005292:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005294:	69d2      	ldr	r2, [r2, #28]
 8005296:	f3c2 1202 	ubfx	r2, r2, #4, #3
 800529a:	5c88      	ldrb	r0, [r1, r2]
 800529c:	f000 001f 	and.w	r0, r0, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80052a0:	fa23 f000 	lsr.w	r0, r3, r0
 80052a4:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80052a6:	480d      	ldr	r0, [pc, #52]	; (80052dc <HAL_RCC_GetPCLK1Freq+0x88>)
 80052a8:	e7df      	b.n	800526a <HAL_RCC_GetPCLK1Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052aa:	6813      	ldr	r3, [r2, #0]
 80052ac:	069b      	lsls	r3, r3, #26
 80052ae:	d508      	bpl.n	80052c2 <HAL_RCC_GetPCLK1Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80052b0:	6813      	ldr	r3, [r2, #0]
 80052b2:	480b      	ldr	r0, [pc, #44]	; (80052e0 <HAL_RCC_GetPCLK1Freq+0x8c>)
 80052b4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80052b8:	40d8      	lsrs	r0, r3
 80052ba:	e7d6      	b.n	800526a <HAL_RCC_GetPCLK1Freq+0x16>
 80052bc:	f7ff fa46 	bl	800474c <HAL_RCC_GetSysClockFreq.part.0>
 80052c0:	e7d3      	b.n	800526a <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80052c2:	4807      	ldr	r0, [pc, #28]	; (80052e0 <HAL_RCC_GetPCLK1Freq+0x8c>)
 80052c4:	e7d1      	b.n	800526a <HAL_RCC_GetPCLK1Freq+0x16>
 80052c6:	bf00      	nop
 80052c8:	58024400 	.word	0x58024400
 80052cc:	003d0900 	.word	0x003d0900
 80052d0:	0800849c 	.word	0x0800849c
 80052d4:	20000168 	.word	0x20000168
 80052d8:	20000164 	.word	0x20000164
 80052dc:	007a1200 	.word	0x007a1200
 80052e0:	03d09000 	.word	0x03d09000

080052e4 <HAL_RCC_GetPCLK2Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80052e4:	4a1c      	ldr	r2, [pc, #112]	; (8005358 <HAL_RCC_GetPCLK2Freq+0x74>)
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052e6:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80052e8:	6913      	ldr	r3, [r2, #16]
 80052ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052ee:	2b10      	cmp	r3, #16
 80052f0:	d021      	beq.n	8005336 <HAL_RCC_GetPCLK2Freq+0x52>
 80052f2:	2b18      	cmp	r3, #24
 80052f4:	d02a      	beq.n	800534c <HAL_RCC_GetPCLK2Freq+0x68>
 80052f6:	b303      	cbz	r3, 800533a <HAL_RCC_GetPCLK2Freq+0x56>
      sysclockfreq = CSI_VALUE;
 80052f8:	4818      	ldr	r0, [pc, #96]	; (800535c <HAL_RCC_GetPCLK2Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80052fa:	4a17      	ldr	r2, [pc, #92]	; (8005358 <HAL_RCC_GetPCLK2Freq+0x74>)
 80052fc:	4918      	ldr	r1, [pc, #96]	; (8005360 <HAL_RCC_GetPCLK2Freq+0x7c>)
 80052fe:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005300:	4c18      	ldr	r4, [pc, #96]	; (8005364 <HAL_RCC_GetPCLK2Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005302:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemCoreClock = common_system_clock;
 8005306:	4d18      	ldr	r5, [pc, #96]	; (8005368 <HAL_RCC_GetPCLK2Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005308:	5ccb      	ldrb	r3, [r1, r3]
 800530a:	f003 031f 	and.w	r3, r3, #31
 800530e:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005310:	6993      	ldr	r3, [r2, #24]
 8005312:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = common_system_clock;
 8005316:	6028      	str	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005318:	5ccb      	ldrb	r3, [r1, r3]
 800531a:	f003 031f 	and.w	r3, r3, #31
 800531e:	fa20 f303 	lsr.w	r3, r0, r3
 8005322:	6023      	str	r3, [r4, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005324:	69d2      	ldr	r2, [r2, #28]
 8005326:	f3c2 2202 	ubfx	r2, r2, #8, #3
 800532a:	5c88      	ldrb	r0, [r1, r2]
 800532c:	f000 001f 	and.w	r0, r0, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005330:	fa23 f000 	lsr.w	r0, r3, r0
 8005334:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005336:	480d      	ldr	r0, [pc, #52]	; (800536c <HAL_RCC_GetPCLK2Freq+0x88>)
 8005338:	e7df      	b.n	80052fa <HAL_RCC_GetPCLK2Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800533a:	6813      	ldr	r3, [r2, #0]
 800533c:	069b      	lsls	r3, r3, #26
 800533e:	d508      	bpl.n	8005352 <HAL_RCC_GetPCLK2Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005340:	6813      	ldr	r3, [r2, #0]
 8005342:	480b      	ldr	r0, [pc, #44]	; (8005370 <HAL_RCC_GetPCLK2Freq+0x8c>)
 8005344:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005348:	40d8      	lsrs	r0, r3
 800534a:	e7d6      	b.n	80052fa <HAL_RCC_GetPCLK2Freq+0x16>
 800534c:	f7ff f9fe 	bl	800474c <HAL_RCC_GetSysClockFreq.part.0>
 8005350:	e7d3      	b.n	80052fa <HAL_RCC_GetPCLK2Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005352:	4807      	ldr	r0, [pc, #28]	; (8005370 <HAL_RCC_GetPCLK2Freq+0x8c>)
 8005354:	e7d1      	b.n	80052fa <HAL_RCC_GetPCLK2Freq+0x16>
 8005356:	bf00      	nop
 8005358:	58024400 	.word	0x58024400
 800535c:	003d0900 	.word	0x003d0900
 8005360:	0800849c 	.word	0x0800849c
 8005364:	20000168 	.word	0x20000168
 8005368:	20000164 	.word	0x20000164
 800536c:	007a1200 	.word	0x007a1200
 8005370:	03d09000 	.word	0x03d09000

08005374 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005376:	4c3a      	ldr	r4, [pc, #232]	; (8005460 <RCCEx_PLL2_Config+0xec>)
 8005378:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800537a:	f003 0303 	and.w	r3, r3, #3
 800537e:	2b03      	cmp	r3, #3
 8005380:	d067      	beq.n	8005452 <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005382:	6823      	ldr	r3, [r4, #0]
 8005384:	4606      	mov	r6, r0
 8005386:	460f      	mov	r7, r1
 8005388:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800538c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800538e:	f7fc fb75 	bl	8001a7c <HAL_GetTick>
 8005392:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005394:	e004      	b.n	80053a0 <RCCEx_PLL2_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005396:	f7fc fb71 	bl	8001a7c <HAL_GetTick>
 800539a:	1b43      	subs	r3, r0, r5
 800539c:	2b02      	cmp	r3, #2
 800539e:	d856      	bhi.n	800544e <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80053a0:	6823      	ldr	r3, [r4, #0]
 80053a2:	011a      	lsls	r2, r3, #4
 80053a4:	d4f7      	bmi.n	8005396 <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80053a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80053a8:	6832      	ldr	r2, [r6, #0]
 80053aa:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80053ae:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80053b2:	62a3      	str	r3, [r4, #40]	; 0x28
 80053b4:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 80053b8:	3b01      	subs	r3, #1
 80053ba:	3a01      	subs	r2, #1
 80053bc:	025b      	lsls	r3, r3, #9
 80053be:	0412      	lsls	r2, r2, #16
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80053c6:	4313      	orrs	r3, r2
 80053c8:	6872      	ldr	r2, [r6, #4]
 80053ca:	3a01      	subs	r2, #1
 80053cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053d0:	4313      	orrs	r3, r2
 80053d2:	6932      	ldr	r2, [r6, #16]
 80053d4:	3a01      	subs	r2, #1
 80053d6:	0612      	lsls	r2, r2, #24
 80053d8:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80053dc:	4313      	orrs	r3, r2
 80053de:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80053e0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80053e2:	6972      	ldr	r2, [r6, #20]
 80053e4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80053e8:	4313      	orrs	r3, r2
 80053ea:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80053ec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80053ee:	69b3      	ldr	r3, [r6, #24]
 80053f0:	f022 0220 	bic.w	r2, r2, #32
 80053f4:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80053f6:	4b1b      	ldr	r3, [pc, #108]	; (8005464 <RCCEx_PLL2_Config+0xf0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80053f8:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 80053fa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80053fc:	f022 0210 	bic.w	r2, r2, #16
 8005400:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005402:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005404:	69f2      	ldr	r2, [r6, #28]
 8005406:	400b      	ands	r3, r1
 8005408:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800540c:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800540e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005410:	f043 0310 	orr.w	r3, r3, #16
 8005414:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005416:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8005418:	b1ef      	cbz	r7, 8005456 <RCCEx_PLL2_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800541a:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800541c:	bf0c      	ite	eq
 800541e:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005422:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8005426:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005428:	4c0d      	ldr	r4, [pc, #52]	; (8005460 <RCCEx_PLL2_Config+0xec>)
 800542a:	6823      	ldr	r3, [r4, #0]
 800542c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005430:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005432:	f7fc fb23 	bl	8001a7c <HAL_GetTick>
 8005436:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005438:	e004      	b.n	8005444 <RCCEx_PLL2_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800543a:	f7fc fb1f 	bl	8001a7c <HAL_GetTick>
 800543e:	1b40      	subs	r0, r0, r5
 8005440:	2802      	cmp	r0, #2
 8005442:	d804      	bhi.n	800544e <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005444:	6823      	ldr	r3, [r4, #0]
 8005446:	011b      	lsls	r3, r3, #4
 8005448:	d5f7      	bpl.n	800543a <RCCEx_PLL2_Config+0xc6>
    }

  }


  return status;
 800544a:	2000      	movs	r0, #0
}
 800544c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800544e:	2003      	movs	r0, #3
}
 8005450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8005452:	2001      	movs	r0, #1
}
 8005454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005456:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800545a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800545c:	e7e4      	b.n	8005428 <RCCEx_PLL2_Config+0xb4>
 800545e:	bf00      	nop
 8005460:	58024400 	.word	0x58024400
 8005464:	ffff0007 	.word	0xffff0007

08005468 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800546a:	4c3a      	ldr	r4, [pc, #232]	; (8005554 <RCCEx_PLL3_Config+0xec>)
 800546c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800546e:	f003 0303 	and.w	r3, r3, #3
 8005472:	2b03      	cmp	r3, #3
 8005474:	d067      	beq.n	8005546 <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005476:	6823      	ldr	r3, [r4, #0]
 8005478:	4606      	mov	r6, r0
 800547a:	460f      	mov	r7, r1
 800547c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005480:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005482:	f7fc fafb 	bl	8001a7c <HAL_GetTick>
 8005486:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005488:	e004      	b.n	8005494 <RCCEx_PLL3_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800548a:	f7fc faf7 	bl	8001a7c <HAL_GetTick>
 800548e:	1b43      	subs	r3, r0, r5
 8005490:	2b02      	cmp	r3, #2
 8005492:	d856      	bhi.n	8005542 <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005494:	6823      	ldr	r3, [r4, #0]
 8005496:	009a      	lsls	r2, r3, #2
 8005498:	d4f7      	bmi.n	800548a <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800549a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800549c:	6832      	ldr	r2, [r6, #0]
 800549e:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 80054a2:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80054a6:	62a3      	str	r3, [r4, #40]	; 0x28
 80054a8:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 80054ac:	3b01      	subs	r3, #1
 80054ae:	3a01      	subs	r2, #1
 80054b0:	025b      	lsls	r3, r3, #9
 80054b2:	0412      	lsls	r2, r2, #16
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80054ba:	4313      	orrs	r3, r2
 80054bc:	6872      	ldr	r2, [r6, #4]
 80054be:	3a01      	subs	r2, #1
 80054c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054c4:	4313      	orrs	r3, r2
 80054c6:	6932      	ldr	r2, [r6, #16]
 80054c8:	3a01      	subs	r2, #1
 80054ca:	0612      	lsls	r2, r2, #24
 80054cc:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80054d0:	4313      	orrs	r3, r2
 80054d2:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80054d4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80054d6:	6972      	ldr	r2, [r6, #20]
 80054d8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80054dc:	4313      	orrs	r3, r2
 80054de:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80054e0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80054e2:	69b3      	ldr	r3, [r6, #24]
 80054e4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80054e8:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80054ea:	4b1b      	ldr	r3, [pc, #108]	; (8005558 <RCCEx_PLL3_Config+0xf0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80054ec:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 80054ee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80054f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054f4:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80054f6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80054f8:	69f2      	ldr	r2, [r6, #28]
 80054fa:	400b      	ands	r3, r1
 80054fc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8005500:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005502:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005504:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005508:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800550a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800550c:	b1ef      	cbz	r7, 800554a <RCCEx_PLL3_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800550e:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005510:	bf0c      	ite	eq
 8005512:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005516:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 800551a:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800551c:	4c0d      	ldr	r4, [pc, #52]	; (8005554 <RCCEx_PLL3_Config+0xec>)
 800551e:	6823      	ldr	r3, [r4, #0]
 8005520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005524:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005526:	f7fc faa9 	bl	8001a7c <HAL_GetTick>
 800552a:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800552c:	e004      	b.n	8005538 <RCCEx_PLL3_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800552e:	f7fc faa5 	bl	8001a7c <HAL_GetTick>
 8005532:	1b40      	subs	r0, r0, r5
 8005534:	2802      	cmp	r0, #2
 8005536:	d804      	bhi.n	8005542 <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005538:	6823      	ldr	r3, [r4, #0]
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	d5f7      	bpl.n	800552e <RCCEx_PLL3_Config+0xc6>
    }

  }


  return status;
 800553e:	2000      	movs	r0, #0
}
 8005540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8005542:	2003      	movs	r0, #3
}
 8005544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8005546:	2001      	movs	r0, #1
}
 8005548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800554a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800554e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005550:	e7e4      	b.n	800551c <RCCEx_PLL3_Config+0xb4>
 8005552:	bf00      	nop
 8005554:	58024400 	.word	0x58024400
 8005558:	ffff0007 	.word	0xffff0007

0800555c <HAL_RCCEx_PeriphCLKConfig>:
{
 800555c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005560:	e9d0 3200 	ldrd	r3, r2, [r0]
{
 8005564:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005566:	011d      	lsls	r5, r3, #4
 8005568:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
 800556c:	d523      	bpl.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800556e:	6e81      	ldr	r1, [r0, #104]	; 0x68
 8005570:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8005574:	f000 8553 	beq.w	800601e <HAL_RCCEx_PeriphCLKConfig+0xac2>
 8005578:	d812      	bhi.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800557a:	2900      	cmp	r1, #0
 800557c:	f000 85a9 	beq.w	80060d2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
 8005580:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8005584:	f040 85a2 	bne.w	80060cc <HAL_RCCEx_PeriphCLKConfig+0xb70>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005588:	2102      	movs	r1, #2
 800558a:	3008      	adds	r0, #8
 800558c:	f7ff fef2 	bl	8005374 <RCCEx_PLL2_Config>
 8005590:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 8005592:	2e00      	cmp	r6, #0
 8005594:	f040 8522 	bne.w	8005fdc <HAL_RCCEx_PeriphCLKConfig+0xa80>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005598:	6ea1      	ldr	r1, [r4, #104]	; 0x68
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800559a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800559e:	e003      	b.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    switch (PeriphClkInit->SpdifrxClockSelection)
 80055a0:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 80055a4:	f040 8592 	bne.w	80060cc <HAL_RCCEx_PeriphCLKConfig+0xb70>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80055a8:	4dae      	ldr	r5, [pc, #696]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80055aa:	2600      	movs	r6, #0
 80055ac:	6d28      	ldr	r0, [r5, #80]	; 0x50
 80055ae:	f420 1040 	bic.w	r0, r0, #3145728	; 0x300000
 80055b2:	4301      	orrs	r1, r0
 80055b4:	6529      	str	r1, [r5, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80055b6:	05d8      	lsls	r0, r3, #23
 80055b8:	d50a      	bpl.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    switch (PeriphClkInit->Sai1ClockSelection)
 80055ba:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80055bc:	2904      	cmp	r1, #4
 80055be:	d806      	bhi.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x72>
 80055c0:	e8df f011 	tbh	[pc, r1, lsl #1]
 80055c4:	053d0536 	.word	0x053d0536
 80055c8:	0323051a 	.word	0x0323051a
 80055cc:	0323      	.short	0x0323
 80055ce:	2601      	movs	r6, #1
 80055d0:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80055d2:	0599      	lsls	r1, r3, #22
 80055d4:	d51d      	bpl.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    switch (PeriphClkInit->Sai23ClockSelection)
 80055d6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80055d8:	2980      	cmp	r1, #128	; 0x80
 80055da:	f000 8516 	beq.w	800600a <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80055de:	f200 80f9 	bhi.w	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x278>
 80055e2:	2900      	cmp	r1, #0
 80055e4:	f000 8433 	beq.w	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 80055e8:	2940      	cmp	r1, #64	; 0x40
 80055ea:	f040 80fa 	bne.w	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x286>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80055ee:	2100      	movs	r1, #0
 80055f0:	f104 0008 	add.w	r0, r4, #8
 80055f4:	f7ff febe 	bl	8005374 <RCCEx_PLL2_Config>
 80055f8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80055fa:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80055fe:	2d00      	cmp	r5, #0
 8005600:	f040 83fe 	bne.w	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005604:	4f97      	ldr	r7, [pc, #604]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005606:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8005608:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800560a:	f421 71e0 	bic.w	r1, r1, #448	; 0x1c0
 800560e:	4301      	orrs	r1, r0
 8005610:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005612:	055f      	lsls	r7, r3, #21
 8005614:	d521      	bpl.n	800565a <HAL_RCCEx_PeriphCLKConfig+0xfe>
    switch (PeriphClkInit->Sai4AClockSelection)
 8005616:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 800561a:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 800561e:	f000 8521 	beq.w	8006064 <HAL_RCCEx_PeriphCLKConfig+0xb08>
 8005622:	f200 80e1 	bhi.w	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8005626:	2900      	cmp	r1, #0
 8005628:	f000 8418 	beq.w	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x900>
 800562c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8005630:	f040 80e2 	bne.w	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005634:	2100      	movs	r1, #0
 8005636:	f104 0008 	add.w	r0, r4, #8
 800563a:	f7ff fe9b 	bl	8005374 <RCCEx_PLL2_Config>
 800563e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005640:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005644:	2d00      	cmp	r5, #0
 8005646:	f040 83e2 	bne.w	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x8b2>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800564a:	4f86      	ldr	r7, [pc, #536]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800564c:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 8005650:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005652:	f421 0160 	bic.w	r1, r1, #14680064	; 0xe00000
 8005656:	4301      	orrs	r1, r0
 8005658:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800565a:	0518      	lsls	r0, r3, #20
 800565c:	d521      	bpl.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    switch (PeriphClkInit->Sai4BClockSelection)
 800565e:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8005662:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 8005666:	f000 84bd 	beq.w	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
 800566a:	f200 80c8 	bhi.w	80057fe <HAL_RCCEx_PeriphCLKConfig+0x2a2>
 800566e:	2900      	cmp	r1, #0
 8005670:	f000 83e7 	beq.w	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 8005674:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8005678:	f040 80c9 	bne.w	800580e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800567c:	2100      	movs	r1, #0
 800567e:	f104 0008 	add.w	r0, r4, #8
 8005682:	f7ff fe77 	bl	8005374 <RCCEx_PLL2_Config>
 8005686:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005688:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800568c:	2d00      	cmp	r5, #0
 800568e:	f040 83b5 	bne.w	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x8a0>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005692:	4f74      	ldr	r7, [pc, #464]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005694:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8005698:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800569a:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
 800569e:	4301      	orrs	r1, r0
 80056a0:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80056a2:	0199      	lsls	r1, r3, #6
 80056a4:	d518      	bpl.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    switch (PeriphClkInit->QspiClockSelection)
 80056a6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80056a8:	2920      	cmp	r1, #32
 80056aa:	f000 841f 	beq.w	8005eec <HAL_RCCEx_PeriphCLKConfig+0x990>
 80056ae:	f200 80b1 	bhi.w	8005814 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80056b2:	b139      	cbz	r1, 80056c4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80056b4:	2910      	cmp	r1, #16
 80056b6:	f040 80b0 	bne.w	800581a <HAL_RCCEx_PeriphCLKConfig+0x2be>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056ba:	486a      	ldr	r0, [pc, #424]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80056bc:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80056be:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80056c2:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 80056c4:	2d00      	cmp	r5, #0
 80056c6:	f040 83d8 	bne.w	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x91e>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80056ca:	4f66      	ldr	r7, [pc, #408]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80056cc:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80056ce:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80056d0:	f021 0130 	bic.w	r1, r1, #48	; 0x30
 80056d4:	4301      	orrs	r1, r0
 80056d6:	64f9      	str	r1, [r7, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80056d8:	04df      	lsls	r7, r3, #19
 80056da:	d51f      	bpl.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    switch (PeriphClkInit->Spi123ClockSelection)
 80056dc:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80056de:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 80056e2:	f000 84b5 	beq.w	8006050 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
 80056e6:	f200 809b 	bhi.w	8005820 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 80056ea:	2900      	cmp	r1, #0
 80056ec:	f000 83a3 	beq.w	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x8da>
 80056f0:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80056f4:	f040 809c 	bne.w	8005830 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056f8:	2100      	movs	r1, #0
 80056fa:	f104 0008 	add.w	r0, r4, #8
 80056fe:	f7ff fe39 	bl	8005374 <RCCEx_PLL2_Config>
 8005702:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005704:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005708:	2d00      	cmp	r5, #0
 800570a:	f040 837b 	bne.w	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800570e:	4f55      	ldr	r7, [pc, #340]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005710:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8005712:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005714:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8005718:	4301      	orrs	r1, r0
 800571a:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800571c:	0498      	lsls	r0, r3, #18
 800571e:	d51d      	bpl.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x200>
    switch (PeriphClkInit->Spi45ClockSelection)
 8005720:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8005722:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8005726:	f000 8410 	beq.w	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 800572a:	f200 8084 	bhi.w	8005836 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800572e:	b159      	cbz	r1, 8005748 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8005730:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8005734:	f040 8087 	bne.w	8005846 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005738:	2101      	movs	r1, #1
 800573a:	f104 0008 	add.w	r0, r4, #8
 800573e:	f7ff fe19 	bl	8005374 <RCCEx_PLL2_Config>
 8005742:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005744:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005748:	2d00      	cmp	r5, #0
 800574a:	f040 839a 	bne.w	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x926>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800574e:	4f45      	ldr	r7, [pc, #276]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005750:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8005752:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005754:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 8005758:	4301      	orrs	r1, r0
 800575a:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800575c:	0459      	lsls	r1, r3, #17
 800575e:	d51d      	bpl.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x240>
    switch (PeriphClkInit->Spi6ClockSelection)
 8005760:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 8005764:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8005768:	f000 83fb 	beq.w	8005f62 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 800576c:	d86e      	bhi.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 800576e:	b151      	cbz	r1, 8005786 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005770:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8005774:	d172      	bne.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x300>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005776:	2101      	movs	r1, #1
 8005778:	f104 0008 	add.w	r0, r4, #8
 800577c:	f7ff fdfa 	bl	8005374 <RCCEx_PLL2_Config>
 8005780:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005782:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005786:	2d00      	cmp	r5, #0
 8005788:	f040 837f 	bne.w	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x92e>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800578c:	4f35      	ldr	r7, [pc, #212]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800578e:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8005792:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005794:	f021 41e0 	bic.w	r1, r1, #1879048192	; 0x70000000
 8005798:	4301      	orrs	r1, r0
 800579a:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800579c:	041f      	lsls	r7, r3, #16
 800579e:	d50d      	bpl.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x260>
    switch (PeriphClkInit->FdcanClockSelection)
 80057a0:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80057a2:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 80057a6:	f000 83c8 	beq.w	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80057aa:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 80057ae:	f000 823b 	beq.w	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 80057b2:	2900      	cmp	r1, #0
 80057b4:	f000 8240 	beq.w	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 80057b8:	2601      	movs	r6, #1
 80057ba:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80057bc:	01d8      	lsls	r0, r3, #7
 80057be:	d562      	bpl.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x32a>
    switch (PeriphClkInit->FmcClockSelection)
 80057c0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80057c2:	2903      	cmp	r1, #3
 80057c4:	f200 84bf 	bhi.w	8006146 <HAL_RCCEx_PeriphCLKConfig+0xbea>
 80057c8:	e8df f011 	tbh	[pc, r1, lsl #1]
 80057cc:	004e0053 	.word	0x004e0053
 80057d0:	005303e2 	.word	0x005303e2
    switch (PeriphClkInit->Sai23ClockSelection)
 80057d4:	29c0      	cmp	r1, #192	; 0xc0
 80057d6:	f43f af12 	beq.w	80055fe <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80057da:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80057de:	f43f af0e 	beq.w	80055fe <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80057e2:	2601      	movs	r6, #1
 80057e4:	4635      	mov	r5, r6
 80057e6:	e714      	b.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    switch (PeriphClkInit->Sai4AClockSelection)
 80057e8:	f5b1 0fc0 	cmp.w	r1, #6291456	; 0x600000
 80057ec:	f43f af2a 	beq.w	8005644 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80057f0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80057f4:	f43f af26 	beq.w	8005644 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80057f8:	2601      	movs	r6, #1
 80057fa:	4635      	mov	r5, r6
 80057fc:	e72d      	b.n	800565a <HAL_RCCEx_PeriphCLKConfig+0xfe>
    switch (PeriphClkInit->Sai4BClockSelection)
 80057fe:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8005802:	f43f af43 	beq.w	800568c <HAL_RCCEx_PeriphCLKConfig+0x130>
 8005806:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800580a:	f43f af3f 	beq.w	800568c <HAL_RCCEx_PeriphCLKConfig+0x130>
 800580e:	2601      	movs	r6, #1
 8005810:	4635      	mov	r5, r6
 8005812:	e746      	b.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    switch (PeriphClkInit->QspiClockSelection)
 8005814:	2930      	cmp	r1, #48	; 0x30
 8005816:	f43f af55 	beq.w	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800581a:	2601      	movs	r6, #1
 800581c:	4635      	mov	r5, r6
 800581e:	e75b      	b.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    switch (PeriphClkInit->Spi123ClockSelection)
 8005820:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
 8005824:	f43f af70 	beq.w	8005708 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 8005828:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800582c:	f43f af6c 	beq.w	8005708 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 8005830:	2601      	movs	r6, #1
 8005832:	4635      	mov	r5, r6
 8005834:	e772      	b.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    switch (PeriphClkInit->Spi45ClockSelection)
 8005836:	f421 3080 	bic.w	r0, r1, #65536	; 0x10000
 800583a:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 800583e:	d083      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8005840:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 8005844:	d080      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8005846:	2601      	movs	r6, #1
 8005848:	4635      	mov	r5, r6
 800584a:	e787      	b.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x200>
    switch (PeriphClkInit->Spi6ClockSelection)
 800584c:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 8005850:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005854:	d097      	beq.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005856:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 800585a:	d094      	beq.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800585c:	2601      	movs	r6, #1
 800585e:	4635      	mov	r5, r6
 8005860:	e79c      	b.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x240>
 8005862:	bf00      	nop
 8005864:	58024400 	.word	0x58024400
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005868:	4839      	ldr	r0, [pc, #228]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800586a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800586c:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8005870:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 8005872:	2d00      	cmp	r5, #0
 8005874:	f040 8303 	bne.w	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x922>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005878:	4f35      	ldr	r7, [pc, #212]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800587a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800587c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800587e:	f021 0103 	bic.w	r1, r1, #3
 8005882:	4301      	orrs	r1, r0
 8005884:	64f9      	str	r1, [r7, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005886:	0259      	lsls	r1, r3, #9
 8005888:	f100 826a 	bmi.w	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x804>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800588c:	07d8      	lsls	r0, r3, #31
 800588e:	d52f      	bpl.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x394>
    switch (PeriphClkInit->Usart16ClockSelection)
 8005890:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8005892:	2928      	cmp	r1, #40	; 0x28
 8005894:	d82a      	bhi.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x390>
 8005896:	e8df f011 	tbh	[pc, r1, lsl #1]
 800589a:	020a      	.short	0x020a
 800589c:	00290029 	.word	0x00290029
 80058a0:	00290029 	.word	0x00290029
 80058a4:	00290029 	.word	0x00290029
 80058a8:	02020029 	.word	0x02020029
 80058ac:	00290029 	.word	0x00290029
 80058b0:	00290029 	.word	0x00290029
 80058b4:	00290029 	.word	0x00290029
 80058b8:	04070029 	.word	0x04070029
 80058bc:	00290029 	.word	0x00290029
 80058c0:	00290029 	.word	0x00290029
 80058c4:	00290029 	.word	0x00290029
 80058c8:	020a0029 	.word	0x020a0029
 80058cc:	00290029 	.word	0x00290029
 80058d0:	00290029 	.word	0x00290029
 80058d4:	00290029 	.word	0x00290029
 80058d8:	020a0029 	.word	0x020a0029
 80058dc:	00290029 	.word	0x00290029
 80058e0:	00290029 	.word	0x00290029
 80058e4:	00290029 	.word	0x00290029
 80058e8:	020a0029 	.word	0x020a0029
 80058ec:	2601      	movs	r6, #1
 80058ee:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80058f0:	0799      	lsls	r1, r3, #30
 80058f2:	d51d      	bpl.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    switch (PeriphClkInit->Usart234578ClockSelection)
 80058f4:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80058f6:	2905      	cmp	r1, #5
 80058f8:	f200 8421 	bhi.w	800613e <HAL_RCCEx_PeriphCLKConfig+0xbe2>
 80058fc:	e8df f011 	tbh	[pc, r1, lsl #1]
 8005900:	0006000e 	.word	0x0006000e
 8005904:	000e03c8 	.word	0x000e03c8
 8005908:	000e000e 	.word	0x000e000e
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800590c:	2101      	movs	r1, #1
 800590e:	f104 0008 	add.w	r0, r4, #8
 8005912:	f7ff fd2f 	bl	8005374 <RCCEx_PLL2_Config>
 8005916:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005918:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800591c:	2d00      	cmp	r5, #0
 800591e:	f040 82b8 	bne.w	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x936>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005922:	4f0b      	ldr	r7, [pc, #44]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005924:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8005926:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005928:	f021 0107 	bic.w	r1, r1, #7
 800592c:	4301      	orrs	r1, r0
 800592e:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005930:	075f      	lsls	r7, r3, #29
 8005932:	d522      	bpl.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x41e>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005934:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8005938:	2905      	cmp	r1, #5
 800593a:	f200 8408 	bhi.w	800614e <HAL_RCCEx_PeriphCLKConfig+0xbf2>
 800593e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8005942:	0011      	.short	0x0011
 8005944:	039b0009 	.word	0x039b0009
 8005948:	00110011 	.word	0x00110011
 800594c:	0011      	.short	0x0011
 800594e:	bf00      	nop
 8005950:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005954:	2101      	movs	r1, #1
 8005956:	f104 0008 	add.w	r0, r4, #8
 800595a:	f7ff fd0b 	bl	8005374 <RCCEx_PLL2_Config>
 800595e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005960:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005964:	2d00      	cmp	r5, #0
 8005966:	f040 8286 	bne.w	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x91a>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800596a:	4fae      	ldr	r7, [pc, #696]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800596c:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 8005970:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005972:	f021 0107 	bic.w	r1, r1, #7
 8005976:	4301      	orrs	r1, r0
 8005978:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800597a:	0698      	lsls	r0, r3, #26
 800597c:	d51f      	bpl.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x462>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800597e:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8005982:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8005986:	f000 82f7 	beq.w	8005f78 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
 800598a:	f200 810b 	bhi.w	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x648>
 800598e:	b159      	cbz	r1, 80059a8 <HAL_RCCEx_PeriphCLKConfig+0x44c>
 8005990:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8005994:	f040 8110 	bne.w	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005998:	2100      	movs	r1, #0
 800599a:	f104 0008 	add.w	r0, r4, #8
 800599e:	f7ff fce9 	bl	8005374 <RCCEx_PLL2_Config>
 80059a2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80059a4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80059a8:	2d00      	cmp	r5, #0
 80059aa:	f040 8260 	bne.w	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x912>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80059ae:	4f9d      	ldr	r7, [pc, #628]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80059b0:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 80059b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80059b6:	f021 41e0 	bic.w	r1, r1, #1879048192	; 0x70000000
 80059ba:	4301      	orrs	r1, r0
 80059bc:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80059be:	0659      	lsls	r1, r3, #25
 80059c0:	d51f      	bpl.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    switch (PeriphClkInit->Lptim2ClockSelection)
 80059c2:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 80059c6:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 80059ca:	f000 829b 	beq.w	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
 80059ce:	f200 80f6 	bhi.w	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x662>
 80059d2:	b159      	cbz	r1, 80059ec <HAL_RCCEx_PeriphCLKConfig+0x490>
 80059d4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80059d8:	f040 80fb 	bne.w	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x676>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80059dc:	2100      	movs	r1, #0
 80059de:	f104 0008 	add.w	r0, r4, #8
 80059e2:	f7ff fcc7 	bl	8005374 <RCCEx_PLL2_Config>
 80059e6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80059e8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80059ec:	2d00      	cmp	r5, #0
 80059ee:	f040 824e 	bne.w	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x932>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80059f2:	4f8c      	ldr	r7, [pc, #560]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80059f4:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 80059f8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80059fa:	f421 51e0 	bic.w	r1, r1, #7168	; 0x1c00
 80059fe:	4301      	orrs	r1, r0
 8005a00:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005a02:	061f      	lsls	r7, r3, #24
 8005a04:	d51f      	bpl.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005a06:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8005a0a:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8005a0e:	f000 8289 	beq.w	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x9c8>
 8005a12:	f200 80e1 	bhi.w	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x67c>
 8005a16:	b159      	cbz	r1, 8005a30 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8005a18:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8005a1c:	f040 80e6 	bne.w	8005bec <HAL_RCCEx_PeriphCLKConfig+0x690>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a20:	2100      	movs	r1, #0
 8005a22:	f104 0008 	add.w	r0, r4, #8
 8005a26:	f7ff fca5 	bl	8005374 <RCCEx_PLL2_Config>
 8005a2a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005a2c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005a30:	2d00      	cmp	r5, #0
 8005a32:	f040 8228 	bne.w	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x92a>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005a36:	4f7b      	ldr	r7, [pc, #492]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005a38:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 8005a3c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005a3e:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 8005a42:	4301      	orrs	r1, r0
 8005a44:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005a46:	0718      	lsls	r0, r3, #28
 8005a48:	d50b      	bpl.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x506>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005a4a:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8005a4e:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8005a52:	f000 82a9 	beq.w	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005a56:	4f73      	ldr	r7, [pc, #460]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005a58:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005a5a:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8005a5e:	4301      	orrs	r1, r0
 8005a60:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005a62:	06d9      	lsls	r1, r3, #27
 8005a64:	d50b      	bpl.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x522>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005a66:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 8005a6a:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8005a6e:	f000 82a8 	beq.w	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005a72:	4f6c      	ldr	r7, [pc, #432]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005a74:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005a76:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8005a7a:	4301      	orrs	r1, r0
 8005a7c:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005a7e:	031f      	lsls	r7, r3, #12
 8005a80:	d50e      	bpl.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    switch (PeriphClkInit->AdcClockSelection)
 8005a82:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8005a86:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8005a8a:	f000 80f4 	beq.w	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x71a>
 8005a8e:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8005a92:	f000 80f8 	beq.w	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x72a>
 8005a96:	2900      	cmp	r1, #0
 8005a98:	f000 821c 	beq.w	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x978>
 8005a9c:	2601      	movs	r6, #1
 8005a9e:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005aa0:	0358      	lsls	r0, r3, #13
 8005aa2:	d50f      	bpl.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x568>
    switch (PeriphClkInit->UsbClockSelection)
 8005aa4:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8005aa8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8005aac:	f000 80cf 	beq.w	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005ab0:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 8005ab4:	f000 80d3 	beq.w	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x702>
 8005ab8:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8005abc:	f000 8202 	beq.w	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8005ac0:	2601      	movs	r6, #1
 8005ac2:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005ac4:	03d9      	lsls	r1, r3, #15
 8005ac6:	d509      	bpl.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x580>
    switch (PeriphClkInit->SdmmcClockSelection)
 8005ac8:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8005aca:	2900      	cmp	r1, #0
 8005acc:	f000 81f1 	beq.w	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x956>
 8005ad0:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8005ad4:	f000 819d 	beq.w	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x8b6>
 8005ad8:	2601      	movs	r6, #1
 8005ada:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005adc:	009f      	lsls	r7, r3, #2
 8005ade:	f100 80f1 	bmi.w	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x768>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005ae2:	0398      	lsls	r0, r3, #14
 8005ae4:	d50c      	bpl.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
    switch (PeriphClkInit->RngClockSelection)
 8005ae6:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8005aea:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8005aee:	f000 81d8 	beq.w	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x946>
 8005af2:	d97e      	bls.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x696>
 8005af4:	f421 7080 	bic.w	r0, r1, #256	; 0x100
 8005af8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8005afc:	d07b      	beq.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x69a>
 8005afe:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005b00:	02d9      	lsls	r1, r3, #11
 8005b02:	d506      	bpl.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005b04:	4847      	ldr	r0, [pc, #284]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005b06:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8005b08:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8005b0a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005b0e:	4329      	orrs	r1, r5
 8005b10:	6501      	str	r1, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005b12:	00df      	lsls	r7, r3, #3
 8005b14:	d507      	bpl.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005b16:	4843      	ldr	r0, [pc, #268]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005b18:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 8005b1c:	6901      	ldr	r1, [r0, #16]
 8005b1e:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8005b22:	4329      	orrs	r1, r5
 8005b24:	6101      	str	r1, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005b26:	029d      	lsls	r5, r3, #10
 8005b28:	d506      	bpl.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005b2a:	483e      	ldr	r0, [pc, #248]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005b2c:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8005b2e:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8005b30:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8005b34:	4329      	orrs	r1, r5
 8005b36:	6501      	str	r1, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005b38:	0058      	lsls	r0, r3, #1
 8005b3a:	d509      	bpl.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005b3c:	4939      	ldr	r1, [pc, #228]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005b3e:	6908      	ldr	r0, [r1, #16]
 8005b40:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 8005b44:	6108      	str	r0, [r1, #16]
 8005b46:	6908      	ldr	r0, [r1, #16]
 8005b48:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
 8005b4c:	4328      	orrs	r0, r5
 8005b4e:	6108      	str	r0, [r1, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	da06      	bge.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x606>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005b54:	4833      	ldr	r0, [pc, #204]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005b56:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8005b58:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8005b5a:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8005b5e:	4329      	orrs	r1, r5
 8005b60:	64c1      	str	r1, [r0, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005b62:	0219      	lsls	r1, r3, #8
 8005b64:	d507      	bpl.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x61a>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005b66:	492f      	ldr	r1, [pc, #188]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005b68:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8005b6c:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8005b6e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8005b72:	4303      	orrs	r3, r0
 8005b74:	654b      	str	r3, [r1, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005b76:	07d3      	lsls	r3, r2, #31
 8005b78:	f100 80b0 	bmi.w	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x780>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005b7c:	0797      	lsls	r7, r2, #30
 8005b7e:	f100 80ba 	bmi.w	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x79a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005b82:	0755      	lsls	r5, r2, #29
 8005b84:	f100 80c4 	bmi.w	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005b88:	0710      	lsls	r0, r2, #28
 8005b8a:	f100 80ce 	bmi.w	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005b8e:	06d1      	lsls	r1, r2, #27
 8005b90:	f100 80d8 	bmi.w	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x7e8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005b94:	0692      	lsls	r2, r2, #26
 8005b96:	f100 8125 	bmi.w	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x888>
    return HAL_OK;
 8005b9a:	1e30      	subs	r0, r6, #0
 8005b9c:	bf18      	it	ne
 8005b9e:	2001      	movne	r0, #1
}
 8005ba0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005ba4:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 8005ba8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005bac:	f43f aefc 	beq.w	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x44c>
 8005bb0:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 8005bb4:	f43f aef8 	beq.w	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x44c>
 8005bb8:	2601      	movs	r6, #1
 8005bba:	4635      	mov	r5, r6
 8005bbc:	e6ff      	b.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x462>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005bbe:	f421 6080 	bic.w	r0, r1, #1024	; 0x400
 8005bc2:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8005bc6:	f43f af11 	beq.w	80059ec <HAL_RCCEx_PeriphCLKConfig+0x490>
 8005bca:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
 8005bce:	f43f af0d 	beq.w	80059ec <HAL_RCCEx_PeriphCLKConfig+0x490>
 8005bd2:	2601      	movs	r6, #1
 8005bd4:	4635      	mov	r5, r6
 8005bd6:	e714      	b.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005bd8:	f421 5000 	bic.w	r0, r1, #8192	; 0x2000
 8005bdc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005be0:	f43f af26 	beq.w	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8005be4:	f5b1 4fc0 	cmp.w	r1, #24576	; 0x6000
 8005be8:	f43f af22 	beq.w	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8005bec:	2601      	movs	r6, #1
 8005bee:	4635      	mov	r5, r6
 8005bf0:	e729      	b.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
    switch (PeriphClkInit->RngClockSelection)
 8005bf2:	2900      	cmp	r1, #0
 8005bf4:	d183      	bne.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
    if (ret == HAL_OK)
 8005bf6:	2d00      	cmp	r5, #0
 8005bf8:	f040 8151 	bne.w	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x942>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005bfc:	4d09      	ldr	r5, [pc, #36]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005bfe:	6d68      	ldr	r0, [r5, #84]	; 0x54
 8005c00:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8005c04:	4301      	orrs	r1, r0
 8005c06:	6569      	str	r1, [r5, #84]	; 0x54
 8005c08:	e77a      	b.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
    switch (PeriphClkInit->Sai1ClockSelection)
 8005c0a:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 8005c0c:	2d00      	cmp	r5, #0
 8005c0e:	f040 80fb 	bne.w	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005c12:	4f04      	ldr	r7, [pc, #16]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005c14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c16:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005c18:	f021 0107 	bic.w	r1, r1, #7
 8005c1c:	4301      	orrs	r1, r0
 8005c1e:	6539      	str	r1, [r7, #80]	; 0x50
 8005c20:	e4d7      	b.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005c22:	bf00      	nop
 8005c24:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c28:	2101      	movs	r1, #1
 8005c2a:	f104 0008 	add.w	r0, r4, #8
 8005c2e:	f7ff fba1 	bl	8005374 <RCCEx_PLL2_Config>
 8005c32:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005c34:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005c38:	2d00      	cmp	r5, #0
 8005c3a:	f040 811a 	bne.w	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x916>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005c3e:	4fb7      	ldr	r7, [pc, #732]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8005c40:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8005c42:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005c44:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8005c48:	4301      	orrs	r1, r0
 8005c4a:	6539      	str	r1, [r7, #80]	; 0x50
 8005c4c:	e5b6      	b.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x260>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c4e:	2101      	movs	r1, #1
 8005c50:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005c54:	f7ff fc08 	bl	8005468 <RCCEx_PLL3_Config>
 8005c58:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005c5a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005c5e:	2d00      	cmp	r5, #0
 8005c60:	f040 811b 	bne.w	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x93e>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005c64:	4fad      	ldr	r7, [pc, #692]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8005c66:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8005c6a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c6c:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8005c70:	4301      	orrs	r1, r0
 8005c72:	6579      	str	r1, [r7, #84]	; 0x54
 8005c74:	e726      	b.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x568>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005c76:	2102      	movs	r1, #2
 8005c78:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005c7c:	f7ff fbf4 	bl	8005468 <RCCEx_PLL3_Config>
 8005c80:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005c82:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005c86:	2d00      	cmp	r5, #0
 8005c88:	f040 8105 	bne.w	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x93a>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005c8c:	4fa3      	ldr	r7, [pc, #652]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8005c8e:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 8005c92:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005c94:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 8005c98:	4301      	orrs	r1, r0
 8005c9a:	65b9      	str	r1, [r7, #88]	; 0x58
 8005c9c:	e700      	b.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x544>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c9e:	2101      	movs	r1, #1
 8005ca0:	f104 0008 	add.w	r0, r4, #8
 8005ca4:	f7ff fb66 	bl	8005374 <RCCEx_PLL2_Config>
 8005ca8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005caa:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005cae:	2d00      	cmp	r5, #0
 8005cb0:	f040 80db 	bne.w	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x90e>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005cb4:	4f99      	ldr	r7, [pc, #612]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8005cb6:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8005cb8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005cba:	f021 0138 	bic.w	r1, r1, #56	; 0x38
 8005cbe:	4301      	orrs	r1, r0
 8005cc0:	6579      	str	r1, [r7, #84]	; 0x54
 8005cc2:	e615      	b.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x394>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005cc4:	2102      	movs	r1, #2
 8005cc6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005cca:	f7ff fbcd 	bl	8005468 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005cce:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005cd2:	2800      	cmp	r0, #0
 8005cd4:	f43f af05 	beq.w	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x586>
      status = HAL_ERROR;
 8005cd8:	2601      	movs	r6, #1
 8005cda:	e702      	b.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x586>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005cdc:	2100      	movs	r1, #0
 8005cde:	f104 0008 	add.w	r0, r4, #8
 8005ce2:	f7ff fb47 	bl	8005374 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005ce6:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8005ce8:	2800      	cmp	r0, #0
 8005cea:	f43f af47 	beq.w	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x620>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005cee:	0797      	lsls	r7, r2, #30
 8005cf0:	4606      	mov	r6, r0
 8005cf2:	f57f af46 	bpl.w	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x626>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005cf6:	2101      	movs	r1, #1
 8005cf8:	f104 0008 	add.w	r0, r4, #8
 8005cfc:	f7ff fb3a 	bl	8005374 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005d00:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8005d02:	2800      	cmp	r0, #0
 8005d04:	f43f af3d 	beq.w	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x626>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005d08:	0755      	lsls	r5, r2, #29
 8005d0a:	4606      	mov	r6, r0
 8005d0c:	f57f af3c 	bpl.w	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005d10:	2102      	movs	r1, #2
 8005d12:	f104 0008 	add.w	r0, r4, #8
 8005d16:	f7ff fb2d 	bl	8005374 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005d1a:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8005d1c:	2800      	cmp	r0, #0
 8005d1e:	f43f af33 	beq.w	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005d22:	4606      	mov	r6, r0
 8005d24:	0710      	lsls	r0, r2, #28
 8005d26:	f57f af32 	bpl.w	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x632>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d2a:	2100      	movs	r1, #0
 8005d2c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005d30:	f7ff fb9a 	bl	8005468 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005d34:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8005d36:	2800      	cmp	r0, #0
 8005d38:	f43f af29 	beq.w	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x632>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005d3c:	06d1      	lsls	r1, r2, #27
 8005d3e:	4606      	mov	r6, r0
 8005d40:	f57f af28 	bpl.w	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x638>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d44:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8005d48:	2101      	movs	r1, #1
 8005d4a:	4628      	mov	r0, r5
 8005d4c:	f7ff fb8c 	bl	8005468 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8005d50:	2800      	cmp	r0, #0
 8005d52:	f000 80c9 	beq.w	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005d56:	6863      	ldr	r3, [r4, #4]
 8005d58:	069b      	lsls	r3, r3, #26
 8005d5a:	d54c      	bpl.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x89a>
 8005d5c:	4606      	mov	r6, r0
 8005d5e:	e043      	b.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d60:	4f6f      	ldr	r7, [pc, #444]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d68:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8005d6a:	f7fb fe87 	bl	8001a7c <HAL_GetTick>
 8005d6e:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d70:	e006      	b.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x824>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d72:	f7fb fe83 	bl	8001a7c <HAL_GetTick>
 8005d76:	eba0 0008 	sub.w	r0, r0, r8
 8005d7a:	2864      	cmp	r0, #100	; 0x64
 8005d7c:	f200 81a0 	bhi.w	80060c0 <HAL_RCCEx_PeriphCLKConfig+0xb64>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	05da      	lsls	r2, r3, #23
 8005d84:	d5f5      	bpl.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x816>
    if (ret == HAL_OK)
 8005d86:	2d00      	cmp	r5, #0
 8005d88:	f040 81d4 	bne.w	8006134 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005d8c:	4a63      	ldr	r2, [pc, #396]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8005d8e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 8005d92:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8005d94:	4059      	eors	r1, r3
 8005d96:	f411 7f40 	tst.w	r1, #768	; 0x300
 8005d9a:	d00b      	beq.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x858>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d9c:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8005d9e:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005da0:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8005da4:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8005da8:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005daa:	6f10      	ldr	r0, [r2, #112]	; 0x70
 8005dac:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8005db0:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8005db2:	6711      	str	r1, [r2, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005db4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005db8:	f000 819e 	beq.w	80060f8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005dbc:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8005dc0:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8005dc4:	f000 81ac 	beq.w	8006120 <HAL_RCCEx_PeriphCLKConfig+0xbc4>
 8005dc8:	4954      	ldr	r1, [pc, #336]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8005dca:	690a      	ldr	r2, [r1, #16]
 8005dcc:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8005dd0:	610a      	str	r2, [r1, #16]
 8005dd2:	4852      	ldr	r0, [pc, #328]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8005dd4:	f3c3 010b 	ubfx	r1, r3, #0, #12
 8005dd8:	6f07      	ldr	r7, [r0, #112]	; 0x70
 8005dda:	4339      	orrs	r1, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005ddc:	e9d4 3200 	ldrd	r3, r2, [r4]
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005de0:	6701      	str	r1, [r0, #112]	; 0x70
 8005de2:	e553      	b.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x330>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005de4:	f104 0528 	add.w	r5, r4, #40	; 0x28
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005de8:	2102      	movs	r1, #2
 8005dea:	4628      	mov	r0, r5
 8005dec:	f7ff fb3c 	bl	8005468 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8005df0:	2800      	cmp	r0, #0
 8005df2:	f43f aed2 	beq.w	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x63e>
  return HAL_ERROR;
 8005df6:	2001      	movs	r0, #1
}
 8005df8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005dfc:	462e      	mov	r6, r5
 8005dfe:	e450      	b.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x146>
 8005e00:	462e      	mov	r6, r5
 8005e02:	e406      	b.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0xb6>
 8005e04:	462e      	mov	r6, r5
 8005e06:	e489      	b.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8005e08:	462e      	mov	r6, r5
 8005e0a:	f7ff bbe2 	b.w	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005e0e:	462e      	mov	r6, r5
 8005e10:	e423      	b.n	800565a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005e12:	2102      	movs	r1, #2
 8005e14:	f104 0008 	add.w	r0, r4, #8
 8005e18:	f7ff faac 	bl	8005374 <RCCEx_PLL2_Config>
 8005e1c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005e1e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005e22:	2d00      	cmp	r5, #0
 8005e24:	d14c      	bne.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x964>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005e26:	4f3d      	ldr	r7, [pc, #244]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8005e28:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8005e2a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005e2c:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8005e30:	4301      	orrs	r1, r0
 8005e32:	64f9      	str	r1, [r7, #76]	; 0x4c
 8005e34:	e652      	b.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x580>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e36:	4839      	ldr	r0, [pc, #228]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8005e38:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005e3a:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8005e3e:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 8005e40:	e462      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e42:	4836      	ldr	r0, [pc, #216]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8005e44:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005e46:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8005e4a:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 8005e4c:	e41e      	b.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x130>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e4e:	4833      	ldr	r0, [pc, #204]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8005e50:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005e52:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8005e56:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 8005e58:	f7ff bbd1 	b.w	80055fe <HAL_RCCEx_PeriphCLKConfig+0xa2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e5c:	482f      	ldr	r0, [pc, #188]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8005e5e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005e60:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8005e64:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 8005e66:	f7ff bbed 	b.w	8005644 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005e6a:	462e      	mov	r6, r5
 8005e6c:	e540      	b.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x394>
 8005e6e:	462e      	mov	r6, r5
 8005e70:	e5a5      	b.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x462>
 8005e72:	462e      	mov	r6, r5
 8005e74:	e4a2      	b.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x260>
 8005e76:	462e      	mov	r6, r5
 8005e78:	e57f      	b.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x41e>
 8005e7a:	462e      	mov	r6, r5
 8005e7c:	e42c      	b.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005e7e:	462e      	mov	r6, r5
 8005e80:	e501      	b.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8005e82:	462e      	mov	r6, r5
 8005e84:	e46a      	b.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005e86:	462e      	mov	r6, r5
 8005e88:	e5dd      	b.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 8005e8a:	462e      	mov	r6, r5
 8005e8c:	e486      	b.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x240>
 8005e8e:	462e      	mov	r6, r5
 8005e90:	e5b7      	b.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005e92:	462e      	mov	r6, r5
 8005e94:	e54c      	b.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
 8005e96:	462e      	mov	r6, r5
 8005e98:	e602      	b.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x544>
 8005e9a:	462e      	mov	r6, r5
 8005e9c:	e612      	b.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x568>
 8005e9e:	462e      	mov	r6, r5
 8005ea0:	e62e      	b.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ea2:	4f1e      	ldr	r7, [pc, #120]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8005ea4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005ea6:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8005eaa:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (ret == HAL_OK)
 8005eac:	2d00      	cmp	r5, #0
 8005eae:	d1f6      	bne.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x942>
 8005eb0:	e6a4      	b.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005eb2:	481a      	ldr	r0, [pc, #104]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8005eb4:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005eb6:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8005eba:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 8005ebc:	2d00      	cmp	r5, #0
 8005ebe:	d0b2      	beq.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
 8005ec0:	462e      	mov	r6, r5
 8005ec2:	e60b      	b.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x580>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ec4:	4815      	ldr	r0, [pc, #84]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8005ec6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005ec8:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8005ecc:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 8005ece:	2d00      	cmp	r5, #0
 8005ed0:	d1e3      	bne.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8005ed2:	e6c7      	b.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x708>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ed4:	f104 0008 	add.w	r0, r4, #8
 8005ed8:	f7ff fa4c 	bl	8005374 <RCCEx_PLL2_Config>
 8005edc:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005ede:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005ee2:	2d00      	cmp	r5, #0
 8005ee4:	d1d7      	bne.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x93a>
 8005ee6:	e6d1      	b.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x730>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005ee8:	6862      	ldr	r2, [r4, #4]
 8005eea:	e653      	b.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x638>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005eec:	2102      	movs	r1, #2
 8005eee:	f104 0008 	add.w	r0, r4, #8
 8005ef2:	f7ff fa3f 	bl	8005374 <RCCEx_PLL2_Config>
 8005ef6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005ef8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005efc:	2d00      	cmp	r5, #0
 8005efe:	d1bc      	bne.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x91e>
 8005f00:	f7ff bbe3 	b.w	80056ca <HAL_RCCEx_PeriphCLKConfig+0x16e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005f04:	2102      	movs	r1, #2
 8005f06:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005f0a:	f7ff faad 	bl	8005468 <RCCEx_PLL3_Config>
 8005f0e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005f10:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005f14:	2d00      	cmp	r5, #0
 8005f16:	d1ba      	bne.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x932>
 8005f18:	e56b      	b.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8005f1a:	bf00      	nop
 8005f1c:	58024400 	.word	0x58024400
 8005f20:	58024800 	.word	0x58024800
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005f24:	2102      	movs	r1, #2
 8005f26:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005f2a:	f7ff fa9d 	bl	8005468 <RCCEx_PLL3_Config>
 8005f2e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005f30:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005f34:	2d00      	cmp	r5, #0
 8005f36:	d1a6      	bne.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x92a>
 8005f38:	e57d      	b.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x4da>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f3a:	4886      	ldr	r0, [pc, #536]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0xbf8>)
 8005f3c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005f3e:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8005f42:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 8005f44:	2d00      	cmp	r5, #0
 8005f46:	d194      	bne.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x916>
 8005f48:	e679      	b.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f4a:	2101      	movs	r1, #1
 8005f4c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005f50:	f7ff fa8a 	bl	8005468 <RCCEx_PLL3_Config>
 8005f54:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005f56:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005f5a:	2d00      	cmp	r5, #0
 8005f5c:	d191      	bne.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x926>
 8005f5e:	f7ff bbf6 	b.w	800574e <HAL_RCCEx_PeriphCLKConfig+0x1f2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f62:	2101      	movs	r1, #1
 8005f64:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005f68:	f7ff fa7e 	bl	8005468 <RCCEx_PLL3_Config>
 8005f6c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005f6e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005f72:	2d00      	cmp	r5, #0
 8005f74:	d189      	bne.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x92e>
 8005f76:	e409      	b.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x230>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005f78:	2102      	movs	r1, #2
 8005f7a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005f7e:	f7ff fa73 	bl	8005468 <RCCEx_PLL3_Config>
 8005f82:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005f84:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005f88:	2d00      	cmp	r5, #0
 8005f8a:	f47f af70 	bne.w	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x912>
 8005f8e:	e50e      	b.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x452>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005f90:	2102      	movs	r1, #2
 8005f92:	f104 0008 	add.w	r0, r4, #8
 8005f96:	f7ff f9ed 	bl	8005374 <RCCEx_PLL2_Config>
 8005f9a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005f9c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005fa0:	2d00      	cmp	r5, #0
 8005fa2:	f47f af6c 	bne.w	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x922>
 8005fa6:	e467      	b.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005fa8:	2102      	movs	r1, #2
 8005faa:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005fae:	f7ff fa5b 	bl	8005468 <RCCEx_PLL3_Config>
 8005fb2:	2800      	cmp	r0, #0
 8005fb4:	f040 8094 	bne.w	80060e0 <HAL_RCCEx_PeriphCLKConfig+0xb84>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005fb8:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005fbc:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005fc0:	e549      	b.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005fc2:	2102      	movs	r1, #2
 8005fc4:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005fc8:	f7ff fa4e 	bl	8005468 <RCCEx_PLL3_Config>
 8005fcc:	2800      	cmp	r0, #0
 8005fce:	f040 808d 	bne.w	80060ec <HAL_RCCEx_PeriphCLKConfig+0xb90>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005fd2:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005fd6:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005fda:	e54a      	b.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x516>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005fdc:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005fe0:	f7ff bae9 	b.w	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005fe4:	2100      	movs	r1, #0
 8005fe6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005fea:	f7ff fa3d 	bl	8005468 <RCCEx_PLL3_Config>
 8005fee:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005ff0:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 8005ff4:	f7ff bb4a 	b.w	800568c <HAL_RCCEx_PeriphCLKConfig+0x130>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ff8:	2100      	movs	r1, #0
 8005ffa:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005ffe:	f7ff fa33 	bl	8005468 <RCCEx_PLL3_Config>
 8006002:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006004:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 8006008:	e600      	b.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x6b0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800600a:	2100      	movs	r1, #0
 800600c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8006010:	f7ff fa2a 	bl	8005468 <RCCEx_PLL3_Config>
 8006014:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006016:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 800601a:	f7ff baf0 	b.w	80055fe <HAL_RCCEx_PeriphCLKConfig+0xa2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800601e:	2102      	movs	r1, #2
 8006020:	3028      	adds	r0, #40	; 0x28
 8006022:	f7ff fa21 	bl	8005468 <RCCEx_PLL3_Config>
 8006026:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 8006028:	2e00      	cmp	r6, #0
 800602a:	f43f aab5 	beq.w	8005598 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800602e:	e7d5      	b.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0xa80>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006030:	4848      	ldr	r0, [pc, #288]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0xbf8>)
        break;
 8006032:	4635      	mov	r5, r6
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006034:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8006036:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800603a:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 800603c:	e5e6      	b.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x6b0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800603e:	2100      	movs	r1, #0
 8006040:	f104 0008 	add.w	r0, r4, #8
 8006044:	f7ff f996 	bl	8005374 <RCCEx_PLL2_Config>
 8006048:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800604a:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 800604e:	e5dd      	b.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x6b0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006050:	2100      	movs	r1, #0
 8006052:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8006056:	f7ff fa07 	bl	8005468 <RCCEx_PLL3_Config>
 800605a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800605c:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 8006060:	f7ff bb52 	b.w	8005708 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006064:	2100      	movs	r1, #0
 8006066:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800606a:	f7ff f9fd 	bl	8005468 <RCCEx_PLL3_Config>
 800606e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006070:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 8006074:	f7ff bae6 	b.w	8005644 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006078:	2101      	movs	r1, #1
 800607a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800607e:	f7ff f9f3 	bl	8005468 <RCCEx_PLL3_Config>
 8006082:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006084:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006088:	2d00      	cmp	r5, #0
 800608a:	f47f aef4 	bne.w	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x91a>
 800608e:	e46c      	b.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x40e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006090:	2101      	movs	r1, #1
 8006092:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8006096:	f7ff f9e7 	bl	8005468 <RCCEx_PLL3_Config>
 800609a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800609c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80060a0:	2d00      	cmp	r5, #0
 80060a2:	f47f aef6 	bne.w	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x936>
 80060a6:	e43c      	b.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80060a8:	2101      	movs	r1, #1
 80060aa:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80060ae:	f7ff f9db 	bl	8005468 <RCCEx_PLL3_Config>
 80060b2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80060b4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80060b8:	2d00      	cmp	r5, #0
 80060ba:	f47f aed6 	bne.w	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x90e>
 80060be:	e5f9      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x758>
        status = ret;
 80060c0:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80060c2:	e9d4 3200 	ldrd	r3, r2, [r4]
 80060c6:	4635      	mov	r5, r6
 80060c8:	f7ff bbe0 	b.w	800588c <HAL_RCCEx_PeriphCLKConfig+0x330>
    switch (PeriphClkInit->SpdifrxClockSelection)
 80060cc:	2601      	movs	r6, #1
 80060ce:	f7ff ba72 	b.w	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060d2:	4d20      	ldr	r5, [pc, #128]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0xbf8>)
 80060d4:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80060d6:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 80060da:	62e8      	str	r0, [r5, #44]	; 0x2c
    if (ret == HAL_OK)
 80060dc:	f7ff ba64 	b.w	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80060e0:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
        status = HAL_ERROR;
 80060e4:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80060e6:	e9d4 3200 	ldrd	r3, r2, [r4]
 80060ea:	e4b4      	b.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80060ec:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
        status = HAL_ERROR;
 80060f0:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80060f2:	e9d4 3200 	ldrd	r3, r2, [r4]
 80060f6:	e4bc      	b.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x516>
        tickstart = HAL_GetTick();
 80060f8:	f7fb fcc0 	bl	8001a7c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80060fc:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8006154 <HAL_RCCEx_PeriphCLKConfig+0xbf8>
        tickstart = HAL_GetTick();
 8006100:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006102:	f241 3988 	movw	r9, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006106:	e004      	b.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006108:	f7fb fcb8 	bl	8001a7c <HAL_GetTick>
 800610c:	1bc0      	subs	r0, r0, r7
 800610e:	4548      	cmp	r0, r9
 8006110:	d8d6      	bhi.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0xb64>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006112:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8006116:	079b      	lsls	r3, r3, #30
 8006118:	d5f6      	bpl.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0xbac>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800611a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 800611e:	e64d      	b.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x860>
 8006120:	480c      	ldr	r0, [pc, #48]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0xbf8>)
 8006122:	4a0d      	ldr	r2, [pc, #52]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
 8006124:	6901      	ldr	r1, [r0, #16]
 8006126:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 800612a:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 800612e:	430a      	orrs	r2, r1
 8006130:	6102      	str	r2, [r0, #16]
 8006132:	e64e      	b.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x876>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006134:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006138:	462e      	mov	r6, r5
 800613a:	f7ff bba7 	b.w	800588c <HAL_RCCEx_PeriphCLKConfig+0x330>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800613e:	2601      	movs	r6, #1
 8006140:	4635      	mov	r5, r6
 8006142:	f7ff bbf5 	b.w	8005930 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    switch (PeriphClkInit->FmcClockSelection)
 8006146:	2601      	movs	r6, #1
 8006148:	4635      	mov	r5, r6
 800614a:	f7ff bb9c 	b.w	8005886 <HAL_RCCEx_PeriphCLKConfig+0x32a>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800614e:	2601      	movs	r6, #1
 8006150:	4635      	mov	r5, r6
 8006152:	e412      	b.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x41e>
 8006154:	58024400 	.word	0x58024400
 8006158:	00ffffcf 	.word	0x00ffffcf

0800615c <HAL_RCCEx_GetD3PCLK1Freq>:
{
 800615c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800615e:	f7ff f839 	bl	80051d4 <HAL_RCC_GetHCLKFreq>
 8006162:	4b05      	ldr	r3, [pc, #20]	; (8006178 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8006164:	4a05      	ldr	r2, [pc, #20]	; (800617c <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 8006166:	6a1b      	ldr	r3, [r3, #32]
 8006168:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800616c:	5cd3      	ldrb	r3, [r2, r3]
 800616e:	f003 031f 	and.w	r3, r3, #31
}
 8006172:	40d8      	lsrs	r0, r3
 8006174:	bd08      	pop	{r3, pc}
 8006176:	bf00      	nop
 8006178:	58024400 	.word	0x58024400
 800617c:	0800849c 	.word	0x0800849c

08006180 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006180:	4a50      	ldr	r2, [pc, #320]	; (80062c4 <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
{
 8006182:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006184:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006186:	6a95      	ldr	r5, [r2, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006188:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  if (pll2m != 0U)
 800618a:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800618e:	f3c5 3305 	ubfx	r3, r5, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006192:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
  if (pll2m != 0U)
 8006194:	d05d      	beq.n	8006252 <HAL_RCCEx_GetPLL2ClockFreq+0xd2>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006196:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800619a:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800619e:	f001 0103 	and.w	r1, r1, #3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80061a2:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 80061a6:	2901      	cmp	r1, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80061a8:	ee07 4a90 	vmov	s15, r4
 80061ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 80061b0:	d003      	beq.n	80061ba <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
 80061b2:	2902      	cmp	r1, #2
 80061b4:	d078      	beq.n	80062a8 <HAL_RCCEx_GetPLL2ClockFreq+0x128>
 80061b6:	2900      	cmp	r1, #0
 80061b8:	d050      	beq.n	800625c <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80061ba:	ee07 3a90 	vmov	s15, r3
 80061be:	ed9f 5a42 	vldr	s10, [pc, #264]	; 80062c8 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 80061c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061c6:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80061c8:	eec5 6a27 	vdiv.f32	s13, s10, s15
 80061cc:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 80062cc <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 80061d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061d4:	ee07 3a90 	vmov	s15, r3
 80061d8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80061dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061e0:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80061e4:	eee7 7a06 	vfma.f32	s15, s14, s12
 80061e8:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80061ec:	4a35      	ldr	r2, [pc, #212]	; (80062c4 <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
 80061ee:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80061f2:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80061f4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80061f8:	ee07 3a90 	vmov	s15, r3
 80061fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8006200:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006202:	ee77 7a86 	vadd.f32	s15, s15, s12
 8006206:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800620a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800620e:	ed80 7a00 	vstr	s14, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006212:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8006214:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8006218:	ee07 3a90 	vmov	s15, r3
 800621c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006220:	ee77 7a86 	vadd.f32	s15, s15, s12
 8006224:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006228:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800622c:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006230:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8006232:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8006236:	ee07 3a10 	vmov	s14, r3
 800623a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800623e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006242:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006246:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800624a:	ee17 3a90 	vmov	r3, s15
 800624e:	6083      	str	r3, [r0, #8]
}
 8006250:	4770      	bx	lr
 8006252:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006254:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006258:	6083      	str	r3, [r0, #8]
}
 800625a:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800625c:	6811      	ldr	r1, [r2, #0]
 800625e:	0689      	lsls	r1, r1, #26
 8006260:	d529      	bpl.n	80062b6 <HAL_RCCEx_GetPLL2ClockFreq+0x136>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006262:	6814      	ldr	r4, [r2, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006264:	ee07 3a90 	vmov	s15, r3
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006268:	4919      	ldr	r1, [pc, #100]	; (80062d0 <HAL_RCCEx_GetPLL2ClockFreq+0x150>)
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800626a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800626e:	6b93      	ldr	r3, [r2, #56]	; 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006270:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006274:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006278:	ed9f 5a14 	vldr	s10, [pc, #80]	; 80062cc <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 800627c:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006280:	40d1      	lsrs	r1, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006282:	ee06 3a10 	vmov	s12, r3
 8006286:	ee05 1a90 	vmov	s11, r1
 800628a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800628e:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8006292:	ee36 6a26 	vadd.f32	s12, s12, s13
 8006296:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 800629a:	eef0 7a46 	vmov.f32	s15, s12
 800629e:	eee7 7a05 	vfma.f32	s15, s14, s10
 80062a2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80062a6:	e7a1      	b.n	80061ec <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80062a8:	ee07 3a90 	vmov	s15, r3
 80062ac:	ed9f 5a09 	vldr	s10, [pc, #36]	; 80062d4 <HAL_RCCEx_GetPLL2ClockFreq+0x154>
 80062b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062b4:	e787      	b.n	80061c6 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80062b6:	ee07 3a90 	vmov	s15, r3
 80062ba:	ed9f 5a07 	vldr	s10, [pc, #28]	; 80062d8 <HAL_RCCEx_GetPLL2ClockFreq+0x158>
 80062be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062c2:	e780      	b.n	80061c6 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 80062c4:	58024400 	.word	0x58024400
 80062c8:	4a742400 	.word	0x4a742400
 80062cc:	39000000 	.word	0x39000000
 80062d0:	03d09000 	.word	0x03d09000
 80062d4:	4af42400 	.word	0x4af42400
 80062d8:	4c742400 	.word	0x4c742400

080062dc <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80062dc:	4a50      	ldr	r2, [pc, #320]	; (8006420 <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
{
 80062de:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80062e0:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80062e2:	6a95      	ldr	r5, [r2, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80062e4:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  if (pll3m != 0U)
 80062e6:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80062ea:	f3c5 5305 	ubfx	r3, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80062ee:	6c54      	ldr	r4, [r2, #68]	; 0x44
  if (pll3m != 0U)
 80062f0:	d05d      	beq.n	80063ae <HAL_RCCEx_GetPLL3ClockFreq+0xd2>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80062f2:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80062f6:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80062fa:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80062fe:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 8006302:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006304:	ee07 4a90 	vmov	s15, r4
 8006308:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 800630c:	d003      	beq.n	8006316 <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
 800630e:	2902      	cmp	r1, #2
 8006310:	d078      	beq.n	8006404 <HAL_RCCEx_GetPLL3ClockFreq+0x128>
 8006312:	2900      	cmp	r1, #0
 8006314:	d050      	beq.n	80063b8 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006316:	ee07 3a90 	vmov	s15, r3
 800631a:	ed9f 5a42 	vldr	s10, [pc, #264]	; 8006424 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 800631e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006322:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006324:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8006328:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 8006428 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 800632c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006330:	ee07 3a90 	vmov	s15, r3
 8006334:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8006338:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800633c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8006340:	eee7 7a06 	vfma.f32	s15, s14, s12
 8006344:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006348:	4a35      	ldr	r2, [pc, #212]	; (8006420 <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
 800634a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800634e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006350:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8006354:	ee07 3a90 	vmov	s15, r3
 8006358:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 800635c:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800635e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8006362:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006366:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800636a:	ed80 7a00 	vstr	s14, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800636e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006370:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8006374:	ee07 3a90 	vmov	s15, r3
 8006378:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800637c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8006380:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006384:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8006388:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800638c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800638e:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8006392:	ee07 3a10 	vmov	s14, r3
 8006396:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800639a:	ee37 7a06 	vadd.f32	s14, s14, s12
 800639e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063a6:	ee17 3a90 	vmov	r3, s15
 80063aa:	6083      	str	r3, [r0, #8]
}
 80063ac:	4770      	bx	lr
 80063ae:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80063b0:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80063b4:	6083      	str	r3, [r0, #8]
}
 80063b6:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063b8:	6811      	ldr	r1, [r2, #0]
 80063ba:	0689      	lsls	r1, r1, #26
 80063bc:	d529      	bpl.n	8006412 <HAL_RCCEx_GetPLL3ClockFreq+0x136>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80063be:	6814      	ldr	r4, [r2, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80063c0:	ee07 3a90 	vmov	s15, r3
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80063c4:	4919      	ldr	r1, [pc, #100]	; (800642c <HAL_RCCEx_GetPLL3ClockFreq+0x150>)
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80063c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063ca:	6c13      	ldr	r3, [r2, #64]	; 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80063cc:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80063d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80063d4:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8006428 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 80063d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80063dc:	40d1      	lsrs	r1, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80063de:	ee06 3a10 	vmov	s12, r3
 80063e2:	ee05 1a90 	vmov	s11, r1
 80063e6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80063ea:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80063ee:	ee36 6a26 	vadd.f32	s12, s12, s13
 80063f2:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 80063f6:	eef0 7a46 	vmov.f32	s15, s12
 80063fa:	eee7 7a05 	vfma.f32	s15, s14, s10
 80063fe:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006402:	e7a1      	b.n	8006348 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006404:	ee07 3a90 	vmov	s15, r3
 8006408:	ed9f 5a09 	vldr	s10, [pc, #36]	; 8006430 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
 800640c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006410:	e787      	b.n	8006322 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006412:	ee07 3a90 	vmov	s15, r3
 8006416:	ed9f 5a07 	vldr	s10, [pc, #28]	; 8006434 <HAL_RCCEx_GetPLL3ClockFreq+0x158>
 800641a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800641e:	e780      	b.n	8006322 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 8006420:	58024400 	.word	0x58024400
 8006424:	4a742400 	.word	0x4a742400
 8006428:	39000000 	.word	0x39000000
 800642c:	03d09000 	.word	0x03d09000
 8006430:	4af42400 	.word	0x4af42400
 8006434:	4c742400 	.word	0x4c742400

08006438 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006438:	4a51      	ldr	r2, [pc, #324]	; (8006580 <HAL_RCCEx_GetPLL1ClockFreq+0x148>)
{
 800643a:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800643c:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800643e:	6a95      	ldr	r5, [r2, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006440:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  if (pll1m != 0U)
 8006442:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8006446:	f3c5 1305 	ubfx	r3, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800644a:	6b54      	ldr	r4, [r2, #52]	; 0x34
  if (pll1m != 0U)
 800644c:	d05e      	beq.n	800650c <HAL_RCCEx_GetPLL1ClockFreq+0xd4>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800644e:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006452:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006456:	f001 0103 	and.w	r1, r1, #3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800645a:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 800645e:	2901      	cmp	r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006460:	ee07 4a90 	vmov	s15, r4
 8006464:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8006468:	f000 8082 	beq.w	8006570 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
 800646c:	2902      	cmp	r1, #2
 800646e:	d078      	beq.n	8006562 <HAL_RCCEx_GetPLL1ClockFreq+0x12a>
 8006470:	2900      	cmp	r1, #0
 8006472:	d050      	beq.n	8006516 <HAL_RCCEx_GetPLL1ClockFreq+0xde>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006474:	ee07 3a90 	vmov	s15, r3
 8006478:	ed9f 5a42 	vldr	s10, [pc, #264]	; 8006584 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 800647c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006480:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8006482:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8006486:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8006588 <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 800648a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800648e:	ee07 3a90 	vmov	s15, r3
 8006492:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8006496:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800649a:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800649e:	eee7 7a06 	vfma.f32	s15, s14, s12
 80064a2:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80064a6:	4a36      	ldr	r2, [pc, #216]	; (8006580 <HAL_RCCEx_GetPLL1ClockFreq+0x148>)
 80064a8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80064ac:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80064ae:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80064b2:	ee07 3a90 	vmov	s15, r3
 80064b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 80064ba:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80064bc:	ee77 7a86 	vadd.f32	s15, s15, s12
 80064c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064c4:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80064c8:	ed80 7a00 	vstr	s14, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80064cc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80064ce:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80064d2:	ee07 3a90 	vmov	s15, r3
 80064d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80064da:	ee77 7a86 	vadd.f32	s15, s15, s12
 80064de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064e2:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80064e6:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80064ea:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80064ec:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80064f0:	ee07 3a10 	vmov	s14, r3
 80064f4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80064f8:	ee37 7a06 	vadd.f32	s14, s14, s12
 80064fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006500:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006504:	ee17 3a90 	vmov	r3, s15
 8006508:	6083      	str	r3, [r0, #8]
}
 800650a:	4770      	bx	lr
 800650c:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800650e:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8006512:	6083      	str	r3, [r0, #8]
}
 8006514:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006516:	6811      	ldr	r1, [r2, #0]
 8006518:	0689      	lsls	r1, r1, #26
 800651a:	d5ab      	bpl.n	8006474 <HAL_RCCEx_GetPLL1ClockFreq+0x3c>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800651c:	6814      	ldr	r4, [r2, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800651e:	ee07 3a90 	vmov	s15, r3
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006522:	491a      	ldr	r1, [pc, #104]	; (800658c <HAL_RCCEx_GetPLL1ClockFreq+0x154>)
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006524:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006528:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800652a:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800652e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006532:	ed9f 5a15 	vldr	s10, [pc, #84]	; 8006588 <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 8006536:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800653a:	40d1      	lsrs	r1, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800653c:	ee06 3a10 	vmov	s12, r3
 8006540:	ee05 1a90 	vmov	s11, r1
 8006544:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8006548:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800654c:	ee36 6a26 	vadd.f32	s12, s12, s13
 8006550:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8006554:	eef0 7a46 	vmov.f32	s15, s12
 8006558:	eee7 7a05 	vfma.f32	s15, s14, s10
 800655c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006560:	e7a1      	b.n	80064a6 <HAL_RCCEx_GetPLL1ClockFreq+0x6e>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006562:	ee07 3a90 	vmov	s15, r3
 8006566:	ed9f 5a0a 	vldr	s10, [pc, #40]	; 8006590 <HAL_RCCEx_GetPLL1ClockFreq+0x158>
 800656a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800656e:	e787      	b.n	8006480 <HAL_RCCEx_GetPLL1ClockFreq+0x48>
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006570:	ee07 3a90 	vmov	s15, r3
 8006574:	ed9f 5a07 	vldr	s10, [pc, #28]	; 8006594 <HAL_RCCEx_GetPLL1ClockFreq+0x15c>
 8006578:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800657c:	e780      	b.n	8006480 <HAL_RCCEx_GetPLL1ClockFreq+0x48>
 800657e:	bf00      	nop
 8006580:	58024400 	.word	0x58024400
 8006584:	4c742400 	.word	0x4c742400
 8006588:	39000000 	.word	0x39000000
 800658c:	03d09000 	.word	0x03d09000
 8006590:	4af42400 	.word	0x4af42400
 8006594:	4a742400 	.word	0x4a742400

08006598 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006598:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 800659c:	430b      	orrs	r3, r1
{
 800659e:	b500      	push	{lr}
 80065a0:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80065a2:	f000 8083 	beq.w	80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x114>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80065a6:	f5a0 7300 	sub.w	r3, r0, #512	; 0x200
 80065aa:	430b      	orrs	r3, r1
 80065ac:	d038      	beq.n	8006620 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80065ae:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
 80065b2:	430b      	orrs	r3, r1
 80065b4:	f000 80e6 	beq.w	8006784 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80065b8:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
 80065bc:	430b      	orrs	r3, r1
 80065be:	f000 8089 	beq.w	80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80065c2:	f5a0 5380 	sub.w	r3, r0, #4096	; 0x1000
 80065c6:	430b      	orrs	r3, r1
 80065c8:	d060      	beq.n	800668c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80065ca:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
 80065ce:	430b      	orrs	r3, r1
 80065d0:	f000 8112 	beq.w	80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80065d4:	f5a0 2300 	sub.w	r3, r0, #524288	; 0x80000
 80065d8:	430b      	orrs	r3, r1
 80065da:	f000 80a3 	beq.w	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80065de:	f5a0 3380 	sub.w	r3, r0, #65536	; 0x10000
 80065e2:	430b      	orrs	r3, r1
 80065e4:	f000 80fa 	beq.w	80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x244>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80065e8:	f5a0 4380 	sub.w	r3, r0, #16384	; 0x4000
 80065ec:	430b      	orrs	r3, r1
 80065ee:	f000 8143 	beq.w	8006878 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80065f2:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
 80065f6:	4308      	orrs	r0, r1
 80065f8:	d137      	bne.n	800666a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80065fa:	4a9a      	ldr	r2, [pc, #616]	; (8006864 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80065fc:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80065fe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
    switch (srcclk)
 8006602:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006606:	f000 8084 	beq.w	8006712 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800660a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800660e:	f000 8157 	beq.w	80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8006612:	bb53      	cbnz	r3, 800666a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006614:	6810      	ldr	r0, [r2, #0]
 8006616:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800661a:	d044      	beq.n	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = HSE_VALUE;
 800661c:	4892      	ldr	r0, [pc, #584]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800661e:	e042      	b.n	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8006620:	4a90      	ldr	r2, [pc, #576]	; (8006864 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006622:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8006624:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
    switch (saiclocksource)
 8006628:	2b80      	cmp	r3, #128	; 0x80
 800662a:	f000 80a6 	beq.w	800677a <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 800662e:	d920      	bls.n	8006672 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8006630:	2bc0      	cmp	r3, #192	; 0xc0
 8006632:	d037      	beq.n	80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8006634:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006638:	d117      	bne.n	800666a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800663a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800663c:	6811      	ldr	r1, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800663e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006642:	0749      	lsls	r1, r1, #29
 8006644:	d502      	bpl.n	800664c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 8006646:	2b00      	cmp	r3, #0
 8006648:	f000 80c2 	beq.w	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800664c:	4a85      	ldr	r2, [pc, #532]	; (8006864 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800664e:	6812      	ldr	r2, [r2, #0]
 8006650:	05d0      	lsls	r0, r2, #23
 8006652:	d503      	bpl.n	800665c <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
 8006654:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006658:	f000 8102 	beq.w	8006860 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800665c:	4a81      	ldr	r2, [pc, #516]	; (8006864 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800665e:	6812      	ldr	r2, [r2, #0]
 8006660:	0391      	lsls	r1, r2, #14
 8006662:	d502      	bpl.n	800666a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8006664:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006668:	d0d8      	beq.n	800661c <HAL_RCCEx_GetPeriphCLKFreq+0x84>
    switch (srcclk)
 800666a:	2000      	movs	r0, #0
}
 800666c:	b005      	add	sp, #20
 800666e:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (saiclocksource)
 8006672:	2b00      	cmp	r3, #0
 8006674:	d04d      	beq.n	8006712 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8006676:	2b40      	cmp	r3, #64	; 0x40
 8006678:	d1f7      	bne.n	800666a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800667a:	6810      	ldr	r0, [r2, #0]
 800667c:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8006680:	d011      	beq.n	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006682:	a801      	add	r0, sp, #4
 8006684:	f7ff fd7c 	bl	8006180 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006688:	9801      	ldr	r0, [sp, #4]
 800668a:	e00c      	b.n	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800668c:	4a75      	ldr	r2, [pc, #468]	; (8006864 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800668e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8006690:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    switch (srcclk)
 8006694:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006698:	d06f      	beq.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 800669a:	d938      	bls.n	800670e <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 800669c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80066a0:	f040 8088 	bne.w	80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0x21c>
        frequency = EXTERNAL_CLOCK_VALUE;
 80066a4:	4871      	ldr	r0, [pc, #452]	; (800686c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
}
 80066a6:	b005      	add	sp, #20
 80066a8:	f85d fb04 	ldr.w	pc, [sp], #4
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80066ac:	4b6d      	ldr	r3, [pc, #436]	; (8006864 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80066ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066b0:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
 80066b4:	2b04      	cmp	r3, #4
 80066b6:	d8d8      	bhi.n	800666a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 80066b8:	a201      	add	r2, pc, #4	; (adr r2, 80066c0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>)
 80066ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066be:	bf00      	nop
 80066c0:	08006763 	.word	0x08006763
 80066c4:	0800673f 	.word	0x0800673f
 80066c8:	0800674f 	.word	0x0800674f
 80066cc:	080066a5 	.word	0x080066a5
 80066d0:	0800674b 	.word	0x0800674b
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80066d4:	4a63      	ldr	r2, [pc, #396]	; (8006864 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80066d6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80066d8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    switch (saiclocksource)
 80066dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80066e0:	d04b      	beq.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 80066e2:	d944      	bls.n	800676e <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
 80066e4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80066e8:	d0dc      	beq.n	80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 80066ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80066ee:	d1bc      	bne.n	800666a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80066f0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80066f2:	6812      	ldr	r2, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80066f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80066f8:	0752      	lsls	r2, r2, #29
 80066fa:	d5a7      	bpl.n	800664c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d1a5      	bne.n	800664c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006700:	4b58      	ldr	r3, [pc, #352]	; (8006864 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006702:	485b      	ldr	r0, [pc, #364]	; (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800670a:	40d8      	lsrs	r0, r3
 800670c:	e7cb      	b.n	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 800670e:	2b00      	cmp	r3, #0
 8006710:	d154      	bne.n	80067bc <HAL_RCCEx_GetPeriphCLKFreq+0x224>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006712:	6810      	ldr	r0, [r2, #0]
 8006714:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8006718:	d0c5      	beq.n	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800671a:	a801      	add	r0, sp, #4
 800671c:	f7ff fe8c 	bl	8006438 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006720:	9802      	ldr	r0, [sp, #8]
 8006722:	e7c0      	b.n	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006724:	4a4f      	ldr	r2, [pc, #316]	; (8006864 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006726:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8006728:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    switch (srcclk)
 800672c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006730:	f000 80d0 	beq.w	80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
 8006734:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006738:	d0da      	beq.n	80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 800673a:	2b00      	cmp	r3, #0
 800673c:	d195      	bne.n	800666a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800673e:	4b49      	ldr	r3, [pc, #292]	; (8006864 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006740:	6818      	ldr	r0, [r3, #0]
 8006742:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8006746:	d0ae      	beq.n	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8006748:	e79b      	b.n	8006682 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800674a:	4a46      	ldr	r2, [pc, #280]	; (8006864 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800674c:	e775      	b.n	800663a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800674e:	4b45      	ldr	r3, [pc, #276]	; (8006864 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006750:	6818      	ldr	r0, [r3, #0]
 8006752:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8006756:	d0a6      	beq.n	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006758:	a801      	add	r0, sp, #4
 800675a:	f7ff fdbf 	bl	80062dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800675e:	9801      	ldr	r0, [sp, #4]
 8006760:	e7a1      	b.n	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006762:	4b40      	ldr	r3, [pc, #256]	; (8006864 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006764:	6818      	ldr	r0, [r3, #0]
 8006766:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800676a:	d09c      	beq.n	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800676c:	e7d5      	b.n	800671a <HAL_RCCEx_GetPeriphCLKFreq+0x182>
    switch (saiclocksource)
 800676e:	2b00      	cmp	r3, #0
 8006770:	d0cf      	beq.n	8006712 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8006772:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006776:	d080      	beq.n	800667a <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
 8006778:	e777      	b.n	800666a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800677a:	6810      	ldr	r0, [r2, #0]
 800677c:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8006780:	d091      	beq.n	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8006782:	e7e9      	b.n	8006758 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8006784:	4a37      	ldr	r2, [pc, #220]	; (8006864 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006786:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8006788:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
    switch (saiclocksource)
 800678c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006790:	d0f3      	beq.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 8006792:	d806      	bhi.n	80067a2 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8006794:	2b00      	cmp	r3, #0
 8006796:	d0bc      	beq.n	8006712 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8006798:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800679c:	f43f af6d 	beq.w	800667a <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
 80067a0:	e763      	b.n	800666a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 80067a2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80067a6:	f43f af7d 	beq.w	80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 80067aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80067ae:	f43f af44 	beq.w	800663a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 80067b2:	e75a      	b.n	800666a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
    switch (srcclk)
 80067b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067b8:	d09a      	beq.n	80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 80067ba:	e756      	b.n	800666a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 80067bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067c0:	f43f af5b 	beq.w	800667a <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
 80067c4:	e751      	b.n	800666a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80067c6:	6810      	ldr	r0, [r2, #0]
 80067c8:	f010 0004 	ands.w	r0, r0, #4
 80067cc:	f43f af6b 	beq.w	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80067d0:	6813      	ldr	r3, [r2, #0]
 80067d2:	4827      	ldr	r0, [pc, #156]	; (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80067d4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80067d8:	40d8      	lsrs	r0, r3
 80067da:	e764      	b.n	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80067dc:	4b21      	ldr	r3, [pc, #132]	; (8006864 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80067de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    switch (srcclk)
 80067e0:	03d2      	lsls	r2, r2, #15
 80067e2:	d5bf      	bpl.n	8006764 <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80067e4:	6818      	ldr	r0, [r3, #0]
 80067e6:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 80067ea:	f43f af5c 	beq.w	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067ee:	a801      	add	r0, sp, #4
 80067f0:	f7ff fcc6 	bl	8006180 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80067f4:	9803      	ldr	r0, [sp, #12]
 80067f6:	e756      	b.n	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80067f8:	4a1a      	ldr	r2, [pc, #104]	; (8006864 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80067fa:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80067fc:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    switch (srcclk)
 8006800:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006804:	d0df      	beq.n	80067c6 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8006806:	d810      	bhi.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x292>
 8006808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800680c:	d058      	beq.n	80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800680e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006812:	d118      	bne.n	8006846 <HAL_RCCEx_GetPeriphCLKFreq+0x2ae>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006814:	4b13      	ldr	r3, [pc, #76]	; (8006864 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006816:	6818      	ldr	r0, [r3, #0]
 8006818:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800681c:	f43f af43 	beq.w	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006820:	a801      	add	r0, sp, #4
 8006822:	f7ff fd5b 	bl	80062dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006826:	9802      	ldr	r0, [sp, #8]
 8006828:	e73d      	b.n	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 800682a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800682e:	d012      	beq.n	8006856 <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
 8006830:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006834:	f47f af19 	bne.w	800666a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006838:	4b0a      	ldr	r3, [pc, #40]	; (8006864 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800683a:	6818      	ldr	r0, [r3, #0]
 800683c:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8006840:	f43f af31 	beq.w	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8006844:	e6ea      	b.n	800661c <HAL_RCCEx_GetPeriphCLKFreq+0x84>
    switch (srcclk)
 8006846:	2b00      	cmp	r3, #0
 8006848:	f47f af0f 	bne.w	800666a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
}
 800684c:	b005      	add	sp, #20
 800684e:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
 8006852:	f7fe bcff 	b.w	8005254 <HAL_RCC_GetPCLK1Freq>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006856:	6810      	ldr	r0, [r2, #0]
 8006858:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 800685c:	f43f af23 	beq.w	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = CSI_VALUE;
 8006860:	4804      	ldr	r0, [pc, #16]	; (8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8006862:	e720      	b.n	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8006864:	58024400 	.word	0x58024400
 8006868:	007a1200 	.word	0x007a1200
 800686c:	00bb8000 	.word	0x00bb8000
 8006870:	03d09000 	.word	0x03d09000
 8006874:	003d0900 	.word	0x003d0900
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8006878:	4b28      	ldr	r3, [pc, #160]	; (800691c <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 800687a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800687c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    switch (srcclk)
 8006880:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006884:	d037      	beq.n	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
 8006886:	d814      	bhi.n	80068b2 <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
 8006888:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800688c:	d03f      	beq.n	800690e <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 800688e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006892:	d0bf      	beq.n	8006814 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8006894:	2b00      	cmp	r3, #0
 8006896:	f47f aee8 	bne.w	800666a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800689a:	f7fe fc9b 	bl	80051d4 <HAL_RCC_GetHCLKFreq>
 800689e:	4b1f      	ldr	r3, [pc, #124]	; (800691c <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 80068a0:	4a1f      	ldr	r2, [pc, #124]	; (8006920 <HAL_RCCEx_GetPeriphCLKFreq+0x388>)
 80068a2:	6a1b      	ldr	r3, [r3, #32]
 80068a4:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80068a8:	5cd3      	ldrb	r3, [r2, r3]
 80068aa:	f003 031f 	and.w	r3, r3, #31
 80068ae:	40d8      	lsrs	r0, r3
        break;
 80068b0:	e6f9      	b.n	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 80068b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068b6:	d017      	beq.n	80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
 80068b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80068bc:	d0bc      	beq.n	8006838 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 80068be:	e6d4      	b.n	800666a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80068c0:	6810      	ldr	r0, [r2, #0]
 80068c2:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 80068c6:	f43f aeee 	beq.w	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068ca:	a801      	add	r0, sp, #4
 80068cc:	f7ff fc58 	bl	8006180 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80068d0:	9802      	ldr	r0, [sp, #8]
 80068d2:	e6e8      	b.n	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80068d4:	6810      	ldr	r0, [r2, #0]
 80068d6:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 80068da:	f43f aee4 	beq.w	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068de:	a801      	add	r0, sp, #4
 80068e0:	f7ff fcfc 	bl	80062dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80068e4:	9803      	ldr	r0, [sp, #12]
 80068e6:	e6de      	b.n	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80068e8:	4b0c      	ldr	r3, [pc, #48]	; (800691c <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 80068ea:	6818      	ldr	r0, [r3, #0]
 80068ec:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 80068f0:	f43f aed9 	beq.w	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 80068f4:	e7b4      	b.n	8006860 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80068f6:	4b09      	ldr	r3, [pc, #36]	; (800691c <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 80068f8:	6818      	ldr	r0, [r3, #0]
 80068fa:	f010 0004 	ands.w	r0, r0, #4
 80068fe:	f43f aed2 	beq.w	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4807      	ldr	r0, [pc, #28]	; (8006924 <HAL_RCCEx_GetPeriphCLKFreq+0x38c>)
 8006906:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800690a:	40d8      	lsrs	r0, r3
 800690c:	e6cb      	b.n	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800690e:	4b03      	ldr	r3, [pc, #12]	; (800691c <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 8006910:	6818      	ldr	r0, [r3, #0]
 8006912:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8006916:	f43f aec6 	beq.w	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800691a:	e7d6      	b.n	80068ca <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 800691c:	58024400 	.word	0x58024400
 8006920:	0800849c 	.word	0x0800849c
 8006924:	03d09000 	.word	0x03d09000

08006928 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006928:	2800      	cmp	r0, #0
 800692a:	f000 80a5 	beq.w	8006a78 <HAL_TIM_Base_Init+0x150>
{
 800692e:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006930:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006934:	4604      	mov	r4, r0
 8006936:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800693a:	2b00      	cmp	r3, #0
 800693c:	d076      	beq.n	8006a2c <HAL_TIM_Base_Init+0x104>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800693e:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8006940:	2302      	movs	r3, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006942:	494e      	ldr	r1, [pc, #312]	; (8006a7c <HAL_TIM_Base_Init+0x154>)
 8006944:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->State = HAL_TIM_STATE_BUSY;
 8006948:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800694c:	eba2 0101 	sub.w	r1, r2, r1
  tmpcr1 = TIMx->CR1;
 8006950:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006952:	fab1 f181 	clz	r1, r1
 8006956:	ea4f 1151 	mov.w	r1, r1, lsr #5
 800695a:	d027      	beq.n	80069ac <HAL_TIM_Base_Init+0x84>
 800695c:	bb31      	cbnz	r1, 80069ac <HAL_TIM_Base_Init+0x84>
 800695e:	4848      	ldr	r0, [pc, #288]	; (8006a80 <HAL_TIM_Base_Init+0x158>)
 8006960:	4d48      	ldr	r5, [pc, #288]	; (8006a84 <HAL_TIM_Base_Init+0x15c>)
 8006962:	4282      	cmp	r2, r0
 8006964:	d067      	beq.n	8006a36 <HAL_TIM_Base_Init+0x10e>
 8006966:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800696a:	4282      	cmp	r2, r0
 800696c:	d063      	beq.n	8006a36 <HAL_TIM_Base_Init+0x10e>
 800696e:	1b55      	subs	r5, r2, r5
 8006970:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8006974:	fab5 f585 	clz	r5, r5
 8006978:	4282      	cmp	r2, r0
 800697a:	ea4f 1555 	mov.w	r5, r5, lsr #5
 800697e:	d063      	beq.n	8006a48 <HAL_TIM_Base_Init+0x120>
 8006980:	2d00      	cmp	r5, #0
 8006982:	d161      	bne.n	8006a48 <HAL_TIM_Base_Init+0x120>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006984:	4840      	ldr	r0, [pc, #256]	; (8006a88 <HAL_TIM_Base_Init+0x160>)
 8006986:	4941      	ldr	r1, [pc, #260]	; (8006a8c <HAL_TIM_Base_Init+0x164>)
 8006988:	428a      	cmp	r2, r1
 800698a:	bf18      	it	ne
 800698c:	4282      	cmpne	r2, r0
 800698e:	d065      	beq.n	8006a5c <HAL_TIM_Base_Init+0x134>
 8006990:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006994:	428a      	cmp	r2, r1
 8006996:	d061      	beq.n	8006a5c <HAL_TIM_Base_Init+0x134>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006998:	69a0      	ldr	r0, [r4, #24]
 800699a:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800699e:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069a0:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 80069a2:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069a4:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069a6:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80069a8:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069aa:	e023      	b.n	80069f4 <HAL_TIM_Base_Init+0xcc>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069ac:	4d35      	ldr	r5, [pc, #212]	; (8006a84 <HAL_TIM_Base_Init+0x15c>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80069b2:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069b4:	1b55      	subs	r5, r2, r5
    tmpcr1 |= Structure->CounterMode;
 80069b6:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069b8:	fab5 f585 	clz	r5, r5
 80069bc:	096d      	lsrs	r5, r5, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069be:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80069c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069c4:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069c6:	69a0      	ldr	r0, [r4, #24]
 80069c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069cc:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 80069ce:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069d0:	68e3      	ldr	r3, [r4, #12]
 80069d2:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80069d4:	6863      	ldr	r3, [r4, #4]
 80069d6:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069d8:	b951      	cbnz	r1, 80069f0 <HAL_TIM_Base_Init+0xc8>
 80069da:	b94d      	cbnz	r5, 80069f0 <HAL_TIM_Base_Init+0xc8>
 80069dc:	492a      	ldr	r1, [pc, #168]	; (8006a88 <HAL_TIM_Base_Init+0x160>)
 80069de:	4b2b      	ldr	r3, [pc, #172]	; (8006a8c <HAL_TIM_Base_Init+0x164>)
 80069e0:	429a      	cmp	r2, r3
 80069e2:	bf18      	it	ne
 80069e4:	428a      	cmpne	r2, r1
 80069e6:	d003      	beq.n	80069f0 <HAL_TIM_Base_Init+0xc8>
 80069e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d101      	bne.n	80069f4 <HAL_TIM_Base_Init+0xcc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069f0:	6963      	ldr	r3, [r4, #20]
 80069f2:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069f4:	2301      	movs	r3, #1
  return HAL_OK;
 80069f6:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 80069f8:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069fa:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069fe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8006a02:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8006a06:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006a0a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8006a0e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a16:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006a1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006a1e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8006a22:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8006a26:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8006a2a:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 8006a2c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006a30:	f7fa fe5c 	bl	80016ec <HAL_TIM_Base_MspInit>
 8006a34:	e783      	b.n	800693e <HAL_TIM_Base_Init+0x16>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a36:	1b55      	subs	r5, r2, r5
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006a3c:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a3e:	fab5 f585 	clz	r5, r5
    tmpcr1 |= Structure->CounterMode;
 8006a42:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a44:	096d      	lsrs	r5, r5, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a46:	e7ba      	b.n	80069be <HAL_TIM_Base_Init+0x96>
    tmpcr1 |= Structure->CounterMode;
 8006a48:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006a4e:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a50:	480f      	ldr	r0, [pc, #60]	; (8006a90 <HAL_TIM_Base_Init+0x168>)
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a52:	4282      	cmp	r2, r0
 8006a54:	d0b3      	beq.n	80069be <HAL_TIM_Base_Init+0x96>
 8006a56:	2d00      	cmp	r5, #0
 8006a58:	d1b1      	bne.n	80069be <HAL_TIM_Base_Init+0x96>
 8006a5a:	e793      	b.n	8006984 <HAL_TIM_Base_Init+0x5c>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a5c:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a62:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a64:	4303      	orrs	r3, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a66:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a6c:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8006a6e:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8006a70:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a72:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006a74:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a76:	e7b1      	b.n	80069dc <HAL_TIM_Base_Init+0xb4>
    return HAL_ERROR;
 8006a78:	2001      	movs	r0, #1
}
 8006a7a:	4770      	bx	lr
 8006a7c:	40010000 	.word	0x40010000
 8006a80:	40000400 	.word	0x40000400
 8006a84:	40010400 	.word	0x40010400
 8006a88:	40014000 	.word	0x40014000
 8006a8c:	40014400 	.word	0x40014400
 8006a90:	40000c00 	.word	0x40000c00

08006a94 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8006a94:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d13d      	bne.n	8006b18 <HAL_TIM_Base_Start+0x84>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a9c:	6802      	ldr	r2, [r0, #0]
 8006a9e:	4b23      	ldr	r3, [pc, #140]	; (8006b2c <HAL_TIM_Base_Start+0x98>)
 8006aa0:	4923      	ldr	r1, [pc, #140]	; (8006b30 <HAL_TIM_Base_Start+0x9c>)
 8006aa2:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8006aa6:	bf18      	it	ne
 8006aa8:	429a      	cmpne	r2, r3
{
 8006aaa:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006aac:	bf0c      	ite	eq
 8006aae:	2301      	moveq	r3, #1
 8006ab0:	2300      	movne	r3, #0
 8006ab2:	4d20      	ldr	r5, [pc, #128]	; (8006b34 <HAL_TIM_Base_Start+0xa0>)
  htim->State = HAL_TIM_STATE_BUSY;
 8006ab4:	2402      	movs	r4, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ab6:	42aa      	cmp	r2, r5
 8006ab8:	bf08      	it	eq
 8006aba:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8006abe:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ac2:	4c1d      	ldr	r4, [pc, #116]	; (8006b38 <HAL_TIM_Base_Start+0xa4>)
 8006ac4:	428a      	cmp	r2, r1
 8006ac6:	bf08      	it	eq
 8006ac8:	f043 0301 	orreq.w	r3, r3, #1
 8006acc:	481b      	ldr	r0, [pc, #108]	; (8006b3c <HAL_TIM_Base_Start+0xa8>)
 8006ace:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8006ad2:	42a2      	cmp	r2, r4
 8006ad4:	bf08      	it	eq
 8006ad6:	f043 0301 	orreq.w	r3, r3, #1
 8006ada:	4282      	cmp	r2, r0
 8006adc:	bf08      	it	eq
 8006ade:	f043 0301 	orreq.w	r3, r3, #1
 8006ae2:	428a      	cmp	r2, r1
 8006ae4:	bf08      	it	eq
 8006ae6:	f043 0301 	orreq.w	r3, r3, #1
 8006aea:	b933      	cbnz	r3, 8006afa <HAL_TIM_Base_Start+0x66>
 8006aec:	f500 5070 	add.w	r0, r0, #15360	; 0x3c00
 8006af0:	1a10      	subs	r0, r2, r0
 8006af2:	fab0 f080 	clz	r0, r0
 8006af6:	0940      	lsrs	r0, r0, #5
 8006af8:	b198      	cbz	r0, 8006b22 <HAL_TIM_Base_Start+0x8e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006afa:	6891      	ldr	r1, [r2, #8]
 8006afc:	4b10      	ldr	r3, [pc, #64]	; (8006b40 <HAL_TIM_Base_Start+0xac>)
 8006afe:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b00:	2b06      	cmp	r3, #6
 8006b02:	d00b      	beq.n	8006b1c <HAL_TIM_Base_Start+0x88>
 8006b04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b08:	d008      	beq.n	8006b1c <HAL_TIM_Base_Start+0x88>
      __HAL_TIM_ENABLE(htim);
 8006b0a:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 8006b0c:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 8006b0e:	f043 0301 	orr.w	r3, r3, #1
 8006b12:	6013      	str	r3, [r2, #0]
}
 8006b14:	bc30      	pop	{r4, r5}
 8006b16:	4770      	bx	lr
    return HAL_ERROR;
 8006b18:	2001      	movs	r0, #1
}
 8006b1a:	4770      	bx	lr
  return HAL_OK;
 8006b1c:	2000      	movs	r0, #0
}
 8006b1e:	bc30      	pop	{r4, r5}
 8006b20:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 8006b22:	6813      	ldr	r3, [r2, #0]
 8006b24:	f043 0301 	orr.w	r3, r3, #1
 8006b28:	6013      	str	r3, [r2, #0]
 8006b2a:	e7f3      	b.n	8006b14 <HAL_TIM_Base_Start+0x80>
 8006b2c:	40010000 	.word	0x40010000
 8006b30:	40000800 	.word	0x40000800
 8006b34:	40000400 	.word	0x40000400
 8006b38:	40000c00 	.word	0x40000c00
 8006b3c:	40010400 	.word	0x40010400
 8006b40:	00010007 	.word	0x00010007

08006b44 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8006b44:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	f000 8081 	beq.w	8006c50 <HAL_TIM_ConfigClockSource+0x10c>
 8006b4e:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 8006b50:	2302      	movs	r3, #2
{
 8006b52:	b430      	push	{r4, r5}
  tmpsmcr = htim->Instance->SMCR;
 8006b54:	6804      	ldr	r4, [r0, #0]
  __HAL_LOCK(htim);
 8006b56:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8006b58:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 8006b5c:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b60:	4b5a      	ldr	r3, [pc, #360]	; (8006ccc <HAL_TIM_ConfigClockSource+0x188>)
  tmpsmcr = htim->Instance->SMCR;
 8006b62:	68a5      	ldr	r5, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b64:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8006b66:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8006b68:	680b      	ldr	r3, [r1, #0]
 8006b6a:	2b70      	cmp	r3, #112	; 0x70
 8006b6c:	f000 809c 	beq.w	8006ca8 <HAL_TIM_ConfigClockSource+0x164>
 8006b70:	d825      	bhi.n	8006bbe <HAL_TIM_ConfigClockSource+0x7a>
 8006b72:	2b50      	cmp	r3, #80	; 0x50
 8006b74:	d06e      	beq.n	8006c54 <HAL_TIM_ConfigClockSource+0x110>
 8006b76:	d939      	bls.n	8006bec <HAL_TIM_ConfigClockSource+0xa8>
 8006b78:	2b60      	cmp	r3, #96	; 0x60
 8006b7a:	d118      	bne.n	8006bae <HAL_TIM_ConfigClockSource+0x6a>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b7c:	6a23      	ldr	r3, [r4, #32]
                               sClockSourceConfig->ClockPolarity,
 8006b7e:	6848      	ldr	r0, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b80:	f023 0310 	bic.w	r3, r3, #16
                               sClockSourceConfig->ClockFilter);
 8006b84:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b86:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b88:	69a3      	ldr	r3, [r4, #24]
  tmpccer = TIMx->CCER;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b8a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b8e:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
  tmpccer = TIMx->CCER;
 8006b92:	6a21      	ldr	r1, [r4, #32]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b94:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b98:	61a3      	str	r3, [r4, #24]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b9a:	4b4d      	ldr	r3, [pc, #308]	; (8006cd0 <HAL_TIM_ConfigClockSource+0x18c>)
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b9c:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
  HAL_StatusTypeDef status = HAL_OK;
 8006ba0:	2000      	movs	r0, #0
  TIMx->CCER = tmpccer;
 8006ba2:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8006ba4:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ba6:	400b      	ands	r3, r1
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ba8:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006bac:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 8006bae:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8006bb0:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8006bb2:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8006bb6:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8006bba:	bc30      	pop	{r4, r5}
 8006bbc:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8006bbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bc2:	d060      	beq.n	8006c86 <HAL_TIM_ConfigClockSource+0x142>
 8006bc4:	d933      	bls.n	8006c2e <HAL_TIM_ConfigClockSource+0xea>
 8006bc6:	4943      	ldr	r1, [pc, #268]	; (8006cd4 <HAL_TIM_ConfigClockSource+0x190>)
 8006bc8:	428b      	cmp	r3, r1
 8006bca:	d006      	beq.n	8006bda <HAL_TIM_ConfigClockSource+0x96>
 8006bcc:	d929      	bls.n	8006c22 <HAL_TIM_ConfigClockSource+0xde>
 8006bce:	4942      	ldr	r1, [pc, #264]	; (8006cd8 <HAL_TIM_ConfigClockSource+0x194>)
 8006bd0:	428b      	cmp	r3, r1
 8006bd2:	d002      	beq.n	8006bda <HAL_TIM_ConfigClockSource+0x96>
 8006bd4:	3110      	adds	r1, #16
 8006bd6:	428b      	cmp	r3, r1
 8006bd8:	d1e9      	bne.n	8006bae <HAL_TIM_ConfigClockSource+0x6a>
  tmpsmcr = TIMx->SMCR;
 8006bda:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006bdc:	493c      	ldr	r1, [pc, #240]	; (8006cd0 <HAL_TIM_ConfigClockSource+0x18c>)
 8006bde:	4001      	ands	r1, r0
  HAL_StatusTypeDef status = HAL_OK;
 8006be0:	2000      	movs	r0, #0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006be2:	4319      	orrs	r1, r3
 8006be4:	f041 0107 	orr.w	r1, r1, #7
  TIMx->SMCR = tmpsmcr;
 8006be8:	60a1      	str	r1, [r4, #8]
}
 8006bea:	e7e0      	b.n	8006bae <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 8006bec:	2b40      	cmp	r3, #64	; 0x40
 8006bee:	d123      	bne.n	8006c38 <HAL_TIM_ConfigClockSource+0xf4>
  tmpccer = TIMx->CCER;
 8006bf0:	6a23      	ldr	r3, [r4, #32]
                               sClockSourceConfig->ClockPolarity,
 8006bf2:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8006bf4:	68cd      	ldr	r5, [r1, #12]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006bf6:	f023 030a 	bic.w	r3, r3, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bfa:	6a21      	ldr	r1, [r4, #32]
  tmpccer |= TIM_ICPolarity;
 8006bfc:	4318      	orrs	r0, r3
  tmpsmcr &= ~TIM_SMCR_TS;
 8006bfe:	4b34      	ldr	r3, [pc, #208]	; (8006cd0 <HAL_TIM_ConfigClockSource+0x18c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c00:	f021 0101 	bic.w	r1, r1, #1
 8006c04:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c06:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c08:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c0c:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8006c10:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 8006c12:	6220      	str	r0, [r4, #32]
  HAL_StatusTypeDef status = HAL_OK;
 8006c14:	2000      	movs	r0, #0
  tmpsmcr = TIMx->SMCR;
 8006c16:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c18:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c1a:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8006c1e:	60a3      	str	r3, [r4, #8]
}
 8006c20:	e7c5      	b.n	8006bae <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 8006c22:	f023 0110 	bic.w	r1, r3, #16
 8006c26:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8006c2a:	d1c0      	bne.n	8006bae <HAL_TIM_ConfigClockSource+0x6a>
 8006c2c:	e7d5      	b.n	8006bda <HAL_TIM_ConfigClockSource+0x96>
  HAL_StatusTypeDef status = HAL_OK;
 8006c2e:	f5b3 5080 	subs.w	r0, r3, #4096	; 0x1000
 8006c32:	bf18      	it	ne
 8006c34:	2001      	movne	r0, #1
 8006c36:	e7ba      	b.n	8006bae <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 8006c38:	d8b9      	bhi.n	8006bae <HAL_TIM_ConfigClockSource+0x6a>
 8006c3a:	2b20      	cmp	r3, #32
 8006c3c:	d0cd      	beq.n	8006bda <HAL_TIM_ConfigClockSource+0x96>
 8006c3e:	d903      	bls.n	8006c48 <HAL_TIM_ConfigClockSource+0x104>
 8006c40:	2b30      	cmp	r3, #48	; 0x30
 8006c42:	d0ca      	beq.n	8006bda <HAL_TIM_ConfigClockSource+0x96>
 8006c44:	2001      	movs	r0, #1
 8006c46:	e7b2      	b.n	8006bae <HAL_TIM_ConfigClockSource+0x6a>
 8006c48:	f033 0110 	bics.w	r1, r3, #16
 8006c4c:	d1af      	bne.n	8006bae <HAL_TIM_ConfigClockSource+0x6a>
 8006c4e:	e7c4      	b.n	8006bda <HAL_TIM_ConfigClockSource+0x96>
  __HAL_LOCK(htim);
 8006c50:	2002      	movs	r0, #2
}
 8006c52:	4770      	bx	lr
  tmpccer = TIMx->CCER;
 8006c54:	6a23      	ldr	r3, [r4, #32]
                               sClockSourceConfig->ClockPolarity,
 8006c56:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8006c58:	68cd      	ldr	r5, [r1, #12]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c5a:	f023 030a 	bic.w	r3, r3, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c5e:	6a21      	ldr	r1, [r4, #32]
  tmpccer |= TIM_ICPolarity;
 8006c60:	4318      	orrs	r0, r3
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c62:	4b1b      	ldr	r3, [pc, #108]	; (8006cd0 <HAL_TIM_ConfigClockSource+0x18c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c64:	f021 0101 	bic.w	r1, r1, #1
 8006c68:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c6a:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c6c:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c70:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8006c74:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 8006c76:	6220      	str	r0, [r4, #32]
  HAL_StatusTypeDef status = HAL_OK;
 8006c78:	2000      	movs	r0, #0
  tmpsmcr = TIMx->SMCR;
 8006c7a:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c7c:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c7e:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8006c82:	60a3      	str	r3, [r4, #8]
}
 8006c84:	e793      	b.n	8006bae <HAL_TIM_ConfigClockSource+0x6a>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c86:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8006c8a:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c8c:	432b      	orrs	r3, r5
 8006c8e:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c90:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  HAL_StatusTypeDef status = HAL_OK;
 8006c94:	2000      	movs	r0, #0
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c96:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8006c9a:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c9c:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c9e:	68a3      	ldr	r3, [r4, #8]
 8006ca0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006ca4:	60a3      	str	r3, [r4, #8]
      break;
 8006ca6:	e782      	b.n	8006bae <HAL_TIM_ConfigClockSource+0x6a>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ca8:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8006cac:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006cae:	432b      	orrs	r3, r5
 8006cb0:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cb2:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  HAL_StatusTypeDef status = HAL_OK;
 8006cb6:	2000      	movs	r0, #0
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006cb8:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8006cbc:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8006cbe:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8006cc0:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006cc2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8006cc6:	60a3      	str	r3, [r4, #8]
      break;
 8006cc8:	e771      	b.n	8006bae <HAL_TIM_ConfigClockSource+0x6a>
 8006cca:	bf00      	nop
 8006ccc:	ffce0088 	.word	0xffce0088
 8006cd0:	ffcfff8f 	.word	0xffcfff8f
 8006cd4:	00100020 	.word	0x00100020
 8006cd8:	00100030 	.word	0x00100030

08006cdc <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cdc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d04b      	beq.n	8006d7c <HAL_TIMEx_MasterConfigSynchronization+0xa0>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ce4:	6803      	ldr	r3, [r0, #0]
 8006ce6:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 8006ce8:	2002      	movs	r0, #2
{
 8006cea:	b430      	push	{r4, r5}

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006cec:	4d24      	ldr	r5, [pc, #144]	; (8006d80 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
  htim->State = HAL_TIM_STATE_BUSY;
 8006cee:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006cf2:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 8006cf4:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8006cf6:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006cf8:	d029      	beq.n	8006d4e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8006cfa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006cfe:	42ab      	cmp	r3, r5
 8006d00:	d025      	beq.n	8006d4e <HAL_TIMEx_MasterConfigSynchronization+0x72>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d02:	4d20      	ldr	r5, [pc, #128]	; (8006d84 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d04:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d08:	42ab      	cmp	r3, r5
 8006d0a:	bf18      	it	ne
 8006d0c:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8006d10:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006d14:	bf0c      	ite	eq
 8006d16:	f04f 0c01 	moveq.w	ip, #1
 8006d1a:	f04f 0c00 	movne.w	ip, #0
 8006d1e:	42ab      	cmp	r3, r5
 8006d20:	bf08      	it	eq
 8006d22:	f04c 0c01 	orreq.w	ip, ip, #1
 8006d26:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006d2a:	42ab      	cmp	r3, r5
 8006d2c:	bf08      	it	eq
 8006d2e:	f04c 0c01 	orreq.w	ip, ip, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d32:	680d      	ldr	r5, [r1, #0]
 8006d34:	4328      	orrs	r0, r5
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d36:	4d14      	ldr	r5, [pc, #80]	; (8006d88 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
  htim->Instance->CR2 = tmpcr2;
 8006d38:	6058      	str	r0, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d3a:	42ab      	cmp	r3, r5
 8006d3c:	bf14      	ite	ne
 8006d3e:	4660      	movne	r0, ip
 8006d40:	f04c 0001 	orreq.w	r0, ip, #1
 8006d44:	b960      	cbnz	r0, 8006d60 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8006d46:	4811      	ldr	r0, [pc, #68]	; (8006d8c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006d48:	4283      	cmp	r3, r0
 8006d4a:	d009      	beq.n	8006d60 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8006d4c:	e00d      	b.n	8006d6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006d4e:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006d50:	f420 0070 	bic.w	r0, r0, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006d54:	4328      	orrs	r0, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d56:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d58:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d5c:	4328      	orrs	r0, r5
  htim->Instance->CR2 = tmpcr2;
 8006d5e:	6058      	str	r0, [r3, #4]
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d60:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d62:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d66:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d68:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8006d6a:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8006d6c:	2101      	movs	r1, #1

  return HAL_OK;
 8006d6e:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 8006d70:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8006d74:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8006d78:	bc30      	pop	{r4, r5}
 8006d7a:	4770      	bx	lr
  __HAL_LOCK(htim);
 8006d7c:	2002      	movs	r0, #2
}
 8006d7e:	4770      	bx	lr
 8006d80:	40010000 	.word	0x40010000
 8006d84:	40000400 	.word	0x40000400
 8006d88:	40001800 	.word	0x40001800
 8006d8c:	40014000 	.word	0x40014000

08006d90 <HAL_UART_ErrorCallback>:
 8006d90:	4770      	bx	lr
 8006d92:	bf00      	nop

08006d94 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d94:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d96:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006d9e:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006da2:	f7ff fff5 	bl	8006d90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006da6:	bd08      	pop	{r3, pc}

08006da8 <HAL_UARTEx_RxEventCallback>:
}
 8006da8:	4770      	bx	lr
 8006daa:	bf00      	nop

08006dac <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006dac:	6803      	ldr	r3, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006dae:	f640 0c0f 	movw	ip, #2063	; 0x80f
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006db2:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006db4:	6819      	ldr	r1, [r3, #0]
  if (errorflags == 0U)
 8006db6:	ea12 0f0c 	tst.w	r2, ip
{
 8006dba:	b570      	push	{r4, r5, r6, lr}
 8006dbc:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006dbe:	689d      	ldr	r5, [r3, #8]
  if (errorflags == 0U)
 8006dc0:	f000 8122 	beq.w	8007008 <HAL_UART_IRQHandler+0x25c>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006dc4:	48b1      	ldr	r0, [pc, #708]	; (800708c <HAL_UART_IRQHandler+0x2e0>)
 8006dc6:	ea05 0c00 	and.w	ip, r5, r0
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006dca:	48b1      	ldr	r0, [pc, #708]	; (8007090 <HAL_UART_IRQHandler+0x2e4>)
 8006dcc:	4008      	ands	r0, r1
 8006dce:	ea50 000c 	orrs.w	r0, r0, ip
 8006dd2:	f040 8089 	bne.w	8006ee8 <HAL_UART_IRQHandler+0x13c>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dd6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8006dd8:	2801      	cmp	r0, #1
 8006dda:	d022      	beq.n	8006e22 <HAL_UART_IRQHandler+0x76>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006ddc:	02d6      	lsls	r6, r2, #11
 8006dde:	d502      	bpl.n	8006de6 <HAL_UART_IRQHandler+0x3a>
 8006de0:	0268      	lsls	r0, r5, #9
 8006de2:	f100 813a 	bmi.w	800705a <HAL_UART_IRQHandler+0x2ae>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006de6:	0616      	lsls	r6, r2, #24
 8006de8:	d506      	bpl.n	8006df8 <HAL_UART_IRQHandler+0x4c>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006dea:	f405 0500 	and.w	r5, r5, #8388608	; 0x800000
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006dee:	f001 0080 	and.w	r0, r1, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006df2:	4328      	orrs	r0, r5
 8006df4:	f040 8129 	bne.w	800704a <HAL_UART_IRQHandler+0x29e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006df8:	0650      	lsls	r0, r2, #25
 8006dfa:	d567      	bpl.n	8006ecc <HAL_UART_IRQHandler+0x120>
 8006dfc:	064e      	lsls	r6, r1, #25
 8006dfe:	d565      	bpl.n	8006ecc <HAL_UART_IRQHandler+0x120>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e00:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e08:	e843 2100 	strex	r1, r2, [r3]
 8006e0c:	2900      	cmp	r1, #0
 8006e0e:	d1f7      	bne.n	8006e00 <HAL_UART_IRQHandler+0x54>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e10:	2220      	movs	r2, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006e12:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e14:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 8006e16:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  huart->TxISR = NULL;
 8006e1a:	67a3      	str	r3, [r4, #120]	; 0x78
  HAL_UART_TxCpltCallback(huart);
 8006e1c:	f7fa fa1c 	bl	8001258 <HAL_UART_TxCpltCallback>
}
 8006e20:	bd70      	pop	{r4, r5, r6, pc}
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006e22:	06d6      	lsls	r6, r2, #27
 8006e24:	d5da      	bpl.n	8006ddc <HAL_UART_IRQHandler+0x30>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006e26:	06c8      	lsls	r0, r1, #27
 8006e28:	d5d8      	bpl.n	8006ddc <HAL_UART_IRQHandler+0x30>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e2a:	2210      	movs	r2, #16
 8006e2c:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e2e:	689a      	ldr	r2, [r3, #8]
 8006e30:	0652      	lsls	r2, r2, #25
 8006e32:	f140 813c 	bpl.w	80070ae <HAL_UART_IRQHandler+0x302>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006e36:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8006e3a:	6801      	ldr	r1, [r0, #0]
 8006e3c:	684a      	ldr	r2, [r1, #4]
 8006e3e:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8006e40:	2a00      	cmp	r2, #0
 8006e42:	d0ed      	beq.n	8006e20 <HAL_UART_IRQHandler+0x74>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006e44:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8006e48:	4291      	cmp	r1, r2
 8006e4a:	d9e9      	bls.n	8006e20 <HAL_UART_IRQHandler+0x74>
        huart->RxXferCount = nb_remaining_rx_data;
 8006e4c:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006e50:	69c2      	ldr	r2, [r0, #28]
 8006e52:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8006e56:	d02f      	beq.n	8006eb8 <HAL_UART_IRQHandler+0x10c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e58:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e60:	e843 2100 	strex	r1, r2, [r3]
 8006e64:	2900      	cmp	r1, #0
 8006e66:	d1f7      	bne.n	8006e58 <HAL_UART_IRQHandler+0xac>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e68:	f103 0208 	add.w	r2, r3, #8
 8006e6c:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e70:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e74:	f103 0508 	add.w	r5, r3, #8
 8006e78:	e845 2100 	strex	r1, r2, [r5]
 8006e7c:	2900      	cmp	r1, #0
 8006e7e:	d1f3      	bne.n	8006e68 <HAL_UART_IRQHandler+0xbc>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e80:	f103 0208 	add.w	r2, r3, #8
 8006e84:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e8c:	f103 0508 	add.w	r5, r3, #8
 8006e90:	e845 2100 	strex	r1, r2, [r5]
 8006e94:	2900      	cmp	r1, #0
 8006e96:	d1f3      	bne.n	8006e80 <HAL_UART_IRQHandler+0xd4>
          huart->RxState = HAL_UART_STATE_READY;
 8006e98:	2220      	movs	r2, #32
 8006e9a:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e9e:	66e1      	str	r1, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea0:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ea4:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea8:	e843 2100 	strex	r1, r2, [r3]
 8006eac:	2900      	cmp	r1, #0
 8006eae:	d1f7      	bne.n	8006ea0 <HAL_UART_IRQHandler+0xf4>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006eb0:	f7fc fca8 	bl	8003804 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006eb4:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006eb8:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006eba:	4620      	mov	r0, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ebc:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006ebe:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006ec2:	1ac9      	subs	r1, r1, r3
 8006ec4:	b289      	uxth	r1, r1
 8006ec6:	f7ff ff6f 	bl	8006da8 <HAL_UARTEx_RxEventCallback>
}
 8006eca:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006ecc:	0215      	lsls	r5, r2, #8
 8006ece:	d502      	bpl.n	8006ed6 <HAL_UART_IRQHandler+0x12a>
 8006ed0:	0048      	lsls	r0, r1, #1
 8006ed2:	f100 80e7 	bmi.w	80070a4 <HAL_UART_IRQHandler+0x2f8>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006ed6:	01d3      	lsls	r3, r2, #7
 8006ed8:	d5a2      	bpl.n	8006e20 <HAL_UART_IRQHandler+0x74>
 8006eda:	2900      	cmp	r1, #0
 8006edc:	daa0      	bge.n	8006e20 <HAL_UART_IRQHandler+0x74>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006ede:	4620      	mov	r0, r4
}
 8006ee0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006ee4:	f000 bd78 	b.w	80079d8 <HAL_UARTEx_RxFifoFullCallback>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006ee8:	07d0      	lsls	r0, r2, #31
 8006eea:	d509      	bpl.n	8006f00 <HAL_UART_IRQHandler+0x154>
 8006eec:	05ce      	lsls	r6, r1, #23
 8006eee:	d507      	bpl.n	8006f00 <HAL_UART_IRQHandler+0x154>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006ef0:	2001      	movs	r0, #1
 8006ef2:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ef4:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8006ef8:	f040 0001 	orr.w	r0, r0, #1
 8006efc:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f00:	0790      	lsls	r0, r2, #30
 8006f02:	f140 8093 	bpl.w	800702c <HAL_UART_IRQHandler+0x280>
 8006f06:	07ee      	lsls	r6, r5, #31
 8006f08:	d50a      	bpl.n	8006f20 <HAL_UART_IRQHandler+0x174>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006f0a:	2002      	movs	r0, #2
 8006f0c:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f0e:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8006f12:	f040 0004 	orr.w	r0, r0, #4
 8006f16:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f1a:	0750      	lsls	r0, r2, #29
 8006f1c:	f100 808c 	bmi.w	8007038 <HAL_UART_IRQHandler+0x28c>
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006f20:	0716      	lsls	r6, r2, #28
 8006f22:	d50c      	bpl.n	8006f3e <HAL_UART_IRQHandler+0x192>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006f24:	f001 0020 	and.w	r0, r1, #32
 8006f28:	ea50 000c 	orrs.w	r0, r0, ip
 8006f2c:	d007      	beq.n	8006f3e <HAL_UART_IRQHandler+0x192>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f2e:	2008      	movs	r0, #8
 8006f30:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006f32:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8006f36:	f040 0008 	orr.w	r0, r0, #8
 8006f3a:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006f3e:	0510      	lsls	r0, r2, #20
 8006f40:	d50a      	bpl.n	8006f58 <HAL_UART_IRQHandler+0x1ac>
 8006f42:	014e      	lsls	r6, r1, #5
 8006f44:	d508      	bpl.n	8006f58 <HAL_UART_IRQHandler+0x1ac>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f46:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006f4a:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006f4c:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8006f50:	f040 0020 	orr.w	r0, r0, #32
 8006f54:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f58:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8006f5c:	2800      	cmp	r0, #0
 8006f5e:	f43f af5f 	beq.w	8006e20 <HAL_UART_IRQHandler+0x74>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006f62:	0690      	lsls	r0, r2, #26
 8006f64:	d50a      	bpl.n	8006f7c <HAL_UART_IRQHandler+0x1d0>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006f66:	f001 0120 	and.w	r1, r1, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006f6a:	f005 5580 	and.w	r5, r5, #268435456	; 0x10000000
 8006f6e:	4329      	orrs	r1, r5
 8006f70:	d004      	beq.n	8006f7c <HAL_UART_IRQHandler+0x1d0>
        if (huart->RxISR != NULL)
 8006f72:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8006f74:	b112      	cbz	r2, 8006f7c <HAL_UART_IRQHandler+0x1d0>
          huart->RxISR(huart);
 8006f76:	4620      	mov	r0, r4
 8006f78:	4790      	blx	r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006f7a:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 8006f7c:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006f80:	689a      	ldr	r2, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006f82:	f001 0128 	and.w	r1, r1, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006f86:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8006f8a:	ea52 0501 	orrs.w	r5, r2, r1
 8006f8e:	f000 80c4 	beq.w	800711a <HAL_UART_IRQHandler+0x36e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f92:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f96:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f9a:	e843 2100 	strex	r1, r2, [r3]
 8006f9e:	2900      	cmp	r1, #0
 8006fa0:	d1f7      	bne.n	8006f92 <HAL_UART_IRQHandler+0x1e6>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006fa2:	483c      	ldr	r0, [pc, #240]	; (8007094 <HAL_UART_IRQHandler+0x2e8>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa4:	f103 0208 	add.w	r2, r3, #8
 8006fa8:	e852 2f00 	ldrex	r2, [r2]
 8006fac:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fae:	f103 0508 	add.w	r5, r3, #8
 8006fb2:	e845 2100 	strex	r1, r2, [r5]
 8006fb6:	2900      	cmp	r1, #0
 8006fb8:	d1f4      	bne.n	8006fa4 <HAL_UART_IRQHandler+0x1f8>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fba:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8006fbc:	2a01      	cmp	r2, #1
 8006fbe:	d054      	beq.n	800706a <HAL_UART_IRQHandler+0x2be>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fc0:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8006fc2:	2120      	movs	r1, #32
 8006fc4:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fc8:	66e2      	str	r2, [r4, #108]	; 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fca:	6899      	ldr	r1, [r3, #8]
  huart->RxISR = NULL;
 8006fcc:	6762      	str	r2, [r4, #116]	; 0x74
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fce:	064a      	lsls	r2, r1, #25
 8006fd0:	d564      	bpl.n	800709c <HAL_UART_IRQHandler+0x2f0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd2:	f103 0208 	add.w	r2, r3, #8
 8006fd6:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fde:	f103 0008 	add.w	r0, r3, #8
 8006fe2:	e840 2100 	strex	r1, r2, [r0]
 8006fe6:	2900      	cmp	r1, #0
 8006fe8:	d1f3      	bne.n	8006fd2 <HAL_UART_IRQHandler+0x226>
          if (huart->hdmarx != NULL)
 8006fea:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8006fee:	2800      	cmp	r0, #0
 8006ff0:	d054      	beq.n	800709c <HAL_UART_IRQHandler+0x2f0>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006ff2:	4b29      	ldr	r3, [pc, #164]	; (8007098 <HAL_UART_IRQHandler+0x2ec>)
 8006ff4:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006ff6:	f7fc fd7d 	bl	8003af4 <HAL_DMA_Abort_IT>
 8006ffa:	2800      	cmp	r0, #0
 8006ffc:	f43f af10 	beq.w	8006e20 <HAL_UART_IRQHandler+0x74>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007000:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8007004:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007006:	e00e      	b.n	8007026 <HAL_UART_IRQHandler+0x27a>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007008:	0696      	lsls	r6, r2, #26
 800700a:	f57f aee4 	bpl.w	8006dd6 <HAL_UART_IRQHandler+0x2a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800700e:	f001 0c20 	and.w	ip, r1, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007012:	f005 5e80 	and.w	lr, r5, #268435456	; 0x10000000
 8007016:	ea5c 0c0e 	orrs.w	ip, ip, lr
 800701a:	f43f aedc 	beq.w	8006dd6 <HAL_UART_IRQHandler+0x2a>
      if (huart->RxISR != NULL)
 800701e:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8007020:	2b00      	cmp	r3, #0
 8007022:	f43f aefd 	beq.w	8006e20 <HAL_UART_IRQHandler+0x74>
}
 8007026:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800702a:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800702c:	0756      	lsls	r6, r2, #29
 800702e:	f57f af77 	bpl.w	8006f20 <HAL_UART_IRQHandler+0x174>
 8007032:	07e8      	lsls	r0, r5, #31
 8007034:	f57f af74 	bpl.w	8006f20 <HAL_UART_IRQHandler+0x174>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007038:	2004      	movs	r0, #4
 800703a:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800703c:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8007040:	f040 0002 	orr.w	r0, r0, #2
 8007044:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
 8007048:	e76a      	b.n	8006f20 <HAL_UART_IRQHandler+0x174>
    if (huart->TxISR != NULL)
 800704a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800704c:	2b00      	cmp	r3, #0
 800704e:	f43f aee7 	beq.w	8006e20 <HAL_UART_IRQHandler+0x74>
      huart->TxISR(huart);
 8007052:	4620      	mov	r0, r4
}
 8007054:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 8007058:	4718      	bx	r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800705a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 800705e:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007060:	621a      	str	r2, [r3, #32]
}
 8007062:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8007066:	f000 bcb5 	b.w	80079d4 <HAL_UARTEx_WakeupCallback>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800706a:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800706e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007072:	e843 2100 	strex	r1, r2, [r3]
 8007076:	2900      	cmp	r1, #0
 8007078:	d0a2      	beq.n	8006fc0 <HAL_UART_IRQHandler+0x214>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800707a:	e853 2f00 	ldrex	r2, [r3]
 800707e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007082:	e843 2100 	strex	r1, r2, [r3]
 8007086:	2900      	cmp	r1, #0
 8007088:	d1ef      	bne.n	800706a <HAL_UART_IRQHandler+0x2be>
 800708a:	e799      	b.n	8006fc0 <HAL_UART_IRQHandler+0x214>
 800708c:	10000001 	.word	0x10000001
 8007090:	04000120 	.word	0x04000120
 8007094:	effffffe 	.word	0xeffffffe
 8007098:	08006d95 	.word	0x08006d95
            HAL_UART_ErrorCallback(huart);
 800709c:	4620      	mov	r0, r4
 800709e:	f7ff fe77 	bl	8006d90 <HAL_UART_ErrorCallback>
}
 80070a2:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80070a4:	4620      	mov	r0, r4
}
 80070a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80070aa:	f000 bc97 	b.w	80079dc <HAL_UARTEx_TxFifoEmptyCallback>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80070ae:	f8b4 005e 	ldrh.w	r0, [r4, #94]	; 0x5e
 80070b2:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
      if ((huart->RxXferCount > 0U)
 80070b6:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80070ba:	1a09      	subs	r1, r1, r0
      if ((huart->RxXferCount > 0U)
 80070bc:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80070be:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 80070c0:	2a00      	cmp	r2, #0
 80070c2:	f43f aead 	beq.w	8006e20 <HAL_UART_IRQHandler+0x74>
 80070c6:	2900      	cmp	r1, #0
 80070c8:	f43f aeaa 	beq.w	8006e20 <HAL_UART_IRQHandler+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070cc:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80070d0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d4:	e843 2000 	strex	r0, r2, [r3]
 80070d8:	2800      	cmp	r0, #0
 80070da:	d1f7      	bne.n	80070cc <HAL_UART_IRQHandler+0x320>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80070dc:	4d12      	ldr	r5, [pc, #72]	; (8007128 <HAL_UART_IRQHandler+0x37c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070de:	f103 0208 	add.w	r2, r3, #8
 80070e2:	e852 2f00 	ldrex	r2, [r2]
 80070e6:	402a      	ands	r2, r5
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070e8:	f103 0c08 	add.w	ip, r3, #8
 80070ec:	e84c 2000 	strex	r0, r2, [ip]
 80070f0:	2800      	cmp	r0, #0
 80070f2:	d1f4      	bne.n	80070de <HAL_UART_IRQHandler+0x332>
        huart->RxState = HAL_UART_STATE_READY;
 80070f4:	2220      	movs	r2, #32
        huart->RxISR = NULL;
 80070f6:	6760      	str	r0, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80070f8:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070fc:	66e0      	str	r0, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070fe:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007102:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007106:	e843 2000 	strex	r0, r2, [r3]
 800710a:	2800      	cmp	r0, #0
 800710c:	d1f7      	bne.n	80070fe <HAL_UART_IRQHandler+0x352>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800710e:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007110:	4620      	mov	r0, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007112:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007114:	f7ff fe48 	bl	8006da8 <HAL_UARTEx_RxEventCallback>
}
 8007118:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800711a:	4620      	mov	r0, r4
 800711c:	f7ff fe38 	bl	8006d90 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007120:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
}
 8007124:	bd70      	pop	{r4, r5, r6, pc}
 8007126:	bf00      	nop
 8007128:	effffffe 	.word	0xeffffffe

0800712c <UART_SetConfig>:
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800712c:	6901      	ldr	r1, [r0, #16]
 800712e:	6882      	ldr	r2, [r0, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 8007130:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007132:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007134:	49c0      	ldr	r1, [pc, #768]	; (8007438 <UART_SetConfig+0x30c>)
{
 8007136:	b530      	push	{r4, r5, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007138:	6945      	ldr	r5, [r0, #20]
{
 800713a:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800713c:	69c0      	ldr	r0, [r0, #28]
{
 800713e:	b087      	sub	sp, #28
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007140:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007142:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007144:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007146:	4029      	ands	r1, r5
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007148:	4dbc      	ldr	r5, [pc, #752]	; (800743c <UART_SetConfig+0x310>)
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800714a:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800714c:	68e1      	ldr	r1, [r4, #12]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800714e:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007150:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007152:	685a      	ldr	r2, [r3, #4]
 8007154:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8007158:	ea42 0201 	orr.w	r2, r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800715c:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800715e:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007160:	f000 80e0 	beq.w	8007324 <UART_SetConfig+0x1f8>
    tmpreg |= huart->Init.OneBitSampling;
 8007164:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007166:	689d      	ldr	r5, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 8007168:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800716a:	4ab5      	ldr	r2, [pc, #724]	; (8007440 <UART_SetConfig+0x314>)
 800716c:	402a      	ands	r2, r5
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800716e:	6a65      	ldr	r5, [r4, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007170:	4311      	orrs	r1, r2
 8007172:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007176:	f022 020f 	bic.w	r2, r2, #15
 800717a:	432a      	orrs	r2, r5
 800717c:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800717e:	4ab1      	ldr	r2, [pc, #708]	; (8007444 <UART_SetConfig+0x318>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d023      	beq.n	80071cc <UART_SetConfig+0xa0>
 8007184:	4ab0      	ldr	r2, [pc, #704]	; (8007448 <UART_SetConfig+0x31c>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d076      	beq.n	8007278 <UART_SetConfig+0x14c>
 800718a:	4ab0      	ldr	r2, [pc, #704]	; (800744c <UART_SetConfig+0x320>)
 800718c:	4293      	cmp	r3, r2
 800718e:	f000 818f 	beq.w	80074b0 <UART_SetConfig+0x384>
 8007192:	4aaf      	ldr	r2, [pc, #700]	; (8007450 <UART_SetConfig+0x324>)
 8007194:	4293      	cmp	r3, r2
 8007196:	f000 81e1 	beq.w	800755c <UART_SetConfig+0x430>
 800719a:	4aae      	ldr	r2, [pc, #696]	; (8007454 <UART_SetConfig+0x328>)
 800719c:	4293      	cmp	r3, r2
 800719e:	f000 8121 	beq.w	80073e4 <UART_SetConfig+0x2b8>
 80071a2:	4aad      	ldr	r2, [pc, #692]	; (8007458 <UART_SetConfig+0x32c>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	f000 81e3 	beq.w	8007570 <UART_SetConfig+0x444>
 80071aa:	4aac      	ldr	r2, [pc, #688]	; (800745c <UART_SetConfig+0x330>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	f000 8234 	beq.w	800761a <UART_SetConfig+0x4ee>
 80071b2:	4aab      	ldr	r2, [pc, #684]	; (8007460 <UART_SetConfig+0x334>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	f000 81e7 	beq.w	8007588 <UART_SetConfig+0x45c>
        ret = HAL_ERROR;
 80071ba:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 80071bc:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 80071be:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->RxISR = NULL;
 80071c2:	6763      	str	r3, [r4, #116]	; 0x74
  huart->NbRxDataToProcess = 1;
 80071c4:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 80071c6:	67a3      	str	r3, [r4, #120]	; 0x78
}
 80071c8:	b007      	add	sp, #28
 80071ca:	bd30      	pop	{r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80071cc:	4ba5      	ldr	r3, [pc, #660]	; (8007464 <UART_SetConfig+0x338>)
 80071ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80071d4:	2b28      	cmp	r3, #40	; 0x28
 80071d6:	d8f0      	bhi.n	80071ba <UART_SetConfig+0x8e>
 80071d8:	4aa3      	ldr	r2, [pc, #652]	; (8007468 <UART_SetConfig+0x33c>)
 80071da:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071dc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80071e0:	d055      	beq.n	800728e <UART_SetConfig+0x162>
    switch (clocksource)
 80071e2:	2b20      	cmp	r3, #32
 80071e4:	f200 814a 	bhi.w	800747c <UART_SetConfig+0x350>
 80071e8:	2b20      	cmp	r3, #32
 80071ea:	d8e6      	bhi.n	80071ba <UART_SetConfig+0x8e>
 80071ec:	a201      	add	r2, pc, #4	; (adr r2, 80071f4 <UART_SetConfig+0xc8>)
 80071ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f2:	bf00      	nop
 80071f4:	08007433 	.word	0x08007433
 80071f8:	0800742d 	.word	0x0800742d
 80071fc:	080071bb 	.word	0x080071bb
 8007200:	080071bb 	.word	0x080071bb
 8007204:	0800741d 	.word	0x0800741d
 8007208:	080071bb 	.word	0x080071bb
 800720c:	080071bb 	.word	0x080071bb
 8007210:	080071bb 	.word	0x080071bb
 8007214:	0800740f 	.word	0x0800740f
 8007218:	080071bb 	.word	0x080071bb
 800721c:	080071bb 	.word	0x080071bb
 8007220:	080071bb 	.word	0x080071bb
 8007224:	080071bb 	.word	0x080071bb
 8007228:	080071bb 	.word	0x080071bb
 800722c:	080071bb 	.word	0x080071bb
 8007230:	080071bb 	.word	0x080071bb
 8007234:	080073f9 	.word	0x080073f9
 8007238:	080071bb 	.word	0x080071bb
 800723c:	080071bb 	.word	0x080071bb
 8007240:	080071bb 	.word	0x080071bb
 8007244:	080071bb 	.word	0x080071bb
 8007248:	080071bb 	.word	0x080071bb
 800724c:	080071bb 	.word	0x080071bb
 8007250:	080071bb 	.word	0x080071bb
 8007254:	080071bb 	.word	0x080071bb
 8007258:	080071bb 	.word	0x080071bb
 800725c:	080071bb 	.word	0x080071bb
 8007260:	080071bb 	.word	0x080071bb
 8007264:	080071bb 	.word	0x080071bb
 8007268:	080071bb 	.word	0x080071bb
 800726c:	080071bb 	.word	0x080071bb
 8007270:	080071bb 	.word	0x080071bb
 8007274:	0800759d 	.word	0x0800759d
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007278:	4b7a      	ldr	r3, [pc, #488]	; (8007464 <UART_SetConfig+0x338>)
 800727a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800727c:	f003 0307 	and.w	r3, r3, #7
 8007280:	2b05      	cmp	r3, #5
 8007282:	d89a      	bhi.n	80071ba <UART_SetConfig+0x8e>
 8007284:	4a79      	ldr	r2, [pc, #484]	; (800746c <UART_SetConfig+0x340>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007286:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800728a:	5cd3      	ldrb	r3, [r2, r3]
 800728c:	d1a9      	bne.n	80071e2 <UART_SetConfig+0xb6>
    switch (clocksource)
 800728e:	2b20      	cmp	r3, #32
 8007290:	f200 8145 	bhi.w	800751e <UART_SetConfig+0x3f2>
 8007294:	2b20      	cmp	r3, #32
 8007296:	d890      	bhi.n	80071ba <UART_SetConfig+0x8e>
 8007298:	a201      	add	r2, pc, #4	; (adr r2, 80072a0 <UART_SetConfig+0x174>)
 800729a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800729e:	bf00      	nop
 80072a0:	08007607 	.word	0x08007607
 80072a4:	08007601 	.word	0x08007601
 80072a8:	080071bb 	.word	0x080071bb
 80072ac:	080071bb 	.word	0x080071bb
 80072b0:	0800760d 	.word	0x0800760d
 80072b4:	080071bb 	.word	0x080071bb
 80072b8:	080071bb 	.word	0x080071bb
 80072bc:	080071bb 	.word	0x080071bb
 80072c0:	080075ef 	.word	0x080075ef
 80072c4:	080071bb 	.word	0x080071bb
 80072c8:	080071bb 	.word	0x080071bb
 80072cc:	080071bb 	.word	0x080071bb
 80072d0:	080071bb 	.word	0x080071bb
 80072d4:	080071bb 	.word	0x080071bb
 80072d8:	080071bb 	.word	0x080071bb
 80072dc:	080071bb 	.word	0x080071bb
 80072e0:	080075db 	.word	0x080075db
 80072e4:	080071bb 	.word	0x080071bb
 80072e8:	080071bb 	.word	0x080071bb
 80072ec:	080071bb 	.word	0x080071bb
 80072f0:	080071bb 	.word	0x080071bb
 80072f4:	080071bb 	.word	0x080071bb
 80072f8:	080071bb 	.word	0x080071bb
 80072fc:	080071bb 	.word	0x080071bb
 8007300:	080071bb 	.word	0x080071bb
 8007304:	080071bb 	.word	0x080071bb
 8007308:	080071bb 	.word	0x080071bb
 800730c:	080071bb 	.word	0x080071bb
 8007310:	080071bb 	.word	0x080071bb
 8007314:	080071bb 	.word	0x080071bb
 8007318:	080071bb 	.word	0x080071bb
 800731c:	080071bb 	.word	0x080071bb
 8007320:	08007617 	.word	0x08007617
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007324:	6898      	ldr	r0, [r3, #8]
 8007326:	4a46      	ldr	r2, [pc, #280]	; (8007440 <UART_SetConfig+0x314>)
 8007328:	4002      	ands	r2, r0
  UART_GETCLOCKSOURCE(huart, clocksource);
 800732a:	484e      	ldr	r0, [pc, #312]	; (8007464 <UART_SetConfig+0x338>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800732c:	430a      	orrs	r2, r1
 800732e:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007332:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007334:	f022 020f 	bic.w	r2, r2, #15
 8007338:	430a      	orrs	r2, r1
 800733a:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800733c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800733e:	f003 0307 	and.w	r3, r3, #7
 8007342:	2b05      	cmp	r3, #5
 8007344:	f63f af39 	bhi.w	80071ba <UART_SetConfig+0x8e>
 8007348:	4a49      	ldr	r2, [pc, #292]	; (8007470 <UART_SetConfig+0x344>)
 800734a:	5cd3      	ldrb	r3, [r2, r3]
    switch (clocksource)
 800734c:	2b20      	cmp	r3, #32
 800734e:	f200 80b9 	bhi.w	80074c4 <UART_SetConfig+0x398>
 8007352:	2b01      	cmp	r3, #1
 8007354:	f67f af31 	bls.w	80071ba <UART_SetConfig+0x8e>
 8007358:	3b02      	subs	r3, #2
 800735a:	2b1e      	cmp	r3, #30
 800735c:	f63f af2d 	bhi.w	80071ba <UART_SetConfig+0x8e>
 8007360:	a201      	add	r2, pc, #4	; (adr r2, 8007368 <UART_SetConfig+0x23c>)
 8007362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007366:	bf00      	nop
 8007368:	080075d1 	.word	0x080075d1
 800736c:	080071bb 	.word	0x080071bb
 8007370:	080075c7 	.word	0x080075c7
 8007374:	080071bb 	.word	0x080071bb
 8007378:	080071bb 	.word	0x080071bb
 800737c:	080071bb 	.word	0x080071bb
 8007380:	080075b5 	.word	0x080075b5
 8007384:	080071bb 	.word	0x080071bb
 8007388:	080071bb 	.word	0x080071bb
 800738c:	080071bb 	.word	0x080071bb
 8007390:	080071bb 	.word	0x080071bb
 8007394:	080071bb 	.word	0x080071bb
 8007398:	080071bb 	.word	0x080071bb
 800739c:	080071bb 	.word	0x080071bb
 80073a0:	080075a1 	.word	0x080075a1
 80073a4:	080071bb 	.word	0x080071bb
 80073a8:	080071bb 	.word	0x080071bb
 80073ac:	080071bb 	.word	0x080071bb
 80073b0:	080071bb 	.word	0x080071bb
 80073b4:	080071bb 	.word	0x080071bb
 80073b8:	080071bb 	.word	0x080071bb
 80073bc:	080071bb 	.word	0x080071bb
 80073c0:	080071bb 	.word	0x080071bb
 80073c4:	080071bb 	.word	0x080071bb
 80073c8:	080071bb 	.word	0x080071bb
 80073cc:	080071bb 	.word	0x080071bb
 80073d0:	080071bb 	.word	0x080071bb
 80073d4:	080071bb 	.word	0x080071bb
 80073d8:	080071bb 	.word	0x080071bb
 80073dc:	080071bb 	.word	0x080071bb
 80073e0:	080075d7 	.word	0x080075d7
  UART_GETCLOCKSOURCE(huart, clocksource);
 80073e4:	4b1f      	ldr	r3, [pc, #124]	; (8007464 <UART_SetConfig+0x338>)
 80073e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073e8:	f003 0307 	and.w	r3, r3, #7
 80073ec:	2b05      	cmp	r3, #5
 80073ee:	f63f aee4 	bhi.w	80071ba <UART_SetConfig+0x8e>
 80073f2:	4a20      	ldr	r2, [pc, #128]	; (8007474 <UART_SetConfig+0x348>)
 80073f4:	5cd3      	ldrb	r3, [r2, r3]
 80073f6:	e6f1      	b.n	80071dc <UART_SetConfig+0xb0>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073f8:	4b1a      	ldr	r3, [pc, #104]	; (8007464 <UART_SetConfig+0x338>)
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	0692      	lsls	r2, r2, #26
 80073fe:	f140 80c1 	bpl.w	8007584 <UART_SetConfig+0x458>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	481c      	ldr	r0, [pc, #112]	; (8007478 <UART_SetConfig+0x34c>)
 8007406:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800740a:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800740c:	e03b      	b.n	8007486 <UART_SetConfig+0x35a>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800740e:	a803      	add	r0, sp, #12
 8007410:	f7fe ff64 	bl	80062dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007414:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 8007416:	b938      	cbnz	r0, 8007428 <UART_SetConfig+0x2fc>
        ret = HAL_ERROR;
 8007418:	2000      	movs	r0, #0
 800741a:	e6cf      	b.n	80071bc <UART_SetConfig+0x90>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800741c:	4668      	mov	r0, sp
 800741e:	f7fe feaf 	bl	8006180 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007422:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 8007424:	2800      	cmp	r0, #0
 8007426:	d0f7      	beq.n	8007418 <UART_SetConfig+0x2ec>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007428:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800742a:	e02c      	b.n	8007486 <UART_SetConfig+0x35a>
        pclk = HAL_RCC_GetPCLK2Freq();
 800742c:	f7fd ff5a 	bl	80052e4 <HAL_RCC_GetPCLK2Freq>
        break;
 8007430:	e7f1      	b.n	8007416 <UART_SetConfig+0x2ea>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007432:	f7fd ff0f 	bl	8005254 <HAL_RCC_GetPCLK1Freq>
        break;
 8007436:	e7ee      	b.n	8007416 <UART_SetConfig+0x2ea>
 8007438:	cfff69f3 	.word	0xcfff69f3
 800743c:	58000c00 	.word	0x58000c00
 8007440:	11fff4ff 	.word	0x11fff4ff
 8007444:	40011000 	.word	0x40011000
 8007448:	40004400 	.word	0x40004400
 800744c:	40004800 	.word	0x40004800
 8007450:	40004c00 	.word	0x40004c00
 8007454:	40005000 	.word	0x40005000
 8007458:	40011400 	.word	0x40011400
 800745c:	40007800 	.word	0x40007800
 8007460:	40007c00 	.word	0x40007c00
 8007464:	58024400 	.word	0x58024400
 8007468:	080084b4 	.word	0x080084b4
 800746c:	080084e0 	.word	0x080084e0
 8007470:	080084e8 	.word	0x080084e8
 8007474:	080084e0 	.word	0x080084e0
 8007478:	03d09000 	.word	0x03d09000
    switch (clocksource)
 800747c:	2b40      	cmp	r3, #64	; 0x40
 800747e:	f47f ae9c 	bne.w	80071ba <UART_SetConfig+0x8e>
 8007482:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007486:	4b6c      	ldr	r3, [pc, #432]	; (8007638 <UART_SetConfig+0x50c>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007488:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800748c:	6862      	ldr	r2, [r4, #4]
 800748e:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 8007492:	fbb0 f3f3 	udiv	r3, r0, r3
 8007496:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800749a:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800749e:	f1a3 0210 	sub.w	r2, r3, #16
 80074a2:	428a      	cmp	r2, r1
 80074a4:	f63f ae89 	bhi.w	80071ba <UART_SetConfig+0x8e>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80074a8:	6822      	ldr	r2, [r4, #0]
 80074aa:	2000      	movs	r0, #0
 80074ac:	60d3      	str	r3, [r2, #12]
 80074ae:	e685      	b.n	80071bc <UART_SetConfig+0x90>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80074b0:	4b62      	ldr	r3, [pc, #392]	; (800763c <UART_SetConfig+0x510>)
 80074b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074b4:	f003 0307 	and.w	r3, r3, #7
 80074b8:	2b05      	cmp	r3, #5
 80074ba:	f63f ae7e 	bhi.w	80071ba <UART_SetConfig+0x8e>
 80074be:	4a60      	ldr	r2, [pc, #384]	; (8007640 <UART_SetConfig+0x514>)
 80074c0:	5cd3      	ldrb	r3, [r2, r3]
 80074c2:	e68b      	b.n	80071dc <UART_SetConfig+0xb0>
    switch (clocksource)
 80074c4:	2b40      	cmp	r3, #64	; 0x40
 80074c6:	f47f ae78 	bne.w	80071ba <UART_SetConfig+0x8e>
 80074ca:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80074ce:	4b5a      	ldr	r3, [pc, #360]	; (8007638 <UART_SetConfig+0x50c>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80074d0:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80074d2:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80074d6:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80074da:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80074de:	4299      	cmp	r1, r3
 80074e0:	f63f ae6b 	bhi.w	80071ba <UART_SetConfig+0x8e>
 80074e4:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 80074e8:	f63f ae67 	bhi.w	80071ba <UART_SetConfig+0x8e>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074ec:	2300      	movs	r3, #0
 80074ee:	4619      	mov	r1, r3
 80074f0:	f7f8 fef2 	bl	80002d8 <__aeabi_uldivmod>
 80074f4:	462a      	mov	r2, r5
 80074f6:	0209      	lsls	r1, r1, #8
 80074f8:	0203      	lsls	r3, r0, #8
 80074fa:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 80074fe:	0868      	lsrs	r0, r5, #1
 8007500:	1818      	adds	r0, r3, r0
 8007502:	f04f 0300 	mov.w	r3, #0
 8007506:	f141 0100 	adc.w	r1, r1, #0
 800750a:	f7f8 fee5 	bl	80002d8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800750e:	4a4d      	ldr	r2, [pc, #308]	; (8007644 <UART_SetConfig+0x518>)
 8007510:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007514:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007516:	4291      	cmp	r1, r2
 8007518:	f63f ae4f 	bhi.w	80071ba <UART_SetConfig+0x8e>
 800751c:	e7c4      	b.n	80074a8 <UART_SetConfig+0x37c>
    switch (clocksource)
 800751e:	2b40      	cmp	r3, #64	; 0x40
 8007520:	f47f ae4b 	bne.w	80071ba <UART_SetConfig+0x8e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007524:	4b44      	ldr	r3, [pc, #272]	; (8007638 <UART_SetConfig+0x50c>)
 8007526:	6862      	ldr	r2, [r4, #4]
 8007528:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
 800752c:	0853      	lsrs	r3, r2, #1
 800752e:	fbb0 f0f1 	udiv	r0, r0, r1
 8007532:	eb03 0340 	add.w	r3, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007536:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800753a:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800753e:	f1a3 0210 	sub.w	r2, r3, #16
 8007542:	428a      	cmp	r2, r1
 8007544:	f63f ae39 	bhi.w	80071ba <UART_SetConfig+0x8e>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007548:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800754c:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8007550:	6821      	ldr	r1, [r4, #0]
 8007552:	2000      	movs	r0, #0
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007554:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 8007556:	4313      	orrs	r3, r2
 8007558:	60cb      	str	r3, [r1, #12]
 800755a:	e62f      	b.n	80071bc <UART_SetConfig+0x90>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800755c:	4b37      	ldr	r3, [pc, #220]	; (800763c <UART_SetConfig+0x510>)
 800755e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007560:	f003 0307 	and.w	r3, r3, #7
 8007564:	2b05      	cmp	r3, #5
 8007566:	f63f ae28 	bhi.w	80071ba <UART_SetConfig+0x8e>
 800756a:	4a37      	ldr	r2, [pc, #220]	; (8007648 <UART_SetConfig+0x51c>)
 800756c:	5cd3      	ldrb	r3, [r2, r3]
 800756e:	e635      	b.n	80071dc <UART_SetConfig+0xb0>
 8007570:	4b32      	ldr	r3, [pc, #200]	; (800763c <UART_SetConfig+0x510>)
 8007572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007574:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007578:	2b28      	cmp	r3, #40	; 0x28
 800757a:	f63f ae1e 	bhi.w	80071ba <UART_SetConfig+0x8e>
 800757e:	4a33      	ldr	r2, [pc, #204]	; (800764c <UART_SetConfig+0x520>)
 8007580:	5cd3      	ldrb	r3, [r2, r3]
 8007582:	e62b      	b.n	80071dc <UART_SetConfig+0xb0>
          pclk = (uint32_t) HSI_VALUE;
 8007584:	4832      	ldr	r0, [pc, #200]	; (8007650 <UART_SetConfig+0x524>)
 8007586:	e77e      	b.n	8007486 <UART_SetConfig+0x35a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007588:	4b2c      	ldr	r3, [pc, #176]	; (800763c <UART_SetConfig+0x510>)
 800758a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800758c:	f003 0307 	and.w	r3, r3, #7
 8007590:	2b05      	cmp	r3, #5
 8007592:	f63f ae12 	bhi.w	80071ba <UART_SetConfig+0x8e>
 8007596:	4a2f      	ldr	r2, [pc, #188]	; (8007654 <UART_SetConfig+0x528>)
 8007598:	5cd3      	ldrb	r3, [r2, r3]
 800759a:	e61f      	b.n	80071dc <UART_SetConfig+0xb0>
        pclk = (uint32_t) CSI_VALUE;
 800759c:	482e      	ldr	r0, [pc, #184]	; (8007658 <UART_SetConfig+0x52c>)
 800759e:	e772      	b.n	8007486 <UART_SetConfig+0x35a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075a0:	4b26      	ldr	r3, [pc, #152]	; (800763c <UART_SetConfig+0x510>)
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	0690      	lsls	r0, r2, #26
 80075a6:	d542      	bpl.n	800762e <UART_SetConfig+0x502>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4829      	ldr	r0, [pc, #164]	; (8007650 <UART_SetConfig+0x524>)
 80075ac:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80075b0:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 80075b2:	e78c      	b.n	80074ce <UART_SetConfig+0x3a2>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075b4:	a803      	add	r0, sp, #12
 80075b6:	f7fe fe91 	bl	80062dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80075ba:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 80075bc:	2800      	cmp	r0, #0
 80075be:	f43f af2b 	beq.w	8007418 <UART_SetConfig+0x2ec>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80075c2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80075c4:	e783      	b.n	80074ce <UART_SetConfig+0x3a2>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075c6:	4668      	mov	r0, sp
 80075c8:	f7fe fdda 	bl	8006180 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80075cc:	9801      	ldr	r0, [sp, #4]
        break;
 80075ce:	e7f5      	b.n	80075bc <UART_SetConfig+0x490>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80075d0:	f7fe fdc4 	bl	800615c <HAL_RCCEx_GetD3PCLK1Freq>
        break;
 80075d4:	e7f2      	b.n	80075bc <UART_SetConfig+0x490>
        pclk = (uint32_t) CSI_VALUE;
 80075d6:	4820      	ldr	r0, [pc, #128]	; (8007658 <UART_SetConfig+0x52c>)
 80075d8:	e779      	b.n	80074ce <UART_SetConfig+0x3a2>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075da:	4b18      	ldr	r3, [pc, #96]	; (800763c <UART_SetConfig+0x510>)
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	0691      	lsls	r1, r2, #26
 80075e0:	d527      	bpl.n	8007632 <UART_SetConfig+0x506>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	481a      	ldr	r0, [pc, #104]	; (8007650 <UART_SetConfig+0x524>)
 80075e6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80075ea:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 80075ec:	e79a      	b.n	8007524 <UART_SetConfig+0x3f8>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075ee:	a803      	add	r0, sp, #12
 80075f0:	f7fe fe74 	bl	80062dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80075f4:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 80075f6:	2800      	cmp	r0, #0
 80075f8:	f43f af0e 	beq.w	8007418 <UART_SetConfig+0x2ec>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075fc:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80075fe:	e791      	b.n	8007524 <UART_SetConfig+0x3f8>
        pclk = HAL_RCC_GetPCLK2Freq();
 8007600:	f7fd fe70 	bl	80052e4 <HAL_RCC_GetPCLK2Freq>
        break;
 8007604:	e7f7      	b.n	80075f6 <UART_SetConfig+0x4ca>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007606:	f7fd fe25 	bl	8005254 <HAL_RCC_GetPCLK1Freq>
        break;
 800760a:	e7f4      	b.n	80075f6 <UART_SetConfig+0x4ca>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800760c:	4668      	mov	r0, sp
 800760e:	f7fe fdb7 	bl	8006180 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007612:	9801      	ldr	r0, [sp, #4]
        break;
 8007614:	e7ef      	b.n	80075f6 <UART_SetConfig+0x4ca>
        pclk = (uint32_t) CSI_VALUE;
 8007616:	4810      	ldr	r0, [pc, #64]	; (8007658 <UART_SetConfig+0x52c>)
 8007618:	e784      	b.n	8007524 <UART_SetConfig+0x3f8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800761a:	4b08      	ldr	r3, [pc, #32]	; (800763c <UART_SetConfig+0x510>)
 800761c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800761e:	f003 0307 	and.w	r3, r3, #7
 8007622:	2b05      	cmp	r3, #5
 8007624:	f63f adc9 	bhi.w	80071ba <UART_SetConfig+0x8e>
 8007628:	4a0c      	ldr	r2, [pc, #48]	; (800765c <UART_SetConfig+0x530>)
 800762a:	5cd3      	ldrb	r3, [r2, r3]
 800762c:	e5d6      	b.n	80071dc <UART_SetConfig+0xb0>
          pclk = (uint32_t) HSI_VALUE;
 800762e:	4808      	ldr	r0, [pc, #32]	; (8007650 <UART_SetConfig+0x524>)
 8007630:	e74d      	b.n	80074ce <UART_SetConfig+0x3a2>
          pclk = (uint32_t) HSI_VALUE;
 8007632:	4807      	ldr	r0, [pc, #28]	; (8007650 <UART_SetConfig+0x524>)
 8007634:	e776      	b.n	8007524 <UART_SetConfig+0x3f8>
 8007636:	bf00      	nop
 8007638:	080084f0 	.word	0x080084f0
 800763c:	58024400 	.word	0x58024400
 8007640:	080084e0 	.word	0x080084e0
 8007644:	000ffcff 	.word	0x000ffcff
 8007648:	080084e0 	.word	0x080084e0
 800764c:	080084b4 	.word	0x080084b4
 8007650:	03d09000 	.word	0x03d09000
 8007654:	080084e0 	.word	0x080084e0
 8007658:	003d0900 	.word	0x003d0900
 800765c:	080084e0 	.word	0x080084e0

08007660 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007660:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007662:	07da      	lsls	r2, r3, #31
{
 8007664:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007666:	d506      	bpl.n	8007676 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007668:	6801      	ldr	r1, [r0, #0]
 800766a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800766c:	684a      	ldr	r2, [r1, #4]
 800766e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8007672:	4322      	orrs	r2, r4
 8007674:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007676:	079c      	lsls	r4, r3, #30
 8007678:	d506      	bpl.n	8007688 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800767a:	6801      	ldr	r1, [r0, #0]
 800767c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800767e:	684a      	ldr	r2, [r1, #4]
 8007680:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007684:	4322      	orrs	r2, r4
 8007686:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007688:	0759      	lsls	r1, r3, #29
 800768a:	d506      	bpl.n	800769a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800768c:	6801      	ldr	r1, [r0, #0]
 800768e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8007690:	684a      	ldr	r2, [r1, #4]
 8007692:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007696:	4322      	orrs	r2, r4
 8007698:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800769a:	071a      	lsls	r2, r3, #28
 800769c:	d506      	bpl.n	80076ac <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800769e:	6801      	ldr	r1, [r0, #0]
 80076a0:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80076a2:	684a      	ldr	r2, [r1, #4]
 80076a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80076a8:	4322      	orrs	r2, r4
 80076aa:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80076ac:	06dc      	lsls	r4, r3, #27
 80076ae:	d506      	bpl.n	80076be <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80076b0:	6801      	ldr	r1, [r0, #0]
 80076b2:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80076b4:	688a      	ldr	r2, [r1, #8]
 80076b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80076ba:	4322      	orrs	r2, r4
 80076bc:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80076be:	0699      	lsls	r1, r3, #26
 80076c0:	d506      	bpl.n	80076d0 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80076c2:	6801      	ldr	r1, [r0, #0]
 80076c4:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80076c6:	688a      	ldr	r2, [r1, #8]
 80076c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80076cc:	4322      	orrs	r2, r4
 80076ce:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80076d0:	065a      	lsls	r2, r3, #25
 80076d2:	d50a      	bpl.n	80076ea <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80076d4:	6801      	ldr	r1, [r0, #0]
 80076d6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80076d8:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80076da:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80076de:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80076e2:	ea42 0204 	orr.w	r2, r2, r4
 80076e6:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80076e8:	d00b      	beq.n	8007702 <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80076ea:	061b      	lsls	r3, r3, #24
 80076ec:	d506      	bpl.n	80076fc <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80076ee:	6802      	ldr	r2, [r0, #0]
 80076f0:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80076f2:	6853      	ldr	r3, [r2, #4]
 80076f4:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80076f8:	430b      	orrs	r3, r1
 80076fa:	6053      	str	r3, [r2, #4]
}
 80076fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007700:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007702:	684a      	ldr	r2, [r1, #4]
 8007704:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8007706:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800770a:	4322      	orrs	r2, r4
 800770c:	604a      	str	r2, [r1, #4]
 800770e:	e7ec      	b.n	80076ea <UART_AdvFeatureConfig+0x8a>

08007710 <UART_CheckIdleState>:
{
 8007710:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007712:	2300      	movs	r3, #0
{
 8007714:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007716:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  tickstart = HAL_GetTick();
 800771a:	f7fa f9af 	bl	8001a7c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800771e:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8007720:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007722:	6813      	ldr	r3, [r2, #0]
 8007724:	071b      	lsls	r3, r3, #28
 8007726:	d40f      	bmi.n	8007748 <UART_CheckIdleState+0x38>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007728:	6813      	ldr	r3, [r2, #0]
 800772a:	0759      	lsls	r1, r3, #29
 800772c:	d431      	bmi.n	8007792 <UART_CheckIdleState+0x82>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800772e:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8007730:	2220      	movs	r2, #32
  return HAL_OK;
 8007732:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 8007734:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007738:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800773c:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800773e:	6723      	str	r3, [r4, #112]	; 0x70
      __HAL_UNLOCK(huart);
 8007740:	2300      	movs	r3, #0
 8007742:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
}
 8007746:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007748:	69d3      	ldr	r3, [r2, #28]
 800774a:	0298      	lsls	r0, r3, #10
 800774c:	d4ec      	bmi.n	8007728 <UART_CheckIdleState+0x18>
 800774e:	e00c      	b.n	800776a <UART_CheckIdleState+0x5a>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007750:	6819      	ldr	r1, [r3, #0]
 8007752:	461a      	mov	r2, r3
 8007754:	0749      	lsls	r1, r1, #29
 8007756:	d505      	bpl.n	8007764 <UART_CheckIdleState+0x54>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007758:	69d9      	ldr	r1, [r3, #28]
 800775a:	0708      	lsls	r0, r1, #28
 800775c:	d44b      	bmi.n	80077f6 <UART_CheckIdleState+0xe6>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800775e:	69d9      	ldr	r1, [r3, #28]
 8007760:	0509      	lsls	r1, r1, #20
 8007762:	d476      	bmi.n	8007852 <UART_CheckIdleState+0x142>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007764:	69db      	ldr	r3, [r3, #28]
 8007766:	0298      	lsls	r0, r3, #10
 8007768:	d4de      	bmi.n	8007728 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800776a:	f7fa f987 	bl	8001a7c <HAL_GetTick>
 800776e:	1b43      	subs	r3, r0, r5
 8007770:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007774:	6823      	ldr	r3, [r4, #0]
 8007776:	d3eb      	bcc.n	8007750 <UART_CheckIdleState+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007778:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800777c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007780:	e843 2100 	strex	r1, r2, [r3]
 8007784:	2900      	cmp	r1, #0
 8007786:	d1f7      	bne.n	8007778 <UART_CheckIdleState+0x68>
      huart->gState = HAL_UART_STATE_READY;
 8007788:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 800778a:	2003      	movs	r0, #3
      huart->gState = HAL_UART_STATE_READY;
 800778c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      return HAL_TIMEOUT;
 8007790:	e7d6      	b.n	8007740 <UART_CheckIdleState+0x30>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007792:	69d3      	ldr	r3, [r2, #28]
 8007794:	025b      	lsls	r3, r3, #9
 8007796:	d4ca      	bmi.n	800772e <UART_CheckIdleState+0x1e>
 8007798:	e00d      	b.n	80077b6 <UART_CheckIdleState+0xa6>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	0750      	lsls	r0, r2, #29
 800779e:	d507      	bpl.n	80077b0 <UART_CheckIdleState+0xa0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80077a0:	69da      	ldr	r2, [r3, #28]
 80077a2:	0711      	lsls	r1, r2, #28
 80077a4:	f100 8083 	bmi.w	80078ae <UART_CheckIdleState+0x19e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80077a8:	69da      	ldr	r2, [r3, #28]
 80077aa:	0512      	lsls	r2, r2, #20
 80077ac:	f100 80ad 	bmi.w	800790a <UART_CheckIdleState+0x1fa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077b0:	69db      	ldr	r3, [r3, #28]
 80077b2:	025b      	lsls	r3, r3, #9
 80077b4:	d4bb      	bmi.n	800772e <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077b6:	f7fa f961 	bl	8001a7c <HAL_GetTick>
 80077ba:	1b43      	subs	r3, r0, r5
 80077bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80077c0:	6823      	ldr	r3, [r4, #0]
 80077c2:	d3ea      	bcc.n	800779a <UART_CheckIdleState+0x8a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c4:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80077c8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077cc:	e843 2100 	strex	r1, r2, [r3]
 80077d0:	2900      	cmp	r1, #0
 80077d2:	d1f7      	bne.n	80077c4 <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d4:	f103 0208 	add.w	r2, r3, #8
 80077d8:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077dc:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e0:	f103 0008 	add.w	r0, r3, #8
 80077e4:	e840 2100 	strex	r1, r2, [r0]
 80077e8:	2900      	cmp	r1, #0
 80077ea:	d1f3      	bne.n	80077d4 <UART_CheckIdleState+0xc4>
      huart->RxState = HAL_UART_STATE_READY;
 80077ec:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 80077ee:	2003      	movs	r0, #3
      huart->RxState = HAL_UART_STATE_READY;
 80077f0:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      return HAL_TIMEOUT;
 80077f4:	e7a4      	b.n	8007740 <UART_CheckIdleState+0x30>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80077f6:	2208      	movs	r2, #8
 80077f8:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077fa:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80077fe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007802:	e843 2100 	strex	r1, r2, [r3]
 8007806:	2900      	cmp	r1, #0
 8007808:	d1f7      	bne.n	80077fa <UART_CheckIdleState+0xea>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800780a:	4857      	ldr	r0, [pc, #348]	; (8007968 <UART_CheckIdleState+0x258>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800780c:	f103 0208 	add.w	r2, r3, #8
 8007810:	e852 2f00 	ldrex	r2, [r2]
 8007814:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007816:	f103 0508 	add.w	r5, r3, #8
 800781a:	e845 2100 	strex	r1, r2, [r5]
 800781e:	2900      	cmp	r1, #0
 8007820:	d1f4      	bne.n	800780c <UART_CheckIdleState+0xfc>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007822:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8007824:	2a01      	cmp	r2, #1
 8007826:	d00b      	beq.n	8007840 <UART_CheckIdleState+0x130>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007828:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800782a:	2020      	movs	r0, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800782c:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 800782e:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
  huart->RxISR = NULL;
 8007832:	6762      	str	r2, [r4, #116]	; 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007834:	66e2      	str	r2, [r4, #108]	; 0x6c
           __HAL_UNLOCK(huart);
 8007836:	f884 2084 	strb.w	r2, [r4, #132]	; 0x84
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800783a:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
           return HAL_ERROR;
 800783e:	e79b      	b.n	8007778 <UART_CheckIdleState+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007840:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007844:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007848:	e843 2100 	strex	r1, r2, [r3]
 800784c:	2900      	cmp	r1, #0
 800784e:	d1f7      	bne.n	8007840 <UART_CheckIdleState+0x130>
 8007850:	e7ea      	b.n	8007828 <UART_CheckIdleState+0x118>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007852:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007856:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007858:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800785c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007860:	e843 2100 	strex	r1, r2, [r3]
 8007864:	2900      	cmp	r1, #0
 8007866:	d1f7      	bne.n	8007858 <UART_CheckIdleState+0x148>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007868:	483f      	ldr	r0, [pc, #252]	; (8007968 <UART_CheckIdleState+0x258>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800786a:	f103 0208 	add.w	r2, r3, #8
 800786e:	e852 2f00 	ldrex	r2, [r2]
 8007872:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007874:	f103 0508 	add.w	r5, r3, #8
 8007878:	e845 2100 	strex	r1, r2, [r5]
 800787c:	2900      	cmp	r1, #0
 800787e:	d1f4      	bne.n	800786a <UART_CheckIdleState+0x15a>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007880:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8007882:	2a01      	cmp	r2, #1
 8007884:	d00a      	beq.n	800789c <UART_CheckIdleState+0x18c>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007886:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8007888:	2120      	movs	r1, #32
  huart->RxISR = NULL;
 800788a:	6762      	str	r2, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800788c:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
          __HAL_UNLOCK(huart);
 8007890:	f884 2084 	strb.w	r2, [r4, #132]	; 0x84
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007894:	66e2      	str	r2, [r4, #108]	; 0x6c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007896:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
          return HAL_TIMEOUT;
 800789a:	e76d      	b.n	8007778 <UART_CheckIdleState+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800789c:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078a0:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a4:	e843 2100 	strex	r1, r2, [r3]
 80078a8:	2900      	cmp	r1, #0
 80078aa:	d1f7      	bne.n	800789c <UART_CheckIdleState+0x18c>
 80078ac:	e7eb      	b.n	8007886 <UART_CheckIdleState+0x176>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80078ae:	2208      	movs	r2, #8
 80078b0:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b2:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80078b6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ba:	e843 2100 	strex	r1, r2, [r3]
 80078be:	2900      	cmp	r1, #0
 80078c0:	d1f7      	bne.n	80078b2 <UART_CheckIdleState+0x1a2>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80078c2:	4829      	ldr	r0, [pc, #164]	; (8007968 <UART_CheckIdleState+0x258>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c4:	f103 0208 	add.w	r2, r3, #8
 80078c8:	e852 2f00 	ldrex	r2, [r2]
 80078cc:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ce:	f103 0508 	add.w	r5, r3, #8
 80078d2:	e845 2100 	strex	r1, r2, [r5]
 80078d6:	2900      	cmp	r1, #0
 80078d8:	d1f4      	bne.n	80078c4 <UART_CheckIdleState+0x1b4>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078da:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80078dc:	2a01      	cmp	r2, #1
 80078de:	d00b      	beq.n	80078f8 <UART_CheckIdleState+0x1e8>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078e0:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 80078e2:	2020      	movs	r0, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80078e4:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 80078e6:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
  huart->RxISR = NULL;
 80078ea:	6762      	str	r2, [r4, #116]	; 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078ec:	66e2      	str	r2, [r4, #108]	; 0x6c
           __HAL_UNLOCK(huart);
 80078ee:	f884 2084 	strb.w	r2, [r4, #132]	; 0x84
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80078f2:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
           return HAL_ERROR;
 80078f6:	e765      	b.n	80077c4 <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f8:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078fc:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007900:	e843 2100 	strex	r1, r2, [r3]
 8007904:	2900      	cmp	r1, #0
 8007906:	d1f7      	bne.n	80078f8 <UART_CheckIdleState+0x1e8>
 8007908:	e7ea      	b.n	80078e0 <UART_CheckIdleState+0x1d0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800790a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800790e:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007910:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007914:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007918:	e843 2100 	strex	r1, r2, [r3]
 800791c:	2900      	cmp	r1, #0
 800791e:	d1f7      	bne.n	8007910 <UART_CheckIdleState+0x200>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007920:	4811      	ldr	r0, [pc, #68]	; (8007968 <UART_CheckIdleState+0x258>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007922:	f103 0208 	add.w	r2, r3, #8
 8007926:	e852 2f00 	ldrex	r2, [r2]
 800792a:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800792c:	f103 0508 	add.w	r5, r3, #8
 8007930:	e845 2100 	strex	r1, r2, [r5]
 8007934:	2900      	cmp	r1, #0
 8007936:	d1f4      	bne.n	8007922 <UART_CheckIdleState+0x212>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007938:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800793a:	2a01      	cmp	r2, #1
 800793c:	d00a      	beq.n	8007954 <UART_CheckIdleState+0x244>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800793e:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8007940:	2120      	movs	r1, #32
  huart->RxISR = NULL;
 8007942:	6762      	str	r2, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8007944:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
          __HAL_UNLOCK(huart);
 8007948:	f884 2084 	strb.w	r2, [r4, #132]	; 0x84
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800794c:	66e2      	str	r2, [r4, #108]	; 0x6c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800794e:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
          return HAL_TIMEOUT;
 8007952:	e737      	b.n	80077c4 <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007954:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007958:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800795c:	e843 2100 	strex	r1, r2, [r3]
 8007960:	2900      	cmp	r1, #0
 8007962:	d1f7      	bne.n	8007954 <UART_CheckIdleState+0x244>
 8007964:	e7eb      	b.n	800793e <UART_CheckIdleState+0x22e>
 8007966:	bf00      	nop
 8007968:	effffffe 	.word	0xeffffffe

0800796c <HAL_UART_Init>:
  if (huart == NULL)
 800796c:	b380      	cbz	r0, 80079d0 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 800796e:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
{
 8007972:	b510      	push	{r4, lr}
 8007974:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8007976:	b333      	cbz	r3, 80079c6 <HAL_UART_Init+0x5a>
  __HAL_UART_DISABLE(huart);
 8007978:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800797a:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 800797c:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 800797e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 8007982:	6813      	ldr	r3, [r2, #0]
 8007984:	f023 0301 	bic.w	r3, r3, #1
 8007988:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800798a:	f7ff fbcf 	bl	800712c <UART_SetConfig>
 800798e:	2801      	cmp	r0, #1
 8007990:	d017      	beq.n	80079c2 <HAL_UART_Init+0x56>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007992:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007994:	b98b      	cbnz	r3, 80079ba <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007996:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8007998:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800799a:	685a      	ldr	r2, [r3, #4]
 800799c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80079a0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80079a2:	689a      	ldr	r2, [r3, #8]
 80079a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80079a8:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80079aa:	681a      	ldr	r2, [r3, #0]
 80079ac:	f042 0201 	orr.w	r2, r2, #1
}
 80079b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 80079b4:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80079b6:	f7ff beab 	b.w	8007710 <UART_CheckIdleState>
    UART_AdvFeatureConfig(huart);
 80079ba:	4620      	mov	r0, r4
 80079bc:	f7ff fe50 	bl	8007660 <UART_AdvFeatureConfig>
 80079c0:	e7e9      	b.n	8007996 <HAL_UART_Init+0x2a>
}
 80079c2:	2001      	movs	r0, #1
 80079c4:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80079c6:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
    HAL_UART_MspInit(huart);
 80079ca:	f7f9 fea9 	bl	8001720 <HAL_UART_MspInit>
 80079ce:	e7d3      	b.n	8007978 <HAL_UART_Init+0xc>
}
 80079d0:	2001      	movs	r0, #1
 80079d2:	4770      	bx	lr

080079d4 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80079d4:	4770      	bx	lr
 80079d6:	bf00      	nop

080079d8 <HAL_UARTEx_RxFifoFullCallback>:
 80079d8:	4770      	bx	lr
 80079da:	bf00      	nop

080079dc <HAL_UARTEx_TxFifoEmptyCallback>:
 80079dc:	4770      	bx	lr
 80079de:	bf00      	nop

080079e0 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079e0:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
 80079e4:	2a01      	cmp	r2, #1
 80079e6:	d017      	beq.n	8007a18 <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079e8:	6802      	ldr	r2, [r0, #0]
 80079ea:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 80079ec:	2024      	movs	r0, #36	; 0x24
  /* Disable UART */
  __HAL_UART_DISABLE(huart);

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80079ee:	2100      	movs	r1, #0
{
 80079f0:	b430      	push	{r4, r5}
  huart->gState = HAL_UART_STATE_BUSY;
 80079f2:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 80079f6:	2520      	movs	r5, #32
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079f8:	6810      	ldr	r0, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80079fa:	6814      	ldr	r4, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80079fc:	f020 5000 	bic.w	r0, r0, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 8007a00:	f024 0401 	bic.w	r4, r4, #1
 8007a04:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007a06:	6659      	str	r1, [r3, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a08:	6010      	str	r0, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
 8007a0a:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8007a0c:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8007a10:	f883 1084 	strb.w	r1, [r3, #132]	; 0x84
}
 8007a14:	bc30      	pop	{r4, r5}
 8007a16:	4770      	bx	lr
  __HAL_LOCK(huart);
 8007a18:	2002      	movs	r0, #2
}
 8007a1a:	4770      	bx	lr

08007a1c <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a1c:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
 8007a20:	2a01      	cmp	r2, #1
 8007a22:	d037      	beq.n	8007a94 <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a24:	6802      	ldr	r2, [r0, #0]
 8007a26:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 8007a28:	2024      	movs	r0, #36	; 0x24
{
 8007a2a:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8007a2c:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a30:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a32:	6810      	ldr	r0, [r2, #0]
 8007a34:	f020 0001 	bic.w	r0, r0, #1
 8007a38:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007a3a:	6890      	ldr	r0, [r2, #8]
 8007a3c:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 8007a40:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007a42:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007a44:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007a46:	b310      	cbz	r0, 8007a8e <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007a48:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007a4a:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a4c:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a50:	4911      	ldr	r1, [pc, #68]	; (8007a98 <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007a52:	ea4f 7e50 	mov.w	lr, r0, lsr #29
                               (uint16_t)denominator[tx_fifo_threshold];
 8007a56:	4d11      	ldr	r5, [pc, #68]	; (8007a9c <HAL_UARTEx_SetTxFifoThreshold+0x80>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a58:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a5c:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8007a60:	f815 e00e 	ldrb.w	lr, [r5, lr]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a64:	0100      	lsls	r0, r0, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 8007a66:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a6a:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a6c:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a70:	fbb1 f1f5 	udiv	r1, r1, r5
 8007a74:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  huart->gState = HAL_UART_STATE_READY;
 8007a78:	2520      	movs	r5, #32
  __HAL_UNLOCK(huart);
 8007a7a:	2100      	movs	r1, #0
 8007a7c:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a80:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 8007a82:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8007a84:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8007a88:	f883 1084 	strb.w	r1, [r3, #132]	; 0x84
}
 8007a8c:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8007a8e:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8007a90:	4608      	mov	r0, r1
 8007a92:	e7ef      	b.n	8007a74 <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8007a94:	2002      	movs	r0, #2
}
 8007a96:	4770      	bx	lr
 8007a98:	08008510 	.word	0x08008510
 8007a9c:	08008508 	.word	0x08008508

08007aa0 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 8007aa0:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
 8007aa4:	2a01      	cmp	r2, #1
 8007aa6:	d037      	beq.n	8007b18 <HAL_UARTEx_SetRxFifoThreshold+0x78>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007aa8:	6802      	ldr	r2, [r0, #0]
 8007aaa:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 8007aac:	2024      	movs	r0, #36	; 0x24
{
 8007aae:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8007ab0:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ab4:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8007ab6:	6810      	ldr	r0, [r2, #0]
 8007ab8:	f020 0001 	bic.w	r0, r0, #1
 8007abc:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007abe:	6890      	ldr	r0, [r2, #8]
 8007ac0:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 8007ac4:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007ac6:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007ac8:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007aca:	b310      	cbz	r0, 8007b12 <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007acc:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007ace:	6890      	ldr	r0, [r2, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007ad0:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ad4:	4911      	ldr	r1, [pc, #68]	; (8007b1c <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007ad6:	ea4f 7e50 	mov.w	lr, r0, lsr #29
                               (uint16_t)denominator[tx_fifo_threshold];
 8007ada:	4d11      	ldr	r5, [pc, #68]	; (8007b20 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007adc:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007ae0:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8007ae4:	f815 e00e 	ldrb.w	lr, [r5, lr]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ae8:	0100      	lsls	r0, r0, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 8007aea:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007aee:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007af0:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007af4:	fbb1 f1f5 	udiv	r1, r1, r5
 8007af8:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  huart->gState = HAL_UART_STATE_READY;
 8007afc:	2520      	movs	r5, #32
  __HAL_UNLOCK(huart);
 8007afe:	2100      	movs	r1, #0
 8007b00:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b04:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 8007b06:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8007b08:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8007b0c:	f883 1084 	strb.w	r1, [r3, #132]	; 0x84
}
 8007b10:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8007b12:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8007b14:	4608      	mov	r0, r1
 8007b16:	e7ef      	b.n	8007af8 <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8007b18:	2002      	movs	r0, #2
}
 8007b1a:	4770      	bx	lr
 8007b1c:	08008510 	.word	0x08008510
 8007b20:	08008508 	.word	0x08008508

08007b24 <arm_q31_to_float>:
 8007b24:	b470      	push	{r4, r5, r6}
 8007b26:	0896      	lsrs	r6, r2, #2
 8007b28:	d02f      	beq.n	8007b8a <arm_q31_to_float+0x66>
 8007b2a:	f100 0410 	add.w	r4, r0, #16
 8007b2e:	f101 0310 	add.w	r3, r1, #16
 8007b32:	4635      	mov	r5, r6
 8007b34:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8007bd0 <arm_q31_to_float+0xac>
 8007b38:	ed54 7a04 	vldr	s15, [r4, #-16]
 8007b3c:	3d01      	subs	r5, #1
 8007b3e:	f104 0410 	add.w	r4, r4, #16
 8007b42:	f103 0310 	add.w	r3, r3, #16
 8007b46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007b4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007b4e:	ed43 7a08 	vstr	s15, [r3, #-32]	; 0xffffffe0
 8007b52:	ed54 7a07 	vldr	s15, [r4, #-28]	; 0xffffffe4
 8007b56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007b5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007b5e:	ed43 7a07 	vstr	s15, [r3, #-28]	; 0xffffffe4
 8007b62:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 8007b66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007b6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007b6e:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 8007b72:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 8007b76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007b7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007b7e:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 8007b82:	d1d9      	bne.n	8007b38 <arm_q31_to_float+0x14>
 8007b84:	0136      	lsls	r6, r6, #4
 8007b86:	4431      	add	r1, r6
 8007b88:	4430      	add	r0, r6
 8007b8a:	f012 0203 	ands.w	r2, r2, #3
 8007b8e:	d01d      	beq.n	8007bcc <arm_q31_to_float+0xa8>
 8007b90:	edd0 7a00 	vldr	s15, [r0]
 8007b94:	3a01      	subs	r2, #1
 8007b96:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8007bd0 <arm_q31_to_float+0xac>
 8007b9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007b9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007ba2:	edc1 7a00 	vstr	s15, [r1]
 8007ba6:	d011      	beq.n	8007bcc <arm_q31_to_float+0xa8>
 8007ba8:	edd0 7a01 	vldr	s15, [r0, #4]
 8007bac:	2a01      	cmp	r2, #1
 8007bae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007bb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007bb6:	edc1 7a01 	vstr	s15, [r1, #4]
 8007bba:	d007      	beq.n	8007bcc <arm_q31_to_float+0xa8>
 8007bbc:	edd0 7a02 	vldr	s15, [r0, #8]
 8007bc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007bc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007bc8:	edc1 7a02 	vstr	s15, [r1, #8]
 8007bcc:	bc70      	pop	{r4, r5, r6}
 8007bce:	4770      	bx	lr
 8007bd0:	30000000 	.word	0x30000000

08007bd4 <arm_mean_f32>:
 8007bd4:	b430      	push	{r4, r5}
 8007bd6:	088d      	lsrs	r5, r1, #2
 8007bd8:	d037      	beq.n	8007c4a <arm_mean_f32+0x76>
 8007bda:	f100 0310 	add.w	r3, r0, #16
 8007bde:	462c      	mov	r4, r5
 8007be0:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8007c50 <arm_mean_f32+0x7c>
 8007be4:	ed13 7a04 	vldr	s14, [r3, #-16]
 8007be8:	3c01      	subs	r4, #1
 8007bea:	ed13 6a03 	vldr	s12, [r3, #-12]
 8007bee:	f103 0310 	add.w	r3, r3, #16
 8007bf2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007bf6:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
 8007bfa:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
 8007bfe:	ee77 7a86 	vadd.f32	s15, s15, s12
 8007c02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c06:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007c0a:	d1eb      	bne.n	8007be4 <arm_mean_f32+0x10>
 8007c0c:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8007c10:	f011 0303 	ands.w	r3, r1, #3
 8007c14:	d00f      	beq.n	8007c36 <arm_mean_f32+0x62>
 8007c16:	ed90 7a00 	vldr	s14, [r0]
 8007c1a:	3b01      	subs	r3, #1
 8007c1c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007c20:	d009      	beq.n	8007c36 <arm_mean_f32+0x62>
 8007c22:	ed90 7a01 	vldr	s14, [r0, #4]
 8007c26:	2b01      	cmp	r3, #1
 8007c28:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007c2c:	d003      	beq.n	8007c36 <arm_mean_f32+0x62>
 8007c2e:	ed90 7a02 	vldr	s14, [r0, #8]
 8007c32:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007c36:	ee07 1a10 	vmov	s14, r1
 8007c3a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8007c3e:	bc30      	pop	{r4, r5}
 8007c40:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007c44:	edc2 6a00 	vstr	s13, [r2]
 8007c48:	4770      	bx	lr
 8007c4a:	eddf 7a01 	vldr	s15, [pc, #4]	; 8007c50 <arm_mean_f32+0x7c>
 8007c4e:	e7df      	b.n	8007c10 <arm_mean_f32+0x3c>
 8007c50:	00000000 	.word	0x00000000

08007c54 <arm_fir_init_f32>:
 8007c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c56:	9f06      	ldr	r7, [sp, #24]
 8007c58:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
 8007c5c:	460e      	mov	r6, r1
 8007c5e:	6082      	str	r2, [r0, #8]
 8007c60:	443c      	add	r4, r7
 8007c62:	4605      	mov	r5, r0
 8007c64:	8006      	strh	r6, [r0, #0]
 8007c66:	2100      	movs	r1, #0
 8007c68:	19a2      	adds	r2, r4, r6
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	0092      	lsls	r2, r2, #2
 8007c6e:	f000 fbab 	bl	80083c8 <memset>
 8007c72:	6068      	str	r0, [r5, #4]
 8007c74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c76:	bf00      	nop

08007c78 <arm_fir_f32>:
 8007c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c7c:	4604      	mov	r4, r0
 8007c7e:	ed2d 8b10 	vpush	{d8-d15}
 8007c82:	b08b      	sub	sp, #44	; 0x2c
 8007c84:	f8b4 8000 	ldrh.w	r8, [r4]
 8007c88:	f8d4 a004 	ldr.w	sl, [r4, #4]
 8007c8c:	9004      	str	r0, [sp, #16]
 8007c8e:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 8007c92:	9305      	str	r3, [sp, #20]
 8007c94:	08db      	lsrs	r3, r3, #3
 8007c96:	4440      	add	r0, r8
 8007c98:	68a4      	ldr	r4, [r4, #8]
 8007c9a:	9301      	str	r3, [sp, #4]
 8007c9c:	eb0a 0580 	add.w	r5, sl, r0, lsl #2
 8007ca0:	9402      	str	r4, [sp, #8]
 8007ca2:	9500      	str	r5, [sp, #0]
 8007ca4:	f000 81f1 	beq.w	800808a <arm_fir_f32+0x412>
 8007ca8:	4620      	mov	r0, r4
 8007caa:	ea4f 07d8 	mov.w	r7, r8, lsr #3
 8007cae:	469c      	mov	ip, r3
 8007cb0:	4623      	mov	r3, r4
 8007cb2:	3020      	adds	r0, #32
 8007cb4:	f008 0907 	and.w	r9, r8, #7
 8007cb8:	9706      	str	r7, [sp, #24]
 8007cba:	f10a 0b1c 	add.w	fp, sl, #28
 8007cbe:	9003      	str	r0, [sp, #12]
 8007cc0:	0178      	lsls	r0, r7, #5
 8007cc2:	9f03      	ldr	r7, [sp, #12]
 8007cc4:	f101 0620 	add.w	r6, r1, #32
 8007cc8:	4403      	add	r3, r0
 8007cca:	9007      	str	r0, [sp, #28]
 8007ccc:	4407      	add	r7, r0
 8007cce:	f8dd e018 	ldr.w	lr, [sp, #24]
 8007cd2:	4648      	mov	r0, r9
 8007cd4:	f8cd a018 	str.w	sl, [sp, #24]
 8007cd8:	3520      	adds	r5, #32
 8007cda:	f102 0420 	add.w	r4, r2, #32
 8007cde:	4699      	mov	r9, r3
 8007ce0:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8007ce4:	f8cd 8020 	str.w	r8, [sp, #32]
 8007ce8:	9209      	str	r2, [sp, #36]	; 0x24
 8007cea:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8007cee:	9107      	str	r1, [sp, #28]
 8007cf0:	f856 3c20 	ldr.w	r3, [r6, #-32]
 8007cf4:	465a      	mov	r2, fp
 8007cf6:	f845 3c20 	str.w	r3, [r5, #-32]
 8007cfa:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 8007cfe:	f845 3c1c 	str.w	r3, [r5, #-28]
 8007d02:	f856 3c18 	ldr.w	r3, [r6, #-24]
 8007d06:	f845 3c18 	str.w	r3, [r5, #-24]
 8007d0a:	f856 3c14 	ldr.w	r3, [r6, #-20]
 8007d0e:	f845 3c14 	str.w	r3, [r5, #-20]
 8007d12:	f856 3c10 	ldr.w	r3, [r6, #-16]
 8007d16:	f845 3c10 	str.w	r3, [r5, #-16]
 8007d1a:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 8007d1e:	f845 3c0c 	str.w	r3, [r5, #-12]
 8007d22:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8007d26:	f845 3c08 	str.w	r3, [r5, #-8]
 8007d2a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007d2e:	f845 3c04 	str.w	r3, [r5, #-4]
 8007d32:	ed1b 9a07 	vldr	s18, [fp, #-28]	; 0xffffffe4
 8007d36:	ed5b 1a06 	vldr	s3, [fp, #-24]	; 0xffffffe8
 8007d3a:	ed1b 1a05 	vldr	s2, [fp, #-20]	; 0xffffffec
 8007d3e:	ed5b 0a04 	vldr	s1, [fp, #-16]
 8007d42:	ed1b 0a03 	vldr	s0, [fp, #-12]
 8007d46:	ed1b 8a02 	vldr	s16, [fp, #-8]
 8007d4a:	ed5b 8a01 	vldr	s17, [fp, #-4]
 8007d4e:	f1be 0f00 	cmp.w	lr, #0
 8007d52:	f000 8200 	beq.w	8008156 <arm_fir_f32+0x4de>
 8007d56:	eddf 6af3 	vldr	s13, [pc, #972]	; 8008124 <arm_fir_f32+0x4ac>
 8007d5a:	f10b 0120 	add.w	r1, fp, #32
 8007d5e:	4653      	mov	r3, sl
 8007d60:	eeb0 ca66 	vmov.f32	s24, s13
 8007d64:	460a      	mov	r2, r1
 8007d66:	eeb0 6a66 	vmov.f32	s12, s13
 8007d6a:	eef0 9a66 	vmov.f32	s19, s13
 8007d6e:	eeb0 aa66 	vmov.f32	s20, s13
 8007d72:	eef0 aa66 	vmov.f32	s21, s13
 8007d76:	eeb0 ba66 	vmov.f32	s22, s13
 8007d7a:	eef0 ba66 	vmov.f32	s23, s13
 8007d7e:	ed13 7a08 	vldr	s14, [r3, #-32]	; 0xffffffe0
 8007d82:	3320      	adds	r3, #32
 8007d84:	ed52 4a08 	vldr	s9, [r2, #-32]	; 0xffffffe0
 8007d88:	3220      	adds	r2, #32
 8007d8a:	ee67 fa09 	vmul.f32	s31, s14, s18
 8007d8e:	ed53 ea0f 	vldr	s29, [r3, #-60]	; 0xffffffc4
 8007d92:	ee27 da21 	vmul.f32	s26, s14, s3
 8007d96:	ed12 9a0f 	vldr	s18, [r2, #-60]	; 0xffffffc4
 8007d9a:	ee27 2a01 	vmul.f32	s4, s14, s2
 8007d9e:	ed13 ea0e 	vldr	s28, [r3, #-56]	; 0xffffffc8
 8007da2:	ee27 3a20 	vmul.f32	s6, s14, s1
 8007da6:	ed53 da0d 	vldr	s27, [r3, #-52]	; 0xffffffcc
 8007daa:	ee67 3a00 	vmul.f32	s7, s14, s0
 8007dae:	ed53 ca0c 	vldr	s25, [r3, #-48]	; 0xffffffd0
 8007db2:	ee67 5a08 	vmul.f32	s11, s14, s16
 8007db6:	ed53 2a0b 	vldr	s5, [r3, #-44]	; 0xffffffd4
 8007dba:	ee27 fa28 	vmul.f32	s30, s14, s17
 8007dbe:	ed13 4a0a 	vldr	s8, [r3, #-40]	; 0xffffffd8
 8007dc2:	ee67 7a24 	vmul.f32	s15, s14, s9
 8007dc6:	ed13 5a09 	vldr	s10, [r3, #-36]	; 0xffffffdc
 8007dca:	ee7f baab 	vadd.f32	s23, s31, s23
 8007dce:	429f      	cmp	r7, r3
 8007dd0:	ee6e faa1 	vmul.f32	s31, s29, s3
 8007dd4:	ed52 1a0e 	vldr	s3, [r2, #-56]	; 0xffffffc8
 8007dd8:	ee3d ba0b 	vadd.f32	s22, s26, s22
 8007ddc:	ee72 aa2a 	vadd.f32	s21, s4, s21
 8007de0:	ee2e da81 	vmul.f32	s26, s29, s2
 8007de4:	ee2e 2aa0 	vmul.f32	s4, s29, s1
 8007de8:	ee33 aa0a 	vadd.f32	s20, s6, s20
 8007dec:	ee73 9aa9 	vadd.f32	s19, s7, s19
 8007df0:	ee2e 3a80 	vmul.f32	s6, s29, s0
 8007df4:	ee6e 3a88 	vmul.f32	s7, s29, s16
 8007df8:	ee35 6a86 	vadd.f32	s12, s11, s12
 8007dfc:	ee3f ca0c 	vadd.f32	s24, s30, s24
 8007e00:	ee6e 5aa8 	vmul.f32	s11, s29, s17
 8007e04:	ee24 faae 	vmul.f32	s30, s9, s29
 8007e08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e0c:	ee6e ea89 	vmul.f32	s29, s29, s18
 8007e10:	ee2e 7a01 	vmul.f32	s14, s28, s2
 8007e14:	ed12 1a0d 	vldr	s2, [r2, #-52]	; 0xffffffcc
 8007e18:	ee7f baab 	vadd.f32	s23, s31, s23
 8007e1c:	ee3d ba0b 	vadd.f32	s22, s26, s22
 8007e20:	ee72 aa2a 	vadd.f32	s21, s4, s21
 8007e24:	ee2e da20 	vmul.f32	s26, s28, s1
 8007e28:	ee2e 2a00 	vmul.f32	s4, s28, s0
 8007e2c:	ee33 aa0a 	vadd.f32	s20, s6, s20
 8007e30:	ee73 9aa9 	vadd.f32	s19, s7, s19
 8007e34:	ee2e 3a08 	vmul.f32	s6, s28, s16
 8007e38:	ee6e 3a28 	vmul.f32	s7, s28, s17
 8007e3c:	ee35 6a86 	vadd.f32	s12, s11, s12
 8007e40:	ee3f ca0c 	vadd.f32	s24, s30, s24
 8007e44:	ee64 5a8e 	vmul.f32	s11, s9, s28
 8007e48:	ee29 fa0e 	vmul.f32	s30, s18, s28
 8007e4c:	ee7e 7aa7 	vadd.f32	s15, s29, s15
 8007e50:	ee2e ea21 	vmul.f32	s28, s28, s3
 8007e54:	ee6d 6aa0 	vmul.f32	s13, s27, s1
 8007e58:	ed52 0a0c 	vldr	s1, [r2, #-48]	; 0xffffffd0
 8007e5c:	ee3d ba0b 	vadd.f32	s22, s26, s22
 8007e60:	ee77 ba2b 	vadd.f32	s23, s14, s23
 8007e64:	ee2d da80 	vmul.f32	s26, s27, s0
 8007e68:	ee72 aa2a 	vadd.f32	s21, s4, s21
 8007e6c:	ee33 aa0a 	vadd.f32	s20, s6, s20
 8007e70:	ee2d 2a88 	vmul.f32	s4, s27, s16
 8007e74:	ee2d 3aa8 	vmul.f32	s6, s27, s17
 8007e78:	ee73 9aa9 	vadd.f32	s19, s7, s19
 8007e7c:	ee35 6a86 	vadd.f32	s12, s11, s12
 8007e80:	ee64 3aad 	vmul.f32	s7, s9, s27
 8007e84:	ee69 5a2d 	vmul.f32	s11, s18, s27
 8007e88:	ee3f ca0c 	vadd.f32	s24, s30, s24
 8007e8c:	ee7e 7a27 	vadd.f32	s15, s28, s15
 8007e90:	ee21 faad 	vmul.f32	s30, s3, s27
 8007e94:	ee6d da81 	vmul.f32	s27, s27, s2
 8007e98:	ee6c fa80 	vmul.f32	s31, s25, s0
 8007e9c:	ed12 0a0b 	vldr	s0, [r2, #-44]	; 0xffffffd4
 8007ea0:	ee76 baab 	vadd.f32	s23, s13, s23
 8007ea4:	ee3d da0b 	vadd.f32	s26, s26, s22
 8007ea8:	ee72 aa2a 	vadd.f32	s21, s4, s21
 8007eac:	ee2c ba88 	vmul.f32	s22, s25, s16
 8007eb0:	ee2c 2aa8 	vmul.f32	s4, s25, s17
 8007eb4:	ee33 aa0a 	vadd.f32	s20, s6, s20
 8007eb8:	ee73 9aa9 	vadd.f32	s19, s7, s19
 8007ebc:	ee24 3aac 	vmul.f32	s6, s9, s25
 8007ec0:	ee69 3a2c 	vmul.f32	s7, s18, s25
 8007ec4:	ee35 6a86 	vadd.f32	s12, s11, s12
 8007ec8:	ee3f ca0c 	vadd.f32	s24, s30, s24
 8007ecc:	ee61 5aac 	vmul.f32	s11, s3, s25
 8007ed0:	ee21 fa2c 	vmul.f32	s30, s2, s25
 8007ed4:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 8007ed8:	ee6c caa0 	vmul.f32	s25, s25, s1
 8007edc:	ee62 ea88 	vmul.f32	s29, s5, s16
 8007ee0:	ed12 8a0a 	vldr	s16, [r2, #-40]	; 0xffffffd8
 8007ee4:	ee3b da0d 	vadd.f32	s26, s22, s26
 8007ee8:	ee7f baab 	vadd.f32	s23, s31, s23
 8007eec:	ee22 baa8 	vmul.f32	s22, s5, s17
 8007ef0:	ee72 aa2a 	vadd.f32	s21, s4, s21
 8007ef4:	ee33 aa0a 	vadd.f32	s20, s6, s20
 8007ef8:	ee24 2aa2 	vmul.f32	s4, s9, s5
 8007efc:	ee29 3a22 	vmul.f32	s6, s18, s5
 8007f00:	ee73 9aa9 	vadd.f32	s19, s7, s19
 8007f04:	ee35 6a86 	vadd.f32	s12, s11, s12
 8007f08:	ee61 3aa2 	vmul.f32	s7, s3, s5
 8007f0c:	ee61 5a22 	vmul.f32	s11, s2, s5
 8007f10:	ee3f ca0c 	vadd.f32	s24, s30, s24
 8007f14:	ee7c 7aa7 	vadd.f32	s15, s25, s15
 8007f18:	ee20 faa2 	vmul.f32	s30, s1, s5
 8007f1c:	ee62 2a80 	vmul.f32	s5, s5, s0
 8007f20:	ee7e faab 	vadd.f32	s31, s29, s23
 8007f24:	ee3b ba0d 	vadd.f32	s22, s22, s26
 8007f28:	ee64 ba28 	vmul.f32	s23, s8, s17
 8007f2c:	ed52 8a09 	vldr	s17, [r2, #-36]	; 0xffffffdc
 8007f30:	ee24 da84 	vmul.f32	s26, s9, s8
 8007f34:	ee72 7aa7 	vadd.f32	s15, s5, s15
 8007f38:	ee72 aa2a 	vadd.f32	s21, s4, s21
 8007f3c:	ee33 aa0a 	vadd.f32	s20, s6, s20
 8007f40:	ee29 2a04 	vmul.f32	s4, s18, s8
 8007f44:	ee21 3a84 	vmul.f32	s6, s3, s8
 8007f48:	ee73 9aa9 	vadd.f32	s19, s7, s19
 8007f4c:	ee35 6a86 	vadd.f32	s12, s11, s12
 8007f50:	ee61 3a04 	vmul.f32	s7, s2, s8
 8007f54:	ee60 5a84 	vmul.f32	s11, s1, s8
 8007f58:	ee3f ca0c 	vadd.f32	s24, s30, s24
 8007f5c:	ee20 7a04 	vmul.f32	s14, s0, s8
 8007f60:	ee64 6a08 	vmul.f32	s13, s8, s16
 8007f64:	ee33 aa0a 	vadd.f32	s20, s6, s20
 8007f68:	ee73 9aa9 	vadd.f32	s19, s7, s19
 8007f6c:	ee35 6a86 	vadd.f32	s12, s11, s12
 8007f70:	ee37 7a0c 	vadd.f32	s14, s14, s24
 8007f74:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8007f78:	ee7b baaf 	vadd.f32	s23, s23, s31
 8007f7c:	ee64 4a85 	vmul.f32	s9, s9, s10
 8007f80:	ee3d ba0b 	vadd.f32	s22, s26, s22
 8007f84:	ee29 4a05 	vmul.f32	s8, s18, s10
 8007f88:	ee72 aa2a 	vadd.f32	s21, s4, s21
 8007f8c:	ee61 2a85 	vmul.f32	s5, s3, s10
 8007f90:	ee21 3a05 	vmul.f32	s6, s2, s10
 8007f94:	ee60 3a85 	vmul.f32	s7, s1, s10
 8007f98:	ee60 5a05 	vmul.f32	s11, s0, s10
 8007f9c:	ee28 ca05 	vmul.f32	s24, s16, s10
 8007fa0:	ee65 7a28 	vmul.f32	s15, s10, s17
 8007fa4:	ee74 baab 	vadd.f32	s23, s9, s23
 8007fa8:	ee34 ba0b 	vadd.f32	s22, s8, s22
 8007fac:	ee72 aaaa 	vadd.f32	s21, s5, s21
 8007fb0:	ee33 aa0a 	vadd.f32	s20, s6, s20
 8007fb4:	ee73 9aa9 	vadd.f32	s19, s7, s19
 8007fb8:	ee35 6a86 	vadd.f32	s12, s11, s12
 8007fbc:	ee3c ca07 	vadd.f32	s24, s24, s14
 8007fc0:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8007fc4:	f47f aedb 	bne.w	8007d7e <arm_fir_f32+0x106>
 8007fc8:	eb0b 0208 	add.w	r2, fp, r8
 8007fcc:	46cb      	mov	fp, r9
 8007fce:	b3a0      	cbz	r0, 800803a <arm_fir_f32+0x3c2>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	ecfb 7a01 	vldmia	fp!, {s15}
 8007fd6:	3b01      	subs	r3, #1
 8007fd8:	ecf2 5a01 	vldmia	r2!, {s11}
 8007fdc:	ee27 2a89 	vmul.f32	s4, s15, s18
 8007fe0:	ee67 2aa1 	vmul.f32	s5, s15, s3
 8007fe4:	ee27 3a81 	vmul.f32	s6, s15, s2
 8007fe8:	ee67 3aa0 	vmul.f32	s7, s15, s1
 8007fec:	ee27 4a80 	vmul.f32	s8, s15, s0
 8007ff0:	ee67 4a88 	vmul.f32	s9, s15, s16
 8007ff4:	ee27 5aa8 	vmul.f32	s10, s15, s17
 8007ff8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007ffc:	eeb0 9a61 	vmov.f32	s18, s3
 8008000:	ee7b ba82 	vadd.f32	s23, s23, s4
 8008004:	eef0 1a41 	vmov.f32	s3, s2
 8008008:	ee3b ba22 	vadd.f32	s22, s22, s5
 800800c:	eeb0 1a60 	vmov.f32	s2, s1
 8008010:	ee7a aa83 	vadd.f32	s21, s21, s6
 8008014:	eef0 0a40 	vmov.f32	s1, s0
 8008018:	ee3a aa23 	vadd.f32	s20, s20, s7
 800801c:	eeb0 0a48 	vmov.f32	s0, s16
 8008020:	ee79 9a84 	vadd.f32	s19, s19, s8
 8008024:	eeb0 8a68 	vmov.f32	s16, s17
 8008028:	ee36 6a24 	vadd.f32	s12, s12, s9
 800802c:	eef0 8a65 	vmov.f32	s17, s11
 8008030:	ee3c ca05 	vadd.f32	s24, s24, s10
 8008034:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8008038:	d1cb      	bne.n	8007fd2 <arm_fir_f32+0x35a>
 800803a:	f1bc 0c01 	subs.w	ip, ip, #1
 800803e:	ed44 ba08 	vstr	s23, [r4, #-32]	; 0xffffffe0
 8008042:	ed04 ba07 	vstr	s22, [r4, #-28]	; 0xffffffe4
 8008046:	f106 0620 	add.w	r6, r6, #32
 800804a:	ed44 aa06 	vstr	s21, [r4, #-24]	; 0xffffffe8
 800804e:	f105 0520 	add.w	r5, r5, #32
 8008052:	ed04 aa05 	vstr	s20, [r4, #-20]	; 0xffffffec
 8008056:	468b      	mov	fp, r1
 8008058:	ed44 9a04 	vstr	s19, [r4, #-16]
 800805c:	f104 0420 	add.w	r4, r4, #32
 8008060:	ed04 6a0b 	vstr	s12, [r4, #-44]	; 0xffffffd4
 8008064:	ed04 ca0a 	vstr	s24, [r4, #-40]	; 0xffffffd8
 8008068:	ed44 6a09 	vstr	s13, [r4, #-36]	; 0xffffffdc
 800806c:	f47f ae40 	bne.w	8007cf0 <arm_fir_f32+0x78>
 8008070:	9b01      	ldr	r3, [sp, #4]
 8008072:	9800      	ldr	r0, [sp, #0]
 8008074:	015b      	lsls	r3, r3, #5
 8008076:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008078:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800807c:	4418      	add	r0, r3
 800807e:	441a      	add	r2, r3
 8008080:	e9dd a106 	ldrd	sl, r1, [sp, #24]
 8008084:	9000      	str	r0, [sp, #0]
 8008086:	4419      	add	r1, r3
 8008088:	449a      	add	sl, r3
 800808a:	9b05      	ldr	r3, [sp, #20]
 800808c:	f013 0c07 	ands.w	ip, r3, #7
 8008090:	d021      	beq.n	80080d6 <arm_fir_f32+0x45e>
 8008092:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8008096:	9e00      	ldr	r6, [sp, #0]
 8008098:	4655      	mov	r5, sl
 800809a:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800809e:	eb01 0e0c 	add.w	lr, r1, ip
 80080a2:	f851 7b04 	ldr.w	r7, [r1], #4
 80080a6:	4643      	mov	r3, r8
 80080a8:	464c      	mov	r4, r9
 80080aa:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8008124 <arm_fir_f32+0x4ac>
 80080ae:	4628      	mov	r0, r5
 80080b0:	f846 7b04 	str.w	r7, [r6], #4
 80080b4:	ecf0 7a01 	vldmia	r0!, {s15}
 80080b8:	3b01      	subs	r3, #1
 80080ba:	ecf4 6a01 	vldmia	r4!, {s13}
 80080be:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80080c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80080c6:	d1f5      	bne.n	80080b4 <arm_fir_f32+0x43c>
 80080c8:	4571      	cmp	r1, lr
 80080ca:	eca2 7a01 	vstmia	r2!, {s14}
 80080ce:	f105 0504 	add.w	r5, r5, #4
 80080d2:	d1e6      	bne.n	80080a2 <arm_fir_f32+0x42a>
 80080d4:	44e2      	add	sl, ip
 80080d6:	f108 38ff 	add.w	r8, r8, #4294967295
 80080da:	9b04      	ldr	r3, [sp, #16]
 80080dc:	ea5f 0498 	movs.w	r4, r8, lsr #2
 80080e0:	685d      	ldr	r5, [r3, #4]
 80080e2:	d021      	beq.n	8008128 <arm_fir_f32+0x4b0>
 80080e4:	f10a 0210 	add.w	r2, sl, #16
 80080e8:	f105 0310 	add.w	r3, r5, #16
 80080ec:	4621      	mov	r1, r4
 80080ee:	f852 0c10 	ldr.w	r0, [r2, #-16]
 80080f2:	3901      	subs	r1, #1
 80080f4:	f102 0210 	add.w	r2, r2, #16
 80080f8:	f103 0310 	add.w	r3, r3, #16
 80080fc:	f843 0c20 	str.w	r0, [r3, #-32]
 8008100:	f852 0c1c 	ldr.w	r0, [r2, #-28]
 8008104:	f843 0c1c 	str.w	r0, [r3, #-28]
 8008108:	f852 0c18 	ldr.w	r0, [r2, #-24]
 800810c:	f843 0c18 	str.w	r0, [r3, #-24]
 8008110:	f852 0c14 	ldr.w	r0, [r2, #-20]
 8008114:	f843 0c14 	str.w	r0, [r3, #-20]
 8008118:	d1e9      	bne.n	80080ee <arm_fir_f32+0x476>
 800811a:	0124      	lsls	r4, r4, #4
 800811c:	44a2      	add	sl, r4
 800811e:	4425      	add	r5, r4
 8008120:	e002      	b.n	8008128 <arm_fir_f32+0x4b0>
 8008122:	bf00      	nop
 8008124:	00000000 	.word	0x00000000
 8008128:	f018 0803 	ands.w	r8, r8, #3
 800812c:	d00e      	beq.n	800814c <arm_fir_f32+0x4d4>
 800812e:	f8da 3000 	ldr.w	r3, [sl]
 8008132:	f1b8 0801 	subs.w	r8, r8, #1
 8008136:	602b      	str	r3, [r5, #0]
 8008138:	d008      	beq.n	800814c <arm_fir_f32+0x4d4>
 800813a:	f8da 3004 	ldr.w	r3, [sl, #4]
 800813e:	f1b8 0f01 	cmp.w	r8, #1
 8008142:	606b      	str	r3, [r5, #4]
 8008144:	d002      	beq.n	800814c <arm_fir_f32+0x4d4>
 8008146:	f8da 3008 	ldr.w	r3, [sl, #8]
 800814a:	60ab      	str	r3, [r5, #8]
 800814c:	b00b      	add	sp, #44	; 0x2c
 800814e:	ecbd 8b10 	vpop	{d8-d15}
 8008152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008156:	ed5f 6a0d 	vldr	s13, [pc, #-52]	; 8008124 <arm_fir_f32+0x4ac>
 800815a:	f102 0120 	add.w	r1, r2, #32
 800815e:	f8dd b008 	ldr.w	fp, [sp, #8]
 8008162:	eeb0 ca66 	vmov.f32	s24, s13
 8008166:	eeb0 6a66 	vmov.f32	s12, s13
 800816a:	eef0 9a66 	vmov.f32	s19, s13
 800816e:	eeb0 aa66 	vmov.f32	s20, s13
 8008172:	eef0 aa66 	vmov.f32	s21, s13
 8008176:	eeb0 ba66 	vmov.f32	s22, s13
 800817a:	eef0 ba66 	vmov.f32	s23, s13
 800817e:	e726      	b.n	8007fce <arm_fir_f32+0x356>

08008180 <arm_cmplx_mag_f32>:
 8008180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008184:	0897      	lsrs	r7, r2, #2
 8008186:	ed2d 8b02 	vpush	{d8}
 800818a:	b084      	sub	sp, #16
 800818c:	d077      	beq.n	800827e <arm_cmplx_mag_f32+0xfe>
 800818e:	f100 0420 	add.w	r4, r0, #32
 8008192:	f101 0510 	add.w	r5, r1, #16
 8008196:	463e      	mov	r6, r7
 8008198:	f04f 0800 	mov.w	r8, #0
 800819c:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 80081a0:	ed54 7a07 	vldr	s15, [r4, #-28]	; 0xffffffe4
 80081a4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80081a8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80081ac:	ee30 0a27 	vadd.f32	s0, s0, s15
 80081b0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80081b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081b8:	f2c0 80c1 	blt.w	800833e <arm_cmplx_mag_f32+0x1be>
 80081bc:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80081c0:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80081c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081c8:	f100 80d4 	bmi.w	8008374 <arm_cmplx_mag_f32+0x1f4>
 80081cc:	ed05 8a04 	vstr	s16, [r5, #-16]
 80081d0:	ed14 0a06 	vldr	s0, [r4, #-24]	; 0xffffffe8
 80081d4:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 80081d8:	ee20 0a00 	vmul.f32	s0, s0, s0
 80081dc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80081e0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80081e4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80081e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081ec:	f2c0 80a4 	blt.w	8008338 <arm_cmplx_mag_f32+0x1b8>
 80081f0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80081f4:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80081f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081fc:	f100 80a8 	bmi.w	8008350 <arm_cmplx_mag_f32+0x1d0>
 8008200:	ed05 8a03 	vstr	s16, [r5, #-12]
 8008204:	ed14 0a04 	vldr	s0, [r4, #-16]
 8008208:	ed54 7a03 	vldr	s15, [r4, #-12]
 800820c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8008210:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008214:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008218:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800821c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008220:	f2c0 8087 	blt.w	8008332 <arm_cmplx_mag_f32+0x1b2>
 8008224:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8008228:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800822c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008230:	f100 8097 	bmi.w	8008362 <arm_cmplx_mag_f32+0x1e2>
 8008234:	ed05 8a02 	vstr	s16, [r5, #-8]
 8008238:	ed14 0a02 	vldr	s0, [r4, #-8]
 800823c:	ed54 7a01 	vldr	s15, [r4, #-4]
 8008240:	ee20 0a00 	vmul.f32	s0, s0, s0
 8008244:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008248:	ee30 0a27 	vadd.f32	s0, s0, s15
 800824c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008254:	db6a      	blt.n	800832c <arm_cmplx_mag_f32+0x1ac>
 8008256:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800825a:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800825e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008262:	f100 8090 	bmi.w	8008386 <arm_cmplx_mag_f32+0x206>
 8008266:	ed05 8a01 	vstr	s16, [r5, #-4]
 800826a:	3e01      	subs	r6, #1
 800826c:	f104 0420 	add.w	r4, r4, #32
 8008270:	f105 0510 	add.w	r5, r5, #16
 8008274:	d192      	bne.n	800819c <arm_cmplx_mag_f32+0x1c>
 8008276:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 800827a:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 800827e:	f012 0203 	ands.w	r2, r2, #3
 8008282:	d04e      	beq.n	8008322 <arm_cmplx_mag_f32+0x1a2>
 8008284:	ed90 0a00 	vldr	s0, [r0]
 8008288:	2300      	movs	r3, #0
 800828a:	edd0 7a01 	vldr	s15, [r0, #4]
 800828e:	ee20 0a00 	vmul.f32	s0, s0, s0
 8008292:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008296:	ee37 0a80 	vadd.f32	s0, s15, s0
 800829a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800829e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082a2:	db4f      	blt.n	8008344 <arm_cmplx_mag_f32+0x1c4>
 80082a4:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80082a8:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80082ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082b0:	d472      	bmi.n	8008398 <arm_cmplx_mag_f32+0x218>
 80082b2:	ed81 8a00 	vstr	s16, [r1]
 80082b6:	3a01      	subs	r2, #1
 80082b8:	d033      	beq.n	8008322 <arm_cmplx_mag_f32+0x1a2>
 80082ba:	ed90 0a02 	vldr	s0, [r0, #8]
 80082be:	2300      	movs	r3, #0
 80082c0:	edd0 7a03 	vldr	s15, [r0, #12]
 80082c4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80082c8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80082cc:	ee37 0a80 	vadd.f32	s0, s15, s0
 80082d0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80082d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082d8:	db36      	blt.n	8008348 <arm_cmplx_mag_f32+0x1c8>
 80082da:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80082de:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80082e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082e6:	d460      	bmi.n	80083aa <arm_cmplx_mag_f32+0x22a>
 80082e8:	ed81 8a01 	vstr	s16, [r1, #4]
 80082ec:	2a01      	cmp	r2, #1
 80082ee:	d018      	beq.n	8008322 <arm_cmplx_mag_f32+0x1a2>
 80082f0:	ed90 0a04 	vldr	s0, [r0, #16]
 80082f4:	2300      	movs	r3, #0
 80082f6:	edd0 7a05 	vldr	s15, [r0, #20]
 80082fa:	ee20 0a00 	vmul.f32	s0, s0, s0
 80082fe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008302:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008306:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800830a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800830e:	db1d      	blt.n	800834c <arm_cmplx_mag_f32+0x1cc>
 8008310:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8008314:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8008318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800831c:	d44e      	bmi.n	80083bc <arm_cmplx_mag_f32+0x23c>
 800831e:	ed81 8a02 	vstr	s16, [r1, #8]
 8008322:	b004      	add	sp, #16
 8008324:	ecbd 8b02 	vpop	{d8}
 8008328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800832c:	f845 8c04 	str.w	r8, [r5, #-4]
 8008330:	e79b      	b.n	800826a <arm_cmplx_mag_f32+0xea>
 8008332:	f845 8c08 	str.w	r8, [r5, #-8]
 8008336:	e77f      	b.n	8008238 <arm_cmplx_mag_f32+0xb8>
 8008338:	f845 8c0c 	str.w	r8, [r5, #-12]
 800833c:	e762      	b.n	8008204 <arm_cmplx_mag_f32+0x84>
 800833e:	f845 8c10 	str.w	r8, [r5, #-16]
 8008342:	e745      	b.n	80081d0 <arm_cmplx_mag_f32+0x50>
 8008344:	600b      	str	r3, [r1, #0]
 8008346:	e7b6      	b.n	80082b6 <arm_cmplx_mag_f32+0x136>
 8008348:	604b      	str	r3, [r1, #4]
 800834a:	e7cf      	b.n	80082ec <arm_cmplx_mag_f32+0x16c>
 800834c:	608b      	str	r3, [r1, #8]
 800834e:	e7e8      	b.n	8008322 <arm_cmplx_mag_f32+0x1a2>
 8008350:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8008354:	9001      	str	r0, [sp, #4]
 8008356:	f000 f869 	bl	800842c <sqrtf>
 800835a:	9801      	ldr	r0, [sp, #4]
 800835c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8008360:	e74e      	b.n	8008200 <arm_cmplx_mag_f32+0x80>
 8008362:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8008366:	9001      	str	r0, [sp, #4]
 8008368:	f000 f860 	bl	800842c <sqrtf>
 800836c:	9801      	ldr	r0, [sp, #4]
 800836e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8008372:	e75f      	b.n	8008234 <arm_cmplx_mag_f32+0xb4>
 8008374:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8008378:	9001      	str	r0, [sp, #4]
 800837a:	f000 f857 	bl	800842c <sqrtf>
 800837e:	9801      	ldr	r0, [sp, #4]
 8008380:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8008384:	e722      	b.n	80081cc <arm_cmplx_mag_f32+0x4c>
 8008386:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800838a:	9001      	str	r0, [sp, #4]
 800838c:	f000 f84e 	bl	800842c <sqrtf>
 8008390:	9801      	ldr	r0, [sp, #4]
 8008392:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8008396:	e766      	b.n	8008266 <arm_cmplx_mag_f32+0xe6>
 8008398:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800839c:	9201      	str	r2, [sp, #4]
 800839e:	f000 f845 	bl	800842c <sqrtf>
 80083a2:	9903      	ldr	r1, [sp, #12]
 80083a4:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 80083a8:	e783      	b.n	80082b2 <arm_cmplx_mag_f32+0x132>
 80083aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80083ae:	9201      	str	r2, [sp, #4]
 80083b0:	f000 f83c 	bl	800842c <sqrtf>
 80083b4:	9903      	ldr	r1, [sp, #12]
 80083b6:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 80083ba:	e795      	b.n	80082e8 <arm_cmplx_mag_f32+0x168>
 80083bc:	9101      	str	r1, [sp, #4]
 80083be:	f000 f835 	bl	800842c <sqrtf>
 80083c2:	9901      	ldr	r1, [sp, #4]
 80083c4:	e7ab      	b.n	800831e <arm_cmplx_mag_f32+0x19e>
 80083c6:	bf00      	nop

080083c8 <memset>:
 80083c8:	4402      	add	r2, r0
 80083ca:	4603      	mov	r3, r0
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d100      	bne.n	80083d2 <memset+0xa>
 80083d0:	4770      	bx	lr
 80083d2:	f803 1b01 	strb.w	r1, [r3], #1
 80083d6:	e7f9      	b.n	80083cc <memset+0x4>

080083d8 <__errno>:
 80083d8:	4b01      	ldr	r3, [pc, #4]	; (80083e0 <__errno+0x8>)
 80083da:	6818      	ldr	r0, [r3, #0]
 80083dc:	4770      	bx	lr
 80083de:	bf00      	nop
 80083e0:	200001c0 	.word	0x200001c0

080083e4 <__libc_init_array>:
 80083e4:	b570      	push	{r4, r5, r6, lr}
 80083e6:	4d0d      	ldr	r5, [pc, #52]	; (800841c <__libc_init_array+0x38>)
 80083e8:	4c0d      	ldr	r4, [pc, #52]	; (8008420 <__libc_init_array+0x3c>)
 80083ea:	1b64      	subs	r4, r4, r5
 80083ec:	10a4      	asrs	r4, r4, #2
 80083ee:	2600      	movs	r6, #0
 80083f0:	42a6      	cmp	r6, r4
 80083f2:	d109      	bne.n	8008408 <__libc_init_array+0x24>
 80083f4:	4d0b      	ldr	r5, [pc, #44]	; (8008424 <__libc_init_array+0x40>)
 80083f6:	4c0c      	ldr	r4, [pc, #48]	; (8008428 <__libc_init_array+0x44>)
 80083f8:	f000 f83a 	bl	8008470 <_init>
 80083fc:	1b64      	subs	r4, r4, r5
 80083fe:	10a4      	asrs	r4, r4, #2
 8008400:	2600      	movs	r6, #0
 8008402:	42a6      	cmp	r6, r4
 8008404:	d105      	bne.n	8008412 <__libc_init_array+0x2e>
 8008406:	bd70      	pop	{r4, r5, r6, pc}
 8008408:	f855 3b04 	ldr.w	r3, [r5], #4
 800840c:	4798      	blx	r3
 800840e:	3601      	adds	r6, #1
 8008410:	e7ee      	b.n	80083f0 <__libc_init_array+0xc>
 8008412:	f855 3b04 	ldr.w	r3, [r5], #4
 8008416:	4798      	blx	r3
 8008418:	3601      	adds	r6, #1
 800841a:	e7f2      	b.n	8008402 <__libc_init_array+0x1e>
 800841c:	08008520 	.word	0x08008520
 8008420:	08008520 	.word	0x08008520
 8008424:	08008520 	.word	0x08008520
 8008428:	08008524 	.word	0x08008524

0800842c <sqrtf>:
 800842c:	b508      	push	{r3, lr}
 800842e:	ed2d 8b02 	vpush	{d8}
 8008432:	eeb0 8a40 	vmov.f32	s16, s0
 8008436:	f000 f817 	bl	8008468 <__ieee754_sqrtf>
 800843a:	eeb4 8a48 	vcmp.f32	s16, s16
 800843e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008442:	d60c      	bvs.n	800845e <sqrtf+0x32>
 8008444:	eddf 8a07 	vldr	s17, [pc, #28]	; 8008464 <sqrtf+0x38>
 8008448:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800844c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008450:	d505      	bpl.n	800845e <sqrtf+0x32>
 8008452:	f7ff ffc1 	bl	80083d8 <__errno>
 8008456:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800845a:	2321      	movs	r3, #33	; 0x21
 800845c:	6003      	str	r3, [r0, #0]
 800845e:	ecbd 8b02 	vpop	{d8}
 8008462:	bd08      	pop	{r3, pc}
 8008464:	00000000 	.word	0x00000000

08008468 <__ieee754_sqrtf>:
 8008468:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800846c:	4770      	bx	lr
	...

08008470 <_init>:
 8008470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008472:	bf00      	nop
 8008474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008476:	bc08      	pop	{r3}
 8008478:	469e      	mov	lr, r3
 800847a:	4770      	bx	lr

0800847c <_fini>:
 800847c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800847e:	bf00      	nop
 8008480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008482:	bc08      	pop	{r3}
 8008484:	469e      	mov	lr, r3
 8008486:	4770      	bx	lr
